import * as RDF from "rdf-js";
/**
 * A helper class for converting RDF lists to JavaScript RDF term term lists
 */
export declare class RdfListMaterializer {
    private static readonly RDF_FIRST;
    private static readonly RDF_REST;
    private static readonly RDF_NIL;
    private readonly chains;
    protected static addChain(chains: {
        [id: string]: {
            first: RDF.Term;
            rest: RDF.Term;
        };
    }, subject: RDF.Term, object: RDF.Term, type: 'first' | 'rest'): void;
    protected static materializeChain(root: RDF.Term, chains: {
        [id: string]: {
            first: RDF.Term;
            rest: RDF.Term;
        };
    }, array?: RDF.Term[]): RDF.Term[];
    /**
     * Import the given RDF stream.
     * @param {Stream} stream An RDF stream.
     * @return {Promise<void>} A promise that resolves once the stream has ended.
     * @template Q The type of quad, defaults to RDF.Quad.
     */
    import<Q extends RDF.BaseQuad = RDF.Quad>(stream: RDF.Stream<Q>): Promise<void>;
    /**
     * Get the list identified by the given starting term.
     * @param {Term} root A root RDF term that identifies an RDF list.
     * @return {Term[]} A list of terms, or null if the given root is not a list.
     */
    getList(root: RDF.Term): RDF.Term[];
    /**
     * @return {Term[]} All available list roots.
     */
    getRoots(): RDF.Term[];
}
