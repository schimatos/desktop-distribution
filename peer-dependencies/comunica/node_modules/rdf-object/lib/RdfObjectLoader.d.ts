import { JsonLdContextNormalized, JsonLdContext } from "jsonld-context-parser";
import * as RDF from "rdf-js";
import { Resource } from "./Resource";
/**
 * Take a stream or array of RDF quads and loads them as linked resources.
 */
export declare class RdfObjectLoader {
    readonly normalizeLists: boolean;
    readonly context: Promise<JsonLdContextNormalized>;
    readonly resources: {
        [term: string]: Resource;
    };
    private contextResolved;
    constructor(args?: IRdfClassLoaderArgs);
    /**
     * Get the resource object for the given term.
     * If it does not exist, one will be created.
     * @param {Term} term An RDF term.
     * @return {Resource} A resource.
     */
    getOrMakeResource(term: RDF.Term): Resource;
    /**
     * Import the given stream of RDF quads.
     * Resources will be created and linked for all passed terms.
     * @param {Stream} stream A stream of RDF quads.
     * @return {Promise<void>} A promise that resolves when the stream has ended.
     * @template Q The type of quad, defaults to RDF.Quad.
     */
    import<Q extends RDF.BaseQuad = RDF.Quad>(stream: RDF.Stream<Q>): Promise<void>;
    /**
     * Import the given array of RDF quads.
     * Resources will be created and linked for all passed terms.
     * @param {Q[]} quads An array of RDF quads.
     * @return {Promise<void>} A promise that resolves when the array has been fully imported.
     * @template Q The type of quad, defaults to RDF.Quad.
     */
    importArray<Q extends RDF.BaseQuad = RDF.Quad>(quads: Q[]): Promise<void>;
}
export interface IRdfClassLoaderArgs {
    normalizeLists?: boolean;
    context?: JsonLdContext;
}
