import { JsonLdContextNormalized } from "jsonld-context-parser";
import * as RDF from "rdf-js";
/**
 * A resource is identified by a URI and has property links to other resources.
 */
export declare class Resource {
    readonly term: RDF.Term;
    readonly predicates: Resource[];
    readonly propertiesUri: {
        [predicate: string]: Resource[];
    };
    readonly properties: {
        [shortcut: string]: Resource[];
    };
    readonly property: {
        [shortcut: string]: Resource;
    };
    list: Resource[];
    constructor(args: IResourceArgs);
    /**
     * Get the term type of this resource.
     * @return {"NamedNode" | "BlankNode" | "Literal" | "Variable" | "DefaultGraph"}
     */
    get type(): "NamedNode" | "BlankNode" | "Literal" | "Variable" | "DefaultGraph" | "Quad";
    /**
     * @return {string} The URI, blank node label, literal value or variable name of this resource.
     */
    get value(): string;
    /**
     * Check if this resource is of the given type.
     *
     * This will be true if at least one of the following conditions is true.
     * 1. This resource equals `type`.
     * 2. This resource has the rdf:type `type`.
     * 3. This resource is a subclass of `type`.
     * 4. This resource is a subtype or subclass of a resource that is of the given type.
     *
     * @param {Term} type An RDF term.
     * @return {boolean} If this resource is of the given type.
     */
    isA(type: RDF.Term): boolean;
    /**
     * Add a property to the given resource.
     * @param {Resource} predicate Predicate resource of the property link.
     * @param {Resource} object Object resource of the property link.
     */
    addProperty(predicate: Resource, object: Resource): void;
    /**
     * @return {string} The string representation of a Resource
     */
    toString(): string;
}
export interface IResourceArgs {
    term: RDF.Term;
    context?: JsonLdContextNormalized;
}
