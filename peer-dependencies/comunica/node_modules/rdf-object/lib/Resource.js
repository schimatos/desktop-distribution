"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resource = void 0;
const jsonld_context_parser_1 = require("jsonld-context-parser");
const rdf_string_1 = require("rdf-string");
const ShortcutPropertyHandler_1 = require("./ShortcutPropertyHandler");
const SingularPropertyHandler_1 = require("./SingularPropertyHandler");
/**
 * A resource is identified by a URI and has property links to other resources.
 */
class Resource {
    constructor(args) {
        this.term = args.term;
        this.predicates = [];
        this.propertiesUri = {};
        this.properties = new Proxy(this.propertiesUri, new ShortcutPropertyHandler_1.ShortcutPropertyHandler(args.context || new jsonld_context_parser_1.JsonLdContextNormalized({})));
        this.property = new Proxy(this.properties, new SingularPropertyHandler_1.SingularPropertyHandler());
    }
    /**
     * Get the term type of this resource.
     * @return {"NamedNode" | "BlankNode" | "Literal" | "Variable" | "DefaultGraph"}
     */
    get type() {
        return this.term.termType;
    }
    /**
     * @return {string} The URI, blank node label, literal value or variable name of this resource.
     */
    get value() {
        return this.term.value;
    }
    /**
     * Check if this resource is of the given type.
     *
     * This will be true if at least one of the following conditions is true.
     * 1. This resource equals `type`.
     * 2. This resource has the rdf:type `type`.
     * 3. This resource is a subclass of `type`.
     * 4. This resource is a subtype or subclass of a resource that is of the given type.
     *
     * @param {Term} type An RDF term.
     * @return {boolean} If this resource is of the given type.
     */
    isA(type) {
        if (type.equals(this.term)) {
            return true;
        }
        return (this.propertiesUri['http://www.w3.org/1999/02/22-rdf-syntax-ns#type'] || [])
            .concat(this.propertiesUri['http://www.w3.org/1999/02/22-rdf-syntax-ns#subClassOf'] || [])
            .reduce((acc, superType) => acc || superType.isA(type), false);
    }
    /**
     * Add a property to the given resource.
     * @param {Resource} predicate Predicate resource of the property link.
     * @param {Resource} object Object resource of the property link.
     */
    addProperty(predicate, object) {
        const propertyUri = rdf_string_1.termToString(predicate.term);
        let properties = this.propertiesUri[propertyUri];
        if (!properties) {
            this.propertiesUri[propertyUri] = properties = [];
        }
        properties.push(object);
        this.predicates.push(predicate);
    }
    /**
     * @return {string} The string representation of a Resource
     */
    toString() {
        return this.value;
    }
}
exports.Resource = Resource;
//# sourceMappingURL=Resource.js.map