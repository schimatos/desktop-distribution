"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ldfManifestFromResource = void 0;
const rdf_test_suite_1 = require("rdf-test-suite");
const LdfResponseMockerFactory_1 = require("./factory/LdfResponseMockerFactory");
const ILdfTestCase_1 = require("./testcase/ldf/ILdfTestCase");
/**
 * Create a manifest object from a resource.
 * @param {{[uri: string]: ITestCaseHandler<ITestCase<any>>}} testCaseHandlers Handlers for constructing test cases.
 * @param {IFetchOptions} options The fetch options.
 * @param {Resource} resource A resource.
 * @return {Promise<IManifest>} A promise resolving to a manifest object.
 */
function ldfManifestFromResource(testCaseHandlers, options, resource) {
    return __awaiter(this, void 0, void 0, function* () {
        // The factory will allow each ITestCase to setup a mocking server if needed
        const factory = new LdfResponseMockerFactory_1.LdfResponseMockerFactory(options);
        const res = {
            comment: resource.property.comment ? resource.property.comment.value : null,
            label: resource.property.label ? resource.property.label.value : null,
            specifications: resource.property.specifications ? yield rdf_test_suite_1.Util.promiseValues(Object.assign.apply({}, yield Promise.all(resource.property.specifications.list
                .map((specificationResource) => ({ [specificationResource.term.value]: rdf_test_suite_1.manifestFromSpecificationResource(testCaseHandlers, options, specificationResource) }))))) : null,
            subManifests: yield Promise.all([].concat.apply([], resource.properties.include.map((includeList) => includeList.list
                .map(ldfManifestFromResource.bind(null, factory, testCaseHandlers, options))))),
            testEntries: (yield Promise.all([].concat.apply([], resource.properties.entries.map((entryList) => entryList.list
                .map(ILdfTestCase_1.ldfTestCaseFromResource.bind(null, factory, testCaseHandlers, options))))))
                .filter((v) => v),
            uri: resource.value,
        };
        return res;
    });
}
exports.ldfManifestFromResource = ldfManifestFromResource;
//# sourceMappingURL=ILdfManifest.js.map