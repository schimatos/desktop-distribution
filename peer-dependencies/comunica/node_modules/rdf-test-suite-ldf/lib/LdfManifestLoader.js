"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdfManifestLoader = void 0;
const rdf_object_1 = require("rdf-object");
const rdf_test_suite_1 = require("rdf-test-suite");
const Logger_1 = require("./factory/Logger");
const ILdfManifest_1 = require("./ILdfManifest");
class LdfManifestLoader extends rdf_test_suite_1.ManifestLoader {
    constructor(args) {
        super(args);
        if (!args) {
            args = {};
        }
        this.ldfTestCaseHandlers = args.testCaseHandlers || LdfManifestLoader.DEFAULT_TEST_CASE_HANDLERS;
    }
    /**
     * Load the manifest from the given URL.
     * @param {string} url The URL of a manifest.
     * @param {IFetchOptions} options The fetch options.
     * @return {Promise<IManifest>} A promise that resolves to a manifest object.
     */
    from(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            Logger_1.logger.info(`Loading objectloader for manifest creation`);
            const objectLoader = new rdf_object_1.RdfObjectLoader({ context: LdfManifestLoader.LOADER_CONTEXT });
            Logger_1.logger.info(`Importing manifest `);
            const manifest = yield this.import(objectLoader, url, options);
            return ILdfManifest_1.ldfManifestFromResource(this.ldfTestCaseHandlers, options, manifest);
        });
    }
}
exports.LdfManifestLoader = LdfManifestLoader;
// Overwrite default test case handlers and loader context
LdfManifestLoader.DEFAULT_TEST_CASE_HANDLERS = require('./testcase/LdfTestCaseHandlers');
LdfManifestLoader.LOADER_CONTEXT = require('./context-manifest.json');
//# sourceMappingURL=LdfManifestLoader.js.map