"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdfTestSuiteRunner = void 0;
const rdf_test_suite_1 = require("rdf-test-suite");
const Logger_1 = require("./factory/Logger");
const LdfManifestLoader_1 = require("./LdfManifestLoader");
/**
 * The LdfTestSuiteRunner runs ldf-query-engine test manifests.
 */
class LdfTestSuiteRunner extends rdf_test_suite_1.TestSuiteRunner {
    /**
     * Run the manifest with the given URL.
     * @param {string} manifestUrl The URL of a manifest.
     * @param handler The handler to run the tests with.
     * @param {string} cachePath The base directory to cache files in. If falsy, then no cache will be used.
     * @param {string} specification An optional specification to scope the manifest tests by.
     * @param {RegExp} testRegex An optional regex to filter test IRIs by.
     * @param {any} injectArguments An optional set of arguments to pass to the handler.
     * @return {Promise<ITestResult[]>} A promise resolving to an array of test results.
     */
    runManifest(manifestUrl, handler, config) {
        return __awaiter(this, void 0, void 0, function* () {
            config.urlToFileMapping = this.fromUrlToMappingString(config.urlToFileMapping);
            const manifest = yield new LdfManifestLoader_1.LdfManifestLoader()
                .from(manifestUrl, config);
            const results = [];
            // Only run the tests for the given specification if one was defined.
            if (config.specification) {
                if (!manifest.specifications || !manifest.specifications[config.specification]) {
                    return [];
                }
                yield this.runManifestConcrete(manifest.specifications[config.specification], handler, config, results);
                return results;
            }
            Logger_1.logger.info('Running manifest');
            yield this.runManifestConcrete(manifest, handler, config, results);
            return results;
        });
    }
}
exports.LdfTestSuiteRunner = LdfTestSuiteRunner;
//# sourceMappingURL=LdfTestSuiteRunner.js.map