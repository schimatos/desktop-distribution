"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdfUtil = void 0;
const fs = require("fs");
const Path = require("path");
const rdf_test_suite_1 = require("rdf-test-suite");
/**
 * A class with utility functions.
 */
class LdfUtil {
    /**
     * Removes the prefix of a resource. Presuming the prefix ends wih '#'
     * @param resourceIRI A string representing the IRI of the resource
     */
    static removePrefix(resourceIRI) {
        if (resourceIRI.indexOf('#') > 0) {
            return resourceIRI.substring(resourceIRI.indexOf('#') + 1, resourceIRI.length);
        }
        // else: not implemented.
        return resourceIRI;
    }
    /**
     * Temporarily fetch a file for the query engine
     * @param folder: The folder where the temporary file should be saved
     * @param source: The IDataSource representing the source that should be fetched
     * @param {IFetchOptions} options Options for fetching.
     */
    static fetchFile(folder, source, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                const iri = source.value;
                // we want to re-use the current filename for the temp file
                const filename = iri.split('/').slice(-1)[0];
                const file = fs.createWriteStream(Path.join(folder, filename));
                const { body } = yield rdf_test_suite_1.Util.fetchCached(iri, options);
                body.pipe(file).on('finish', () => resolve(filename));
            }));
        });
    }
}
exports.LdfUtil = LdfUtil;
//# sourceMappingURL=LdfUtil.js.map