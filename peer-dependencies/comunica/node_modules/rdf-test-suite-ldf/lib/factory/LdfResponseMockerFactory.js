"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdfResponseMockerFactory = void 0;
const net = require("net");
const LdfResponseMocker_1 = require("../testcase/ldf/mock/LdfResponseMocker");
// tslint:disable:no-var-requires
const tcpPortUsed = require('tcp-port-used');
// tslint:enable:no-var-requires
class LdfResponseMockerFactory {
    constructor(options) {
        // default port is 3000
        this.options = options;
        this.currentPort = options.startPort ? options.startPort : 3000;
    }
    /**
     * Return a LdfResponseMocker with the next open port
     */
    getNewLdfResponseMocker() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (this.isPort(this.currentPort)) {
                        tcpPortUsed.waitUntilFree(this.currentPort, 500, 4000).then(() => {
                            resolve(new LdfResponseMocker_1.LdfResponseMocker(this.options, this.currentPort));
                        }, (err) => {
                            reject(err);
                        });
                    }
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
     * Check if the port number is currently unused, this is important to avoid unnecessary failing of tests
     * @param port The port which will be checked
     */
    isPortAvailable(port) {
        return new Promise((resolve, reject) => {
            const tester = net.createServer()
                .once('error', (err) => resolve(false))
                .once('listening', () => tester.once('close', () => resolve(true)).close())
                .listen(port);
        });
    }
    /**
     * Check if the port is a valid port number
     * @param port The port-number that should be tested
     */
    isPort(port) {
        if (!(1024 <= port && port <= 49151)) {
            throw new Error(`The given port: ${port} is invalid`);
        }
        return true;
    }
}
exports.LdfResponseMockerFactory = LdfResponseMockerFactory;
//# sourceMappingURL=LdfResponseMockerFactory.js.map