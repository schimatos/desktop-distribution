import { Resource } from "rdf-object";
import { IFetchOptions, IFetchResponse, IQueryResult, ITestCaseData, ITestResultOverride } from "rdf-test-suite";
import { LdfResponseMockerFactory } from "../../factory/LdfResponseMockerFactory";
import { IDataSource } from "./IDataSource";
import { ILdfQueryEngine } from "./ILdfQueryEngine";
import { ILdfTestCase } from "./ILdfTestCase";
import { ILdfTestCaseHandler } from "./ILdfTestCaseHandler";
/**
 * Test case handler for
 * https://comunica.github.io/ontology-query-testing/ontology-query-testing.ttl#LdfQueryEvaluationTest.
 */
export declare class LdfTestCaseEvaluationHandler implements ILdfTestCaseHandler<LdfTestCaseEvaluation> {
    resourceToLdfTestCase(resource: Resource, factory: LdfResponseMockerFactory, testCaseData: ITestCaseData, options?: IFetchOptions): Promise<LdfTestCaseEvaluation>;
}
export interface ILdfTestCaseEvaluationProps {
    baseIRI: string;
    queryString: string;
    dataSources: IDataSource[];
    queryResult: IQueryResult;
    resultSource: IFetchResponse;
    mockFolder?: string;
}
export declare class LdfTestCaseEvaluation implements ILdfTestCase {
    readonly type = "ldf";
    readonly approval: string;
    readonly approvedBy: string;
    readonly comment: string;
    readonly types: string[];
    readonly name: string;
    readonly uri: string;
    readonly baseIRI: string;
    readonly queryString: string;
    readonly dataSources: IDataSource[];
    readonly queryResult: IQueryResult;
    readonly resultSource: IFetchResponse;
    readonly mockFolder?: string;
    private responseMocker;
    private readonly factory;
    private readonly tmpFolder;
    private readonly options?;
    private createdFolder;
    constructor(testCaseData: ITestCaseData, props: ILdfTestCaseEvaluationProps, factory: LdfResponseMockerFactory, options?: IFetchOptions);
    test(engine: ILdfQueryEngine, injectArguments: any): Promise<ITestResultOverride>;
    /**
     * Map the manifest-sourceTypes to the sourcetypes the engine uses (based on comunica-engines).
     * @param sources The sources from the manifest file
     */
    private mapSources;
}
