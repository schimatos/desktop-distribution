"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdfResponseMocker = void 0;
const http = require("http");
const rdf_test_suite_1 = require("rdf-test-suite");
const LdfMockFetcher_1 = require("../fetchers/LdfMockFetcher");
class LdfResponseMocker {
    constructor(options, port) {
        // server will be initialized later
        this.dummyServer = undefined;
        // datasources will be initialized when a test is loaded
        this.dataSources = undefined;
        this.options = options;
        this.port = port ? port : 3000; // Default port is 3000
        this.proxyAddress = `http://127.0.0.1:${this.port}/`; // Proxy address of the proxy server
    }
    /**
     * Temporarily set up a mocked server which will serve the mocked responses
     * to the tested engine.
     */
    setUpServer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.dummyServer = yield http.createServer().listen(this.port);
                this.dummyServer.on('request', (request, response) => __awaiter(this, void 0, void 0, function* () {
                    const args = require('url').parse(request.url, true);
                    const query = args.path.substring(1);
                    // Whitelist: little hack, should be improved
                    if (this.isWhiteListed(query.split('/').slice(0, 3).join('/'))) {
                        // This response should not be mocked
                        // Forward request and pipe to requesting instance
                        const fetched = yield rdf_test_suite_1.Util.fetchCached(request.url.substr(1), this.options, { headers: { accept: request.headers.accept } });
                        const headers = {};
                        fetched.headers.forEach((v, k) => headers[k] = v);
                        response.writeHead(200, headers);
                        fetched.body.pipe(response);
                    }
                    else {
                        // This response should be mocked
                        this.mockFetcher.parseMockedResponse(query, this.options).then((mockedResponse) => {
                            response.writeHead(200, {
                                'Connection': 'Close',
                                'Content-Type': mockedResponse.contentType,
                            });
                            response.end(mockedResponse.body);
                        }).catch((error) => {
                            process.stderr.write(error.message + '\n');
                            response.writeHead(500, {
                                'Connection': 'Close',
                                'Content-Type': 'text',
                            });
                            response.end(error.message);
                        });
                    }
                }));
                resolve();
            }));
        });
    }
    /**
     * Tear the server down after quering, avoid spilling resources and leaving ports blocked.
     */
    tearDownServer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                if (this.dummyServer === undefined || !this.dummyServer.listening) {
                    resolve();
                }
                this.dummyServer.close((err) => {
                    if (err) {
                        reject(err);
                    }
                    resolve();
                });
            });
        });
    }
    /**
     * Set up the server for the upcoming test datasources
     */
    loadSources(dataSources) {
        this.dataSources = dataSources;
        this.fillWhiteList();
    }
    /**
     * Load the test, create the mockfetcher based on this test
     * @param test The LdfTestCaseEvaluation the server will help to evaluate
     */
    loadTest(test) {
        this.mockFetcher = new LdfMockFetcher_1.LdfMockFetcher(test);
    }
    /**
     * Fill the whitelist with sources which are allowed to pass through the proxy and shouldn't be mocked.
     */
    fillWhiteList() {
        this.whiteList = [];
        for (const source of this.dataSources) {
            if (source.type !== 'https://comunica.github.io/ontology-query-testing/ontology-query-testing.ttl#TPF'
                && source.type !== 'https://comunica.github.io/ontology-query-testing/ontology-query-testing.ttl#SPARQL') {
                this.whiteList.push(source.value);
            }
        }
    }
    /**
     * Check if the dataSource is being whitelisted
     * @param dataSource The datasource
     */
    isWhiteListed(dataSource) {
        if (!this.whiteList) {
            return false;
        }
        for (const source of this.whiteList) {
            if (source.startsWith(dataSource)) {
                return true;
            }
        }
        return false;
    }
}
exports.LdfResponseMocker = LdfResponseMocker;
//# sourceMappingURL=LdfResponseMocker.js.map