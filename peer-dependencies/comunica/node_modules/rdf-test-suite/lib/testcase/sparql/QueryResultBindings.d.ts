import * as RDF from "rdf-js";
import { IQueryResult, IQueryResultBindings } from "./IQueryEngine";
/**
 * Holds bindings-based query results.
 */
export declare class QueryResultBindings implements IQueryResultBindings {
    readonly type = "bindings";
    variables: string[];
    value: {
        [variable: string]: RDF.Term;
    }[];
    checkOrder: boolean;
    constructor(variables: string[], value: {
        [variable: string]: RDF.Term;
    }[], checkOrder: boolean);
    static serializeTerm(term: RDF.Term, blankNodeCounters: {
        [label: string]: number;
    }): any;
    static hashBinding(binding: {
        [variable: string]: RDF.Term;
    }, blankNodeCounters: {
        [label: string]: number;
    }): string;
    static hashBindings(bindings: {
        [variable: string]: RDF.Term;
    }[], blankNodeCounters: {
        [label: string]: number;
    }, checkOrder: boolean): string;
    static hashBindingsCount(bindings: {
        [variable: string]: RDF.Term;
    }[], blankNodeCounters: {
        [label: string]: number;
    }): {
        [hash: string]: number;
    };
    equals(that: IQueryResult, laxCardinality?: boolean): boolean;
    toString(): string;
}
