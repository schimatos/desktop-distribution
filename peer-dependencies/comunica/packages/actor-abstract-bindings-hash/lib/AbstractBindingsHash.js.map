{"version":3,"file":"AbstractBindingsHash.js","sourceRoot":"","sources":["AbstractBindingsHash.ts"],"names":[],"mappings":";;;AAGA,uEAGuC;AAKvC;;GAEG;AACH,MAAsB,oBAAkD,SAAQ,sDAAmC;IAEjH,YAAmB,IAAuC,EAAE,QAAgB;QAC1E,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxB,CAAC;IASM,KAAK,CAAC,aAAa,CAAC,OAAU,EAAE,OAAsB;QAC3D,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAU,EAAE,OAAsB;QAC1D,MAAM,MAAM,GAAuC,yCAAmB,CAAC,eAAe,CACpF,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CACjF,CAAC;QACF,MAAM,cAAc,GAAmB,MAAM,CAAC,cAAc,CAAC,MAAM,CACjE,IAAI,CAAC,aAAa,EAAE,CACrB,CAAC;QACF,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc;YACd,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,gBAAgB,EAAE,MAAM,CAAC,gBAAgB;SAC1C,CAAC;IACJ,CAAC;CACF;AAhCD,oDAgCC","sourcesContent":["import type { Bindings,\n  BindingsStream,\n  IActorQueryOperationOutputBindings } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { ActionContext, IActorTest } from '@comunica/core';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport type { IActorInitRdfDereferencePagedArgs } from './AbstractFilterHash';\n\n/**\n * A comunica Hash Query Operation Actor.\n */\nexport abstract class AbstractBindingsHash<T extends Algebra.Operation> extends ActorQueryOperationTypedMediated<T>\n  implements IActorInitRdfDereferencePagedArgs {\n  public constructor(args: IActorInitRdfDereferencePagedArgs, operator: string) {\n    super(args, operator);\n  }\n\n  /**\n     * Create a new filter function for the given hash algorithm and digest algorithm.\n     * The given filter depends on the Algebraic operation\n     * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.\n     */\n  public abstract newHashFilter(): (bindings: Bindings) => boolean;\n\n  public async testOperation(pattern: T, context: ActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(pattern: T, context: ActionContext): Promise<IActorQueryOperationOutputBindings> {\n    const output: IActorQueryOperationOutputBindings = ActorQueryOperation.getSafeBindings(\n      await this.mediatorQueryOperation.mediate({ operation: pattern.input, context }),\n    );\n    const bindingsStream: BindingsStream = output.bindingsStream.filter(\n      this.newHashFilter(),\n    );\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata: output.metadata,\n      variables: output.variables,\n      canContainUndefs: output.canContainUndefs,\n    };\n  }\n}\n"]}