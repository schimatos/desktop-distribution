{"version":3,"file":"ActorContextPreprocessRdfSourceIdentifier.js","sourceRoot":"","sources":["ActorContextPreprocessRdfSourceIdentifier.ts"],"names":[],"mappings":";;;AACA,6EAA0E;AAG1E,yFAIgD;AAIhD;;GAEG;AACH,MAAa,yCAA0C,SAAQ,+CAAsB;IAInF,YAAmB,IAAoD;QACrE,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAe;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAe;QAC9B,IAAI,MAAM,CAAC,OAAO,EAAE;YAClB,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,iDAAkB,CAAC,EAAE;gBAC1C,IAAI,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,iDAAkB,CAAC,CAAC;gBACpD,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC;gBACzB,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE;oBAC1B,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,iDAAkB,CAAC,CAAC;oBACpD,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;oBACpD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,iDAAkB,EAAE,MAAM,CAAC,CAAC;iBACnD;gBACD,OAAO,EAAE,OAAO,EAAE,CAAC;aACpB;YACD,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,kDAAmB,CAAC,EAAE;gBAC3C,MAAM,UAAU,GAAkB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,kDAAmB,CAAC,CAAC;gBAE7E,MAAM,OAAO,GAAgB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,kDAAmB,CAAC,CAAC;gBACrE,MAAM,UAAU,GAAgB,EAAE,CAAC;gBACnC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;oBAC5B,UAAU,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;iBAChE;gBAED,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,kDAAmB,EAAE,UAAU,CAAC,EAAE,CAAC;aACzE;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,MAAmB,EAAE,OAAsB;QACtE,OAAO,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAC7C,EAAE,WAAW,EAAQ,iDAAkB,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,CAC3D;aACE,IAAI,CAAC,0BAA0B,CAAC,EAAE;YACjC,IAAI,0BAA0B,CAAC,UAAU,EAAE;gBAClC,MAAO,CAAC,IAAI,GAAG,0BAA0B,CAAC,UAAU,CAAC;aAC7D;YACD,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;CACF;AAlDD,8FAkDC","sourcesContent":["import type { IActorContextPreprocessOutput } from '@comunica/bus-context-preprocess';\nimport { ActorContextPreprocess } from '@comunica/bus-context-preprocess';\nimport type { DataSources,\n  IDataSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport {\n  getDataSourceValue,\n  KEY_CONTEXT_SOURCE,\n  KEY_CONTEXT_SOURCES,\n} from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { IActionRdfSourceIdentifier, IActorRdfSourceIdentifierOutput } from '@comunica/bus-rdf-source-identifier';\nimport type { ActionContext, Actor, IAction, IActorArgs, IActorTest, Mediator } from '@comunica/core';\n\n/**\n * A comunica RDF Source Identifier Context Preprocess Actor.\n */\nexport class ActorContextPreprocessRdfSourceIdentifier extends ActorContextPreprocess {\n  public readonly mediatorRdfSourceIdentifier: Mediator<Actor<IActionRdfSourceIdentifier, IActorTest,\n  IActorRdfSourceIdentifierOutput>, IActionRdfSourceIdentifier, IActorTest, IActorRdfSourceIdentifierOutput>;\n\n  public constructor(args: IActorContextPreprocessRdfSourceIdentifierArgs) {\n    super(args);\n  }\n\n  public async test(action: IAction): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IAction): Promise<IActorContextPreprocessOutput> {\n    if (action.context) {\n      if (action.context.get(KEY_CONTEXT_SOURCE)) {\n        let source = action.context.get(KEY_CONTEXT_SOURCE);\n        let { context } = action;\n        if (source.type === 'auto') {\n          context = action.context.delete(KEY_CONTEXT_SOURCE);\n          source = await this.identifySource(source, context);\n          context = context.set(KEY_CONTEXT_SOURCE, source);\n        }\n        return { context };\n      }\n      if (action.context.get(KEY_CONTEXT_SOURCES)) {\n        const subContext: ActionContext = action.context.delete(KEY_CONTEXT_SOURCES);\n\n        const sources: DataSources = action.context.get(KEY_CONTEXT_SOURCES);\n        const newSources: DataSources = [];\n        for (const source of sources) {\n          newSources.push(await this.identifySource(source, subContext));\n        }\n\n        return { context: action.context.set(KEY_CONTEXT_SOURCES, newSources) };\n      }\n    }\n    return action;\n  }\n\n  private async identifySource(source: IDataSource, context: ActionContext): Promise<IDataSource> {\n    return this.mediatorRdfSourceIdentifier.mediate(\n      { sourceValue: <any> getDataSourceValue(source), context },\n    )\n      .then(sourceIdentificationResult => {\n        if (sourceIdentificationResult.sourceType) {\n          (<any> source).type = sourceIdentificationResult.sourceType;\n        }\n        return source;\n      });\n  }\n}\n\nexport interface IActorContextPreprocessRdfSourceIdentifierArgs\n  extends IActorArgs<IAction, IActorTest, IActorContextPreprocessOutput> {\n  mediatorRdfSourceIdentifier: Mediator<Actor<IActionRdfSourceIdentifier, IActorTest,\n  IActorRdfSourceIdentifierOutput>, IActionRdfSourceIdentifier, IActorTest, IActorRdfSourceIdentifierOutput>;\n}\n"]}