{"version":3,"file":"Requester.js","sourceRoot":"","sources":["Requester.ts"],"names":[],"mappings":"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","sourcesContent":["/* ! @license MIT Â©2016 Ruben Verborgh, Ghent University - imec */\n/* Single-function HTTP(S) request module */\n/* Translated from https://github.com/LinkedDataFragments/Client.js/blob/master/lib/util/Request.js */\n\nimport { EventEmitter } from 'events';\nimport type { AgentOptions, ClientRequest, IncomingMessage, IncomingHttpHeaders } from 'http';\nimport * as url from 'url';\nimport * as zlib from 'zlib';\nimport 'cross-fetch/polyfill';\n\nconst { http } = require('follow-redirects');\nconst { https } = require('follow-redirects');\n\n// Decode encoded streams with these decoders\nconst DECODERS = { gzip: zlib.createGunzip, deflate: zlib.createInflate };\n\nexport default class Requester {\n  private readonly agents: any;\n\n  public constructor(agentOptions?: AgentOptions) {\n    this.agents = {\n      http: new http.Agent(agentOptions ?? {}),\n      https: new https.Agent(agentOptions ?? {}),\n    };\n  }\n\n  // Creates an HTTP request with the given settings\n  public createRequest(settings: any): EventEmitter {\n    // Parse the request URL\n    if (settings.url) {\n      settings = { ...url.parse(settings.url), ...settings };\n    }\n\n    // Emit the response through a proxy\n    const requestProxy = new EventEmitter();\n    const requester = settings.protocol === 'http:' ? http : https;\n    settings.agents = this.agents;\n\n    // Unpacking headers object into a plain object\n    const headersObject: any = {};\n    if (settings.headers) {\n      (<Headers> settings.headers).forEach((value, key) => {\n        headersObject[key] = value;\n      });\n    }\n    settings.headers = headersObject;\n\n    const request: ClientRequest = requester.request(settings, (response: IncomingMessage) => {\n      response = this.decode(response);\n      settings.headers = response.headers;\n      response.setEncoding('utf8');\n      // This was removed compared to the original LDF client implementation\n      // response.pause(); // exit flow mode\n      requestProxy.emit('response', response);\n    });\n    request.on('error', error => requestProxy.emit('error', error));\n    request.end();\n    return requestProxy;\n  }\n\n  // Wrap headers into an header object type\n  public convertRequestHeadersToFetchHeaders(headers: IncomingHttpHeaders): Headers {\n    const responseHeaders: Headers = new Headers();\n    for (const key in headers) {\n      responseHeaders.append(key, <string> headers[key]);\n    }\n    return responseHeaders;\n  }\n\n  // Returns a decompressed stream from the HTTP response\n  private decode(response: IncomingMessage): IncomingMessage {\n    const encoding = response.headers['content-encoding'];\n    if (encoding) {\n      if (encoding in DECODERS) {\n        // Decode the stream\n        const decoded = (<any> DECODERS)[encoding]();\n        response.pipe(decoded);\n        // Copy response properties\n        decoded.statusCode = response.statusCode;\n        decoded.headers = this.convertRequestHeadersToFetchHeaders(response.headers);\n        return decoded;\n      }\n      // Error when no suitable decoder found\n      setImmediate(() => {\n        response.emit('error', new Error(`Unsupported encoding: ${encoding}`));\n      });\n    }\n\n    response.headers = <any> this.convertRequestHeadersToFetchHeaders(response.headers);\n    return response;\n  }\n}\n"]}