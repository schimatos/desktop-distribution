{"version":3,"file":"ActorHttpNodeFetch.js","sourceRoot":"","sources":["ActorHttpNodeFetch.ts"],"names":[],"mappings":";;;AACA,iDACgF;AAGhF,gCAA8B;AAE9B;;;;GAIG;AACH,MAAa,kBAAmB,SAAQ,oBAAS;IAG/C,YAAmB,IAAkE;QACnF,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,SAAS,GAAG,kBAAkB,CAAC,eAAe,EAAE,CAAC;IACxD,CAAC;IAEM,MAAM,CAAC,eAAe;QAC3B,OAAO,mCAAmC,OAAO,MAAM,CAAC,SAAS,KAAK,WAAW,CAAC,CAAC;YACjF,WAAW,OAAO,CAAC,OAAO,KAAK,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,WAAW,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,GAAG,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAmB;QACnC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IAC5B,CAAC;IAEM,GAAG,CAAC,MAAmB;QAC5B,kBAAkB;QAClB,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QACjE,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QAC7C,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,WAAW,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;YAC1C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SAC1D;QACD,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,2BAAgB,CAAC,EAAE;YAC1D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,2BAAgB,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SAC9H;QAED,cAAc;QACd,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,cAAc,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC;YAC3E,MAAM,CAAC,KAAK,CAAC,CAAC;YACd,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;YAC3B,OAAO,EAAE,oBAAS,CAAC,aAAa,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,IAAK,CAAC,OAAO,CAAC,CAAC;SACpE,CAAC,CAAC,CAAC;QAEJ,kBAAkB;QAClB,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,kCACpB,MAAM,CAAC,IAAI,GACX,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,0CAA+B,CAAC,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,EAC1G,CAAC;IACL,CAAC;CACF;AA3CD,gDA2CC","sourcesContent":["import type { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport { ActorHttp,\n  KEY_CONTEXT_INCLUDE_CREDENTIALS, KEY_CONTEXT_AUTH } from '@comunica/bus-http';\nimport type { IActorArgs } from '@comunica/core';\nimport type { IMediatorTypeTime } from '@comunica/mediatortype-time';\nimport 'cross-fetch/polyfill';\n\n/**\n * A node-fetch actor that listens on the 'init' bus.\n *\n * It will call `fetch` with either action.input or action.url.\n */\nexport class ActorHttpNodeFetch extends ActorHttp {\n  private readonly userAgent: string;\n\n  public constructor(args: IActorArgs<IActionHttp, IMediatorTypeTime, IActorHttpOutput>) {\n    super(args);\n    this.userAgent = ActorHttpNodeFetch.createUserAgent();\n  }\n\n  public static createUserAgent(): string {\n    return `Comunica/actor-http-node-fetch (${typeof global.navigator === 'undefined' ?\n      `Node.js ${process.version}; ${process.platform}` :\n      `Browser-${global.navigator.userAgent}`})`;\n  }\n\n  public async test(action: IActionHttp): Promise<IMediatorTypeTime> {\n    return { time: Infinity };\n  }\n\n  public run(action: IActionHttp): Promise<IActorHttpOutput> {\n    // Prepare headers\n    const initHeaders = action.init ? action.init.headers || {} : {};\n    action.init = action.init ? action.init : {};\n    action.init.headers = new Headers(initHeaders);\n    if (!action.init.headers.has('user-agent')) {\n      action.init.headers.append('user-agent', this.userAgent);\n    }\n    if (action.context && action.context.get(KEY_CONTEXT_AUTH)) {\n      action.init.headers.append('Authorization', `Basic ${Buffer.from(action.context.get(KEY_CONTEXT_AUTH)).toString('base64')}`);\n    }\n\n    // Log request\n    this.logInfo(action.context, `Requesting ${typeof action.input === 'string' ?\n      action.input :\n      action.input.url}`, () => ({\n      headers: ActorHttp.headersToHash(new Headers(action.init!.headers)),\n    }));\n\n    // Perform request\n    return fetch(action.input, {\n      ...action.init,\n      ...action.context && action.context.get(KEY_CONTEXT_INCLUDE_CREDENTIALS) ? { credentials: 'include' } : {},\n    });\n  }\n}\n"]}