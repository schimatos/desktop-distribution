{"version":3,"file":"ActorHttpProxy.js","sourceRoot":"","sources":["ActorHttpProxy.ts"],"names":[],"mappings":";;;AACA,iDAA+C;AAK/C;;GAEG;AACH,MAAa,cAAe,SAAQ,oBAAS;IAG3C,YAAmB,IAAyB;QAC1C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAmB;QACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,4BAA4B,CAAC,CAAC;SACjE;QACD,MAAM,YAAY,GAAkB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,oCAA4B,CAAC,CAAC;QACrF,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,iDAAiD,CAAC,CAAC;SACtF;QACD,IAAI,CAAC,MAAM,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACxC,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,qDAAqD,CAAC,CAAC;SAC1F;QACD,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAmB;;QAClC,MAAM,YAAY,GAAG,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;QACxF,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;SACnD;QACD,MAAM,YAAY,GAAkB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,oCAA4B,CAAC,CAAC;QAErF,0CAA0C;QAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,iCACzC,MAAM,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,KACtC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,oCAA4B,CAAC,IAC5D,CAAC;QAEH,0BAA0B;QACnB,MAAO,CAAC,GAAG,SAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,mCAAI,YAAY,CAAC;QACvE,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAtCD,wCAsCC;AAMY,QAAA,4BAA4B,GAAG,6CAA6C,CAAC","sourcesContent":["import type { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport { ActorHttp } from '@comunica/bus-http';\nimport type { IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport type { IMediatorTypeTime } from '@comunica/mediatortype-time';\nimport type { IProxyHandler } from './IProxyHandler';\n\n/**\n * A comunica Proxy Http Actor.\n */\nexport class ActorHttpProxy extends ActorHttp {\n  public readonly mediatorHttp: Mediator<ActorHttp, IActionHttp, IActorTest, IActorHttpOutput>;\n\n  public constructor(args: IActorHttpProxyArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionHttp): Promise<IMediatorTypeTime> {\n    if (!action.context) {\n      throw new Error(`Actor ${this.name} could not find a context.`);\n    }\n    const proxyHandler: IProxyHandler = action.context.get(KEY_CONTEXT_HTTPPROXYHANDLER);\n    if (!proxyHandler) {\n      throw new Error(`Actor ${this.name} could not find a proxy handler in the context.`);\n    }\n    if (!await proxyHandler.getProxy(action)) {\n      throw new Error(`Actor ${this.name} could not determine a proxy for the given request.`);\n    }\n    return { time: Infinity };\n  }\n\n  public async run(action: IActionHttp): Promise<IActorHttpOutput> {\n    const requestedUrl = typeof action.input === 'string' ? action.input : action.input.url;\n    if (!action.context) {\n      throw new Error('Illegal state: missing context');\n    }\n    const proxyHandler: IProxyHandler = action.context.get(KEY_CONTEXT_HTTPPROXYHANDLER);\n\n    // Send a request for the modified request\n    const output = await this.mediatorHttp.mediate({\n      ...await proxyHandler.getProxy(action),\n      context: action.context.delete(KEY_CONTEXT_HTTPPROXYHANDLER),\n    });\n\n    // Modify the response URL\n    (<any> output).url = output.headers.get('x-final-url') ?? requestedUrl;\n    return output;\n  }\n}\n\nexport interface IActorHttpProxyArgs extends IActorArgs<IActionHttp, IActorTest, IActorHttpOutput> {\n  mediatorHttp: Mediator<ActorHttp, IActionHttp, IActorTest, IActorHttpOutput>;\n}\n\nexport const KEY_CONTEXT_HTTPPROXYHANDLER = '@comunica/actor-http-proxy:httpProxyHandler';\n"]}