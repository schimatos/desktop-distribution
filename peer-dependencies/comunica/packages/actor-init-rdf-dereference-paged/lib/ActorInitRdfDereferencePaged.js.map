{"version":3,"file":"ActorInitRdfDereferencePaged.js","sourceRoot":"","sources":["ActorInitRdfDereferencePaged.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAkC;AAElC,iDAA+C;AAG/C,sDAAwC;AAExC;;GAEG;AACH,MAAa,4BAA6B,SAAQ,oBAAS;IAMzD,YAAmB,IAAuC;QACxD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAmB;QACnC,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAmB;;QAClC,MAAM,WAAW,GAA+B;YAC9C,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAC,IAAI,CAAC,GAAG,mCAAI,EAAE;SAC9D,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;SAC3E;QACD,MAAM,MAAM,GAAoC,MAAM,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAE5G,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACvG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,iBAAQ,EAAE,CAAC;QAChC,QAAQ,CAAC,KAAK,GAAG,GAAG,EAAE;YACpB,aAAa;QACf,CAAC,CAAC;QACF,QAAQ,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAErF,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;IAC9B,CAAC;CACF;AAlCD,oEAkCC","sourcesContent":["import { Readable } from 'stream';\nimport type { IActionInit, IActorOutputInit } from '@comunica/bus-init';\nimport { ActorInit } from '@comunica/bus-init';\nimport type { IActionRdfDereferencePaged, IActorRdfDereferencePagedOutput } from '@comunica/bus-rdf-dereference-paged';\nimport type { Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport * as RdfString from 'rdf-string';\n\n/**\n * A comunica RDF Dereference Paged Init Actor.\n */\nexport class ActorInitRdfDereferencePaged extends ActorInit implements IActorInitRdfDereferencePagedArgs {\n  public readonly mediatorRdfDereferencePaged: Mediator<Actor<IActionRdfDereferencePaged, IActorTest,\n  IActorRdfDereferencePagedOutput>, IActionRdfDereferencePaged, IActorTest, IActorRdfDereferencePagedOutput>;\n\n  public readonly url?: string;\n\n  public constructor(args: IActorInitRdfDereferencePagedArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionInit): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionInit): Promise<IActorOutputInit> {\n    const dereference: IActionRdfDereferencePaged = {\n      context: action.context,\n      url: action.argv.length > 0 ? action.argv[0] : this.url ?? '',\n    };\n    if (!dereference.url) {\n      throw new Error('A URL must be given either in the config or as CLI arg');\n    }\n    const result: IActorRdfDereferencePagedOutput = await this.mediatorRdfDereferencePaged.mediate(dereference);\n\n    result.data.on('data', quad => readable.push(`${JSON.stringify(RdfString.quadToStringQuad(quad))}\\n`));\n    result.data.on('end', () => readable.push(null));\n    const readable = new Readable();\n    readable._read = () => {\n      // Do nothing\n    };\n    readable.push(`Metadata: ${JSON.stringify(result.firstPageMetadata, null, '  ')}\\n`);\n\n    return { stdout: readable };\n  }\n}\n\nexport interface IActorInitRdfDereferencePagedArgs extends IActorArgs<IActionInit, IActorTest, IActorOutputInit> {\n  mediatorRdfDereferencePaged: Mediator<Actor<IActionRdfDereferencePaged, IActorTest, IActorRdfDereferencePagedOutput>,\n  IActionRdfDereferencePaged, IActorTest, IActorRdfDereferencePagedOutput>;\n  url?: string;\n}\n"]}