{"version":3,"file":"ActorInitRdfParse.js","sourceRoot":"","sources":["ActorInitRdfParse.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,mCAA+C;AAE/C,iDAA+C;AAW/C,sDAAwC;AAExC;;;;;GAKG;AACH,MAAa,iBAAkB,SAAQ,oBAAS;IAO9C,YAAmB,IAA4B;QAC7C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAmB;QACnC,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAmB;QAClC,MAAM,SAAS,GAAW,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;QACnF,MAAM,WAAW,GAAoB,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACpH,MAAM,MAAM,GAAyB,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CACvE,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,eAAe,EAAE,SAAS,EAAE,CAC7E,CAAC,CAAC,MAAM,CAAC;QAEV,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACxG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAClD,MAAM,QAAQ,GAAG,IAAI,iBAAQ,EAAE,CAAC;QAChC,QAAQ,CAAC,KAAK,GAAG,GAAG,EAAE;YACpB,aAAa;QACf,CAAC,CAAC;QAEF,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,oBAAW,EAAE,EAAE,CAAC;IACzD,CAAC;CACF;AA/BD,8CA+BC","sourcesContent":["import { PassThrough, Readable } from 'stream';\nimport type { IActionInit, IActorOutputInit } from '@comunica/bus-init';\nimport { ActorInit } from '@comunica/bus-init';\nimport type {\n  IActionHandleRdfParse,\n  IActionRdfParse,\n\n  IActorOutputHandleRdfParse,\n\n  IActorRdfParseOutput,\n  IActorTestHandleRdfParse,\n} from '@comunica/bus-rdf-parse';\nimport type { Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport * as RdfString from 'rdf-string';\n\n/**\n * An RDF Parse actor that listens on the 'init' bus.\n *\n * It requires a mediator that is defined over the 'rdf-parse' bus,\n * and a mediaType that identifies the RDF serialization.\n */\nexport class ActorInitRdfParse extends ActorInit implements IActorInitRdfParseArgs {\n  public readonly mediatorRdfParse: Mediator<\n  Actor<IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>,\n  IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>;\n\n  public readonly mediaType: string;\n\n  public constructor(args: IActorInitRdfParseArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionInit): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionInit): Promise<IActorOutputInit> {\n    const mediaType: string = action.argv.length > 0 ? action.argv[0] : this.mediaType;\n    const parseAction: IActionRdfParse = { input: action.stdin, baseIRI: action.argv.length > 1 ? action.argv[1] : '' };\n    const result: IActorRdfParseOutput = (await this.mediatorRdfParse.mediate(\n      { context: action.context, handle: parseAction, handleMediaType: mediaType },\n    )).handle;\n\n    result.quads.on('data', quad => readable.push(`${JSON.stringify(RdfString.quadToStringQuad(quad))}\\n`));\n    result.quads.on('end', () => readable.push(null));\n    const readable = new Readable();\n    readable._read = () => {\n      // Do nothing\n    };\n\n    return { stdout: readable, stderr: new PassThrough() };\n  }\n}\n\nexport interface IActorInitRdfParseArgs extends IActorArgs<IActionInit, IActorTest, IActorOutputInit> {\n  mediatorRdfParse: Mediator<\n  Actor<IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>,\n  IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>;\n  mediaType: string;\n}\n"]}