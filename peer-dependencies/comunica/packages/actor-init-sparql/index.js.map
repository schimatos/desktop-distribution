{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,wDAAsC;AACtC,kEAAgD;AAChD,iDAIyB;AAHvB,0GAAA,SAAS,OAAA;AACT,8GAAA,aAAa,OAAA;AACb,wHAAA,uBAAuB,OAAA;AAYzB,qDAA2D;AAE3D;;;;GAIG;AACH,SAAgB,gBAAgB,CAAC,OAAuB;IACtD,OAAO,oCAAqB,CAAC,OAAO,IAAI,EAAE,EAAE,SAAS,EAAE,GAAG,SAAS,6BAA6B,CAAC,CAAC;AACpG,CAAC;AAFD,4CAEC","sourcesContent":["export * from './lib/ActorInitSparql';\nexport * from './lib/HttpServiceSparqlEndpoint';\nexport {\n  newEngine,\n  evaluateQuery,\n  bindingsStreamToGraphQl,\n} from './index-browser';\nexport type {\n  IQueryResultBindings,\n  IQueryResultQuads,\n  IQueryResultBoolean,\n  IQueryResult,\n} from './index-browser';\n\n// eslint-disable-next-line no-duplicate-imports\nimport type { ActorInitSparql } from './lib/ActorInitSparql';\nimport type { IQueryOptions } from './lib/QueryDynamic';\nimport { newEngineDynamicArged } from './lib/QueryDynamic';\n\n/**\n * Create a new dynamic comunica engine from a given config file.\n * @param {IQueryOptions} options Optional options on how to instantiate the query evaluator.\n * @return {Promise<QueryEngine>} A promise that resolves to a fully wired comunica engine.\n */\nexport function newEngineDynamic(options?: IQueryOptions): Promise<ActorInitSparql> {\n  return newEngineDynamicArged(options || {}, __dirname, `${__dirname}/config/config-default.json`);\n}\n"]}