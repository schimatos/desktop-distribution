{"version":3,"file":"ActorInitSparql-browser.js","sourceRoot":"","sources":["ActorInitSparql-browser.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable unicorn/filename-case */\nimport type { IActorContextPreprocessOutput } from '@comunica/bus-context-preprocess';\nimport type { IActionHttpInvalidate, IActorHttpInvalidateOutput } from '@comunica/bus-http-invalidate';\nimport type { IActionInit, IActorOutputInit } from '@comunica/bus-init';\nimport { ActorInit } from '@comunica/bus-init';\nimport type {\n  IActionOptimizeQueryOperation,\n  IActorOptimizeQueryOperationOutput,\n} from '@comunica/bus-optimize-query-operation';\nimport type {\n  IActionQueryOperation,\n  IActorQueryOperationOutput,\n  IActorQueryOperationOutputBindings,\n  IActorQueryOperationOutputQuads,\n  IActorQueryOperationOutputBoolean,\n  Bindings,\n} from '@comunica/bus-query-operation';\nimport { ensureBindings,\n  KEY_CONTEXT_BASEIRI,\n  KEY_CONTEXT_QUERY_TIMESTAMP,\n  materializeOperation } from '@comunica/bus-query-operation';\nimport type { IDataSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport { isDataSourceRawType, KEY_CONTEXT_SOURCES } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { IActionSparqlParse, IActorSparqlParseOutput } from '@comunica/bus-sparql-parse';\n\nimport type {\n  IActionSparqlSerialize,\n  IActionSparqlSerializeHandle,\n  IActionSparqlSerializeMediaTypeFormats,\n  IActionSparqlSerializeMediaTypes,\n\n  IActorOutputSparqlSerializeHandle, IActorOutputSparqlSerializeMediaTypeFormats,\n  IActorOutputSparqlSerializeMediaTypes,\n  IActorSparqlSerializeOutput,\n\n  IActorTestSparqlSerializeHandle, IActorTestSparqlSerializeMediaTypeFormats,\n  IActorTestSparqlSerializeMediaTypes,\n} from '@comunica/bus-sparql-serialize';\nimport type { Actor, IAction, IActorArgs, IActorTest, Logger, Mediator } from '@comunica/core';\nimport { ActionContext,\n  KEY_CONTEXT_LOG } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\nimport { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A browser-safe comunica SPARQL Init Actor.\n */\nexport class ActorInitSparql extends ActorInit implements IActorInitSparqlArgs {\n  private static readonly ALGEBRA_TYPES: Record<string, boolean> = Object.keys(Algebra.types)\n    .reduce((acc: Record<string, boolean>, key) => {\n      acc[(<any> Algebra.types)[key]] = true;\n      return acc;\n    }, {});\n\n  public readonly mediatorOptimizeQueryOperation: Mediator<Actor<IActionOptimizeQueryOperation, IActorTest,\n  IActorOptimizeQueryOperationOutput>, IActionOptimizeQueryOperation, IActorTest, IActorOptimizeQueryOperationOutput>;\n\n  public readonly mediatorQueryOperation: Mediator<Actor<IActionQueryOperation, IActorTest, IActorQueryOperationOutput>,\n  IActionQueryOperation, IActorTest, IActorQueryOperationOutput>;\n\n  public readonly mediatorSparqlParse: Mediator<Actor<IActionSparqlParse, IActorTest, IActorSparqlParseOutput>,\n  IActionSparqlParse, IActorTest, IActorSparqlParseOutput>;\n\n  public readonly mediatorSparqlSerialize: Mediator<\n  Actor<IActionSparqlSerializeHandle, IActorTestSparqlSerializeHandle, IActorOutputSparqlSerializeHandle>,\n  IActionSparqlSerializeHandle, IActorTestSparqlSerializeHandle, IActorOutputSparqlSerializeHandle>;\n\n  public readonly mediatorSparqlSerializeMediaTypeCombiner: Mediator<\n  Actor<IActionSparqlSerializeMediaTypes, IActorTestSparqlSerializeMediaTypes, IActorOutputSparqlSerializeMediaTypes>,\n  IActionSparqlSerializeMediaTypes, IActorTestSparqlSerializeMediaTypes, IActorOutputSparqlSerializeMediaTypes>;\n\n  public readonly mediatorSparqlSerializeMediaTypeFormatCombiner: Mediator<\n  Actor<IActionSparqlSerializeMediaTypeFormats, IActorTestSparqlSerializeMediaTypeFormats,\n  IActorOutputSparqlSerializeMediaTypeFormats>,\n  IActionSparqlSerializeMediaTypeFormats, IActorTestSparqlSerializeMediaTypeFormats,\n  IActorOutputSparqlSerializeMediaTypeFormats>;\n\n  public readonly mediatorContextPreprocess: Mediator<Actor<IAction, IActorTest,\n  IActorContextPreprocessOutput>, IAction, IActorTest, IActorContextPreprocessOutput>;\n\n  public readonly mediatorHttpInvalidate: Mediator<Actor<IActionHttpInvalidate, IActorTest, IActorHttpInvalidateOutput>,\n  IActionHttpInvalidate, IActorTest, IActorHttpInvalidateOutput>;\n\n  public readonly logger: Logger;\n  public readonly queryString?: string;\n  public readonly defaultQueryInputFormat?: string;\n  public readonly context?: string;\n  public readonly contextKeyShortcuts: Record<string, string>;\n\n  public constructor(args: IActorInitSparqlArgs) {\n    super(args);\n  }\n\n  /**\n   * Add convenience methods to query results\n   * @param {IActorQueryOperationOutput} results Basic query results.\n   * @return {IQueryResult} Same query results with added fields.\n   */\n  public static enhanceQueryResults(results: IActorQueryOperationOutput): IQueryResult {\n    // Set bindings\n    if ((<IQueryResultBindings>results).bindingsStream) {\n      (<IQueryResultBindings>results).bindings = () => new Promise((resolve, reject) => {\n        const result: Bindings[] = [];\n        (<IQueryResultBindings>results).bindingsStream.on('data', data => {\n          result.push(data);\n        });\n        (<IQueryResultBindings>results).bindingsStream.on('end', () => {\n          resolve(result);\n        });\n        (<IQueryResultBindings>results).bindingsStream.on('error', reject);\n      });\n    } else if ((<IQueryResultQuads>results).quadStream) {\n      (<IQueryResultQuads>results).quads = () => new Promise((resolve, reject) => {\n        const result: RDF.Quad[] = [];\n        (<IQueryResultQuads>results).quadStream.on('data', data => {\n          result.push(data);\n        });\n        (<IQueryResultQuads>results).quadStream.on('end', () => {\n          resolve(result);\n        });\n        (<IQueryResultQuads>results).quadStream.on('error', reject);\n      });\n    }\n    return <IQueryResult> results;\n  }\n\n  public async test(action: IActionInit): Promise<IActorTest> {\n    return true;\n  }\n\n  /**\n   * Evaluate the given query\n   * @param {string | Algebra.Operation} query A query string or algebra.\n   * @param context An optional query context.\n   * @return {Promise<IActorQueryOperationOutput>} A promise that resolves to the query output.\n   */\n  public async query(query: string | Algebra.Operation, context?: any): Promise<IQueryResult> {\n    context = context || {};\n\n    // Expand shortcuts\n    for (const key in context) {\n      if (this.contextKeyShortcuts[key]) {\n        const existingEntry = context[key];\n        context[this.contextKeyShortcuts[key]] = existingEntry;\n        delete context[key];\n      }\n    }\n\n    // Set the default logger if none is provided\n    if (!context[KEY_CONTEXT_LOG]) {\n      context[KEY_CONTEXT_LOG] = this.logger;\n    }\n\n    if (!context[KEY_CONTEXT_QUERY_TIMESTAMP]) {\n      context[KEY_CONTEXT_QUERY_TIMESTAMP] = new Date();\n    }\n\n    // Ensure sources are an async re-iterable\n    if (Array.isArray(context[KEY_CONTEXT_SOURCES])) {\n      // TODO: backwards compatibility\n      context[KEY_CONTEXT_SOURCES].forEach((source: IDataSource): void => {\n        if (!isDataSourceRawType(source) && (source.type === 'auto' || source.type === 'hypermedia')) {\n          delete source.type;\n        }\n      });\n    }\n\n    // Prepare context\n    context = ActionContext(context);\n    let queryFormat = 'sparql';\n    if (context && context.has(KEY_CONTEXT_QUERYFORMAT)) {\n      queryFormat = context.get(KEY_CONTEXT_QUERYFORMAT);\n      context = context.delete(KEY_CONTEXT_QUERYFORMAT);\n      if (queryFormat === 'graphql' && !context.has(KEY_CONTEXT_GRAPHQL_SINGULARIZEVARIABLES)) {\n        context = context.set(KEY_CONTEXT_GRAPHQL_SINGULARIZEVARIABLES, {});\n      }\n    }\n    let baseIRI: string | undefined;\n    if (context && context.has(KEY_CONTEXT_BASEIRI)) {\n      baseIRI = context.get(KEY_CONTEXT_BASEIRI);\n    }\n\n    // Pre-processing the context\n    context = (await this.mediatorContextPreprocess.mediate({ context })).context;\n\n    // Parse query\n    let operation: Algebra.Operation;\n    if (typeof query === 'string') {\n      const queryParseOutput = await this.mediatorSparqlParse.mediate({ context, query, queryFormat, baseIRI });\n      operation = queryParseOutput.operation;\n      // Update the baseIRI in the context if the query modified it.\n      if (queryParseOutput.baseIRI) {\n        context = context.set(KEY_CONTEXT_BASEIRI, queryParseOutput.baseIRI);\n      }\n    } else {\n      operation = query;\n    }\n\n    // Apply initial bindings in context\n    if (context.has(KEY_CONTEXT_INITIALBINDINGS)) {\n      const bindings = context.get(KEY_CONTEXT_INITIALBINDINGS);\n      operation = materializeOperation(operation, ensureBindings(bindings));\n    }\n\n    // Optimize the query operation\n    operation = (await this.mediatorOptimizeQueryOperation.mediate({ context, operation })).operation;\n\n    // Execute query\n    const resolve: IActionQueryOperation = { context, operation };\n    let output = <IQueryResult> await this.mediatorQueryOperation.mediate(resolve);\n    output = ActorInitSparql.enhanceQueryResults(output);\n    output.context = context;\n    return output;\n  }\n\n  /**\n   * @param context An optional context.\n   * @return {Promise<{[p: string]: number}>} All available SPARQL (weighted) result media types.\n   */\n  public async getResultMediaTypes(context?: ActionContext): Promise<Record<string, number>> {\n    return (await this.mediatorSparqlSerializeMediaTypeCombiner.mediate({ context, mediaTypes: true })).mediaTypes;\n  }\n\n  /**\n   * @param context An optional context.\n   * @return {Promise<{[p: string]: number}>} All available SPARQL result media type formats.\n   */\n  public async getResultMediaTypeFormats(context?: ActionContext): Promise<Record<string, string>> {\n    return (await this.mediatorSparqlSerializeMediaTypeFormatCombiner.mediate({ context, mediaTypeFormats: true }))\n      .mediaTypeFormats;\n  }\n\n  /**\n   * Convert a query result to a string stream based on a certain media type.\n   * @param {IActorQueryOperationOutput} queryResult A query result.\n   * @param {string} mediaType A media type.\n   * @param {ActionContext} context An optional context.\n   * @return {Promise<IActorSparqlSerializeOutput>} A text stream.\n   */\n  public async resultToString(queryResult: IActorQueryOperationOutput, mediaType?: string, context?: any):\n  Promise<IActorSparqlSerializeOutput> {\n    context = ActionContext(context);\n\n    if (!mediaType) {\n      switch (queryResult.type) {\n        case 'bindings':\n          mediaType = 'application/json';\n          break;\n        case 'quads':\n          mediaType = 'application/trig';\n          break;\n        default:\n          mediaType = 'simple';\n          break;\n      }\n    }\n    const handle: IActionSparqlSerialize = queryResult;\n    handle.context = context;\n    return (await this.mediatorSparqlSerialize.mediate({ context, handle, handleMediaType: mediaType })).handle;\n  }\n\n  /**\n   * Invalidate all internal caches related to the given page URL.\n   * If no page URL is given, then all pages will be invalidated.\n   * @param {string} url The page URL to invalidate.\n   * @return {Promise<any>} A promise resolving when the caches have been invalidated.\n   */\n  public invalidateHttpCache(url?: string): Promise<any> {\n    return this.mediatorHttpInvalidate.mediate({ url });\n  }\n\n  public async run(action: IActionInit): Promise<IActorOutputInit> {\n    throw new Error('ActorInitSparql#run is not supported in the browser.');\n  }\n}\n\nexport interface IActorInitSparqlArgs extends IActorArgs<IActionInit, IActorTest, IActorOutputInit> {\n  mediatorOptimizeQueryOperation: Mediator<Actor<IActionOptimizeQueryOperation, IActorTest,\n  IActorOptimizeQueryOperationOutput>, IActionOptimizeQueryOperation, IActorTest, IActorOptimizeQueryOperationOutput>;\n  mediatorQueryOperation: Mediator<Actor<IActionQueryOperation, IActorTest, IActorQueryOperationOutput>,\n  IActionQueryOperation, IActorTest, IActorQueryOperationOutput>;\n  mediatorSparqlParse: Mediator<Actor<IActionSparqlParse, IActorTest, IActorSparqlParseOutput>,\n  IActionSparqlParse, IActorTest, IActorSparqlParseOutput>;\n  mediatorSparqlSerialize: Mediator<\n  Actor<IActionSparqlSerializeHandle, IActorTestSparqlSerializeHandle, IActorOutputSparqlSerializeHandle>,\n  IActionSparqlSerializeHandle, IActorTestSparqlSerializeHandle, IActorOutputSparqlSerializeHandle>;\n  mediatorSparqlSerializeMediaTypeCombiner: Mediator<\n  Actor<IActionSparqlSerializeMediaTypes, IActorTestSparqlSerializeMediaTypes, IActorOutputSparqlSerializeMediaTypes>,\n  IActionSparqlSerializeMediaTypes, IActorTestSparqlSerializeMediaTypes, IActorOutputSparqlSerializeMediaTypes>;\n  mediatorSparqlSerializeMediaTypeFormatCombiner: Mediator<\n  Actor<IActionSparqlSerializeMediaTypeFormats, IActorTestSparqlSerializeMediaTypeFormats,\n  IActorOutputSparqlSerializeMediaTypeFormats>,\n  IActionSparqlSerializeMediaTypeFormats, IActorTestSparqlSerializeMediaTypeFormats,\n  IActorOutputSparqlSerializeMediaTypeFormats>;\n  mediatorContextPreprocess: Mediator<Actor<IAction, IActorTest, IActorContextPreprocessOutput>,\n  IAction, IActorTest, IActorContextPreprocessOutput>;\n  mediatorHttpInvalidate: Mediator<Actor<IActionHttpInvalidate, IActorTest, IActorHttpInvalidateOutput>,\n  IActionHttpInvalidate, IActorTest, IActorHttpInvalidateOutput>;\n  logger: Logger;\n  queryString?: string;\n  defaultQueryInputFormat?: string;\n  context?: string;\n  contextKeyShortcuts: Record<string, string>;\n}\n\n/**\n * Query operation output for a bindings stream.\n * For example: SPARQL SELECT results\n */\nexport interface IQueryResultBindings extends IActorQueryOperationOutputBindings {\n  /**\n   * The collection of bindings after an 'end' event occured.\n   */\n  bindings: () => Promise<Bindings[]>;\n}\n\n/**\n * Query operation output for quads.\n * For example: SPARQL CONSTRUCT results\n */\nexport interface IQueryResultQuads extends IActorQueryOperationOutputQuads {\n  /**\n   * The collection of bindings after an 'end' event occured.\n   */\n  quads: () => Promise<RDF.Quad[]>;\n}\n\n/**\n * Query operation output for quads.\n * For example: SPARQL ASK results\n */\nexport interface IQueryResultBoolean extends IActorQueryOperationOutputBoolean {}\n\nexport type IQueryResult = IQueryResultBindings | IQueryResultQuads | IQueryResultBoolean;\n\nexport const KEY_CONTEXT_INITIALBINDINGS = '@comunica/actor-init-sparql:initialBindings';\nexport const KEY_CONTEXT_QUERYFORMAT = '@comunica/actor-init-sparql:queryFormat';\nexport const KEY_CONTEXT_GRAPHQL_SINGULARIZEVARIABLES = '@comunica/actor-init-sparql:singularizeVariables';\nexport const KEY_CONTEXT_LENIENT = '@comunica/actor-init-sparql:lenient';\n"]}