{"version":3,"file":"ActorInitSparql.js","sourceRoot":"","sources":["ActorInitSparql.ts"],"names":[],"mappings":"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","sourcesContent":["import { exec } from 'child_process';\nimport { existsSync, readFileSync } from 'fs';\nimport * as OS from 'os';\nimport type { Readable } from 'stream';\nimport { KEY_CONTEXT_DATETIME } from '@comunica/actor-http-memento';\nimport { KEY_CONTEXT_HTTPPROXYHANDLER, ProxyHandlerStatic } from '@comunica/actor-http-proxy';\nimport { KEY_CONTEXT_AUTH } from '@comunica/bus-http';\nimport type { IActionInit, IActorOutputInit } from '@comunica/bus-init';\nimport type { IActorQueryOperationOutput } from '@comunica/bus-query-operation';\nimport { KEY_CONTEXT_BASEIRI } from '@comunica/bus-query-operation';\n\nimport { ActionContext } from '@comunica/core';\nimport { LoggerPretty } from '@comunica/logger-pretty';\nimport minimist from 'minimist';\nimport type { IActorInitSparqlArgs } from './ActorInitSparql-browser';\nimport {\n  ActorInitSparql as ActorInitSparqlBrowser,\n  KEY_CONTEXT_LENIENT, KEY_CONTEXT_QUERYFORMAT,\n} from './ActorInitSparql-browser';\n\n// eslint-disable-next-line no-duplicate-imports\nexport {\n  KEY_CONTEXT_INITIALBINDINGS,\n  KEY_CONTEXT_QUERYFORMAT,\n  KEY_CONTEXT_LENIENT,\n} from './ActorInitSparql-browser';\n\n/**\n * A comunica SPARQL Init Actor.\n */\nexport class ActorInitSparql extends ActorInitSparqlBrowser {\n  public static readonly HELP_MESSAGE = `comunica-sparql evaluates SPARQL queries\n\n  Usage:\n    comunica-sparql http://fragments.dbpedia.org/2016-04/en [-q] 'SELECT * WHERE { ?s ?p ?o }'\n    comunica-sparql http://fragments.dbpedia.org/2016-04/en [-q] '{ hero { name friends { name } } }' -i graphql\n    comunica-sparql http://fragments.dbpedia.org/2016-04/en [-f] query.sparql'\n    comunica-sparql http://fragments.dbpedia.org/2016-04/en https://query.wikidata.org/sparql ...\n    comunica-sparql hypermedia@http://fragments.dbpedia.org/2016-04/en sparql@https://query.wikidata.org/sparql ...\n\n  Options:\n    -q            evaluate the given SPARQL query string\n    -f            evaluate the SPARQL query in the given file\n    -c            use the given JSON configuration file (e.g., config.json)\n    -t            the MIME type of the output (e.g., application/json)\n    -i            the query input format (e.g., graphql, defaults to sparql)\n    -b            base IRI for the query (e.g., http://example.org/)\n    -l            sets the log level (e.g., debug, info, warn, ... defaults to warn)\n    -d            sets a datetime for querying Memento-enabled archives\n    -p            delegates all HTTP traffic through the given proxy (e.g. http://myproxy.org/?uri=)\n    --lenient     if failing requests and parsing errors should be logged instead of causing a hard crash\n    --help        print this help message\n    --listformats prints the supported MIME types\n    --version     prints version information\n  `;\n\n  public constructor(args: IActorInitSparqlArgs) {\n    super(args);\n  }\n\n  public static getScriptOutput(command: string, fallback: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      exec(command, (error, stdout, stderr) => {\n        if (error) {\n          resolve(fallback);\n        }\n        resolve((stdout || stderr).trimEnd());\n      });\n    });\n  }\n\n  public static isDevelopmentEnvironment(): boolean {\n    return existsSync(`${__dirname}/../test`);\n  }\n\n  /**\n     * Converts an URL like 'hypermedia@http://user:passwd@example.com to an IDataSource\n     * @param {string} sourceString An url with possibly a type and authorization.\n     * @return {[id: string]: any} An IDataSource which represents the sourceString.\n     */\n  public static getSourceObjectFromString(sourceString: string): Record<string, any> {\n    const source: Record<string, any> = {};\n    const mediaTypeRegex = /^([^:]*)@/u;\n    const mediaTypeMatches = mediaTypeRegex.exec(sourceString);\n    if (mediaTypeMatches) {\n      source.type = mediaTypeMatches[1];\n      sourceString = sourceString.slice((<number> source.type.length) + 1);\n    }\n    const authRegex = /\\/\\/(.*:.*)@/u;\n    const authMatches = authRegex.exec(sourceString);\n    if (authMatches) {\n      const credentials = authMatches[1];\n      source.context = ActionContext({\n        [KEY_CONTEXT_AUTH]: decodeURIComponent(credentials),\n      });\n      sourceString = sourceString.slice(0, authMatches.index + 2) +\n        sourceString.slice(authMatches.index + credentials.length + 3);\n    }\n    source.value = sourceString;\n    return source;\n  }\n\n  public static async buildContext(args: minimist.ParsedArgs, queryContext: boolean, helpMessage: string,\n    queryString?: string): Promise<any> {\n    // Print version information\n    if (args.v || args.version) {\n      const comunicaVersion: string = require('../package.json').version;\n      const dev: string = this.isDevelopmentEnvironment() ? '(dev)' : '';\n      const nodeVersion: string = process.version;\n      const npmVersion: string = await this.getScriptOutput('npm -v', '_NPM is unavailable_');\n      const yarnVersion: string = await this.getScriptOutput('yarn -v', '_Yarn is unavailable_');\n      const os = `${OS.platform()} (${OS.type()} ${OS.release()})`;\n\n      const message = `| software            | version\n| ------------------- | -------\n| Comunica Init Actor | ${comunicaVersion} ${dev}\n| node                | ${nodeVersion}\n| npm                 | ${npmVersion}\n| yarn                | ${yarnVersion}\n| Operating System    | ${os}\n`;\n\n      return Promise.reject(new Error(message));\n    }\n\n    if (args.h || args.help || (queryContext &&\n        (!args.listformats && (!queryString && (!(args.q || args.f) && args._.length < (args.c ? 1 : 2) ||\n        args._.length < (args.c ? 0 : 1))))) ||\n        (!queryContext && ((args.c && args._.length > 0) || (!args.c && args._.length === 0)))) {\n      // Print command usage\n      return Promise.reject(new Error(helpMessage));\n    }\n\n    // Define context\n    let context: any = {};\n    if (args.c) {\n      context = JSON.parse(existsSync(args.c) ? readFileSync(args.c, 'utf8') : args.c);\n      // For backwards compatibility http\n    } else if (!queryContext && args._[0] && args._[0].startsWith('{')) {\n      context = JSON.parse(args._[0]);\n      args._.shift();\n    }\n\n    // Remove query so it does not become a source\n    if (queryContext && !args.q && !args.f) {\n      args._.pop();\n    }\n\n    // Add sources to context\n    if (args._.length > 0) {\n      context.sources = context.sources || [];\n      args._.forEach((sourceValue: string) => {\n        const source = this.getSourceObjectFromString(sourceValue);\n        context.sources.push(source);\n      });\n    }\n\n    // Set the logger\n    if (!context.log || args.l) {\n      context.log = new LoggerPretty({ level: args.l || 'warn' });\n    }\n\n    // Define the base IRI\n    if (args.b) {\n      context[KEY_CONTEXT_BASEIRI] = args.b;\n    }\n\n    // Define lenient-mode\n    if (args.lenient) {\n      context[KEY_CONTEXT_LENIENT] = true;\n    }\n\n    return context;\n  }\n\n  public async run(action: IActionInit): Promise<IActorOutputInit> {\n    const args = minimist(action.argv);\n\n    // Print supported MIME types\n    if (args.listformats) {\n      const mediaTypes: Record<string, number> = await this.getResultMediaTypes();\n      return { stdout: require('streamify-string')(`${Object.keys(mediaTypes).join('\\n')}\\n`) };\n    }\n\n    // Define query\n    let query: string | undefined;\n    if (args.q) {\n      if (typeof args.q !== 'string') {\n        throw new Error('The query option must be a string');\n      }\n      query = args.q;\n    } else if (args.f) {\n      query = readFileSync(args.f, { encoding: 'utf8' });\n    } else {\n      if (args._.length > 0) {\n        query = args._[args._.length - 1];\n      }\n      if (!query) {\n        // If we get here, this.queryString will always be defined\n        query = <string> this.queryString;\n      }\n    }\n\n    let context: any;\n    try {\n      context = await ActorInitSparql.buildContext(args, true, ActorInitSparql.HELP_MESSAGE, this.queryString);\n    } catch (error: unknown) {\n      return { stderr: require('streamify-string')((<Error> error).message) };\n    }\n\n    // Define the query format\n    context[KEY_CONTEXT_QUERYFORMAT] = this.defaultQueryInputFormat;\n    if (args.i) {\n      context[KEY_CONTEXT_QUERYFORMAT] = args.i;\n    }\n\n    // Define the datetime\n    if (args.d) {\n      context[KEY_CONTEXT_DATETIME] = new Date(args.d);\n    }\n\n    // Set the proxy\n    if (args.p) {\n      context[KEY_CONTEXT_HTTPPROXYHANDLER] = new ProxyHandlerStatic(args.p);\n    }\n\n    // Evaluate query\n    const queryResult: IActorQueryOperationOutput = await this.query(query, context);\n\n    // Serialize output according to media type\n    const stdout: Readable = <Readable> (await this.resultToString(queryResult, args.t, queryResult.context)).data;\n\n    return { stdout };\n  }\n}\n"]}