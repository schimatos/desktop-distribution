{"version":3,"file":"HttpServiceSparqlEndpoint.js","sourceRoot":"","sources":["HttpServiceSparqlEndpoint.ts"],"names":[],"mappings":"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","sourcesContent":["import type { EventEmitter } from 'events';\n\nimport * as http from 'http';\nimport * as querystring from 'querystring';\nimport type { Writable } from 'stream';\nimport * as url from 'url';\nimport type { IActorQueryOperationOutput, IActorQueryOperationOutputQuads } from '@comunica/bus-query-operation';\nimport { ActionContext } from '@comunica/core';\n\nimport { ArrayIterator } from 'asynciterator';\nimport minimist from 'minimist';\nimport type * as RDF from 'rdf-js';\nimport { newEngineDynamic } from '..';\nimport { ActorInitSparql } from './ActorInitSparql';\nimport type { IQueryOptions } from './QueryDynamic';\n\nconst quad = require('rdf-quad');\n\n/**\n * An HTTP service that exposes a Comunica engine as a SPARQL endpoint.\n */\nexport class HttpServiceSparqlEndpoint {\n  public static readonly MIME_PLAIN = 'text/plain';\n  public static readonly MIME_JSON = 'application/json';\n\n  public static readonly HELP_MESSAGE = `comunica-sparql-http exposes a Comunica engine as SPARQL endpoint\n\nUsage:\n  comunica-sparql-http http://fragments.dbpedia.org/2015/en\n  comunica-sparql-http http://fragments.dbpedia.org/2015/en hypermedia@http://fragments.dbpedia.org/2016-04/en\n  comunica-sparql-http -c context.json \n  comunica-sparql-http -c \"{ \\\\\"sources\\\\\": [{ \\\\\"type\\\\\": \\\\\"hypermedia\\\\\", \\\\\"value\\\\\" : \\\\\"http://fragments.dbpedia.org/2015/en\\\\\" }]}\" \n\nOptions:\n  -c            Context should be a JSON object or the path to such a JSON file.\n  -p            The HTTP port to run on (default: 3000)\n  -t            The query execution timeout in seconds (default: 60)\n  -b            base IRI for the query (e.g., http://example.org/)\n  -l            Sets the log level (e.g., debug, info, warn, ... defaults to warn)\n  -i            A flag that enables cache invalidation before each query execution.\n  --lenient     if failing requests and parsing errors should be logged instead of causing a hard crash\n  --help        print this help message\n  --version     prints version information\n`;\n\n  public readonly engine: Promise<ActorInitSparql>;\n\n  public readonly context: any;\n  public readonly timeout: number;\n  public readonly port: number;\n\n  public readonly invalidateCacheBeforeQuery: boolean;\n\n  public constructor(args?: IHttpServiceSparqlEndpointArgs) {\n    args = args ?? {};\n    this.context = args.context || {};\n    this.timeout = args.timeout ?? 60000;\n    this.port = args.port ?? 3000;\n    this.invalidateCacheBeforeQuery = Boolean(args.invalidateCacheBeforeQuery);\n\n    this.engine = newEngineDynamic(args);\n  }\n\n  /**\n   * Starts the server\n   * @param {string[]} argv The commandline arguments that the script was called with\n   * @param {module:stream.internal.Writable} stdout The output stream to log to.\n   * @param {module:stream.internal.Writable} stderr The error stream to log errors to.\n   * @param {string} moduleRootPath The path to the invoking module.\n   * @param {NodeJS.ProcessEnv} env The process env to get constants from.\n   * @param {string} defaultConfigPath The path to get the config from if none is defined in the environment.\n   * @param {(code: number) => void} exit The callback to invoke to stop the script.\n   * @return {Promise<void>} A promise that resolves when the server has been started.\n   */\n  public static async runArgsInProcess(argv: string[], stdout: Writable, stderr: Writable,\n    moduleRootPath: string, env: NodeJS.ProcessEnv,\n    defaultConfigPath: string, exit: (code: number) => void): Promise<void> {\n    const args = minimist(argv);\n    const options = await HttpServiceSparqlEndpoint\n      .generateConstructorArguments(args, moduleRootPath, env, defaultConfigPath, stderr, exit);\n\n    return new Promise<void>(resolve => {\n      new HttpServiceSparqlEndpoint(options).run(stdout, stderr)\n        .then(resolve)\n        .catch(error => {\n          stderr.write(error);\n          exit(1);\n          resolve();\n        });\n    });\n  }\n\n  /**\n   * Takes parsed commandline arguments and turns them into an object used in the HttpServiceSparqlEndpoint constructor\n   * @param {args: minimist.ParsedArgs} args The commandline arguments that the script was called with\n   * @param {string} moduleRootPath The path to the invoking module.\n   * @param {NodeJS.ProcessEnv} env The process env to get constants from.\n   * @param {string} defaultConfigPath The path to get the config from if none is defined in the environment.\n   */\n  public static async generateConstructorArguments(args: minimist.ParsedArgs, moduleRootPath: string,\n    env: NodeJS.ProcessEnv, defaultConfigPath: string, stderr: Writable,\n    exit: (code: number) => void): Promise<IHttpServiceSparqlEndpointArgs> {\n    // Allow both files as direct JSON objects for context\n    let context: any;\n    try {\n      context = await ActorInitSparql.buildContext(args, false, HttpServiceSparqlEndpoint.HELP_MESSAGE);\n    } catch (error: unknown) {\n      stderr.write((<Error> error).message);\n      exit(1);\n    }\n\n    const invalidateCacheBeforeQuery: boolean = args.i;\n    const port = Number.parseInt(args.p, 10) || 3000;\n    const timeout = (Number.parseInt(args.t, 10) || 60) * 1000;\n\n    const configResourceUrl = env.COMUNICA_CONFIG ? env.COMUNICA_CONFIG : defaultConfigPath;\n\n    return {\n      configResourceUrl,\n      context,\n      invalidateCacheBeforeQuery,\n      mainModulePath: moduleRootPath,\n      port,\n      timeout,\n    };\n  }\n\n  /**\n   * Start the HTTP service.\n   * @param {module:stream.internal.Writable} stdout The output stream to log to.\n   * @param {module:stream.internal.Writable} stderr The error stream to log errors to.\n   */\n  public async run(stdout: Writable, stderr: Writable): Promise<void> {\n    const engine: ActorInitSparql = await this.engine;\n\n    // Determine the allowed media types for requests\n    const mediaTypes: Record<string, number> = await engine.getResultMediaTypes();\n    const variants: { type: string; quality: number }[] = [];\n    for (const type of Object.keys(mediaTypes)) {\n      variants.push({ type, quality: mediaTypes[type] });\n    }\n\n    // Start the server\n    const server = http.createServer(this.handleRequest.bind(this, engine, variants, stdout, stderr));\n    server.listen(this.port);\n    // Unreliable mechanism, set too high on purpose\n    server.setTimeout(2 * this.timeout);\n    stderr.write(`Server running on http://localhost:${this.port}/sparql\\n`);\n  }\n\n  /**\n   * Handles an HTTP request.\n   * @param {ActorInitSparql} engine A SPARQL engine.\n   * @param {{type: string; quality: number}[]} variants Allowed variants.\n   * @param {module:stream.internal.Writable} stdout Output stream.\n   * @param {module:stream.internal.Writable} stderr Error output stream.\n   * @param {module:http.IncomingMessage} request Request object.\n   * @param {module:http.ServerResponse} response Response object.\n   */\n  public async handleRequest(engine: ActorInitSparql, variants: { type: string; quality: number }[],\n    stdout: Writable, stderr: Writable,\n    request: http.IncomingMessage, response: http.ServerResponse): Promise<void> {\n    const negotiated = require('negotiate').choose(variants, request)\n      .sort((first: any, second: any) => second.qts - first.qts);\n    const variant: any = request.headers.accept ? negotiated[0] : null;\n    // Require qts strictly larger than 2, as 1 and 2 respectively allow * and */* matching.\n    // For qts 0, 1, and 2, we fallback to our built-in media type defaults, for which we pass null.\n    const mediaType: string = variant && variant.qts > 2 ? variant.type : null;\n\n    // Verify the path\n    const requestUrl = url.parse(request.url ?? '', true);\n    if (requestUrl.pathname === '/' || request.url === '/') {\n      stdout.write('[301] Permanently moved. Redirected to /sparql.');\n      response.writeHead(301,\n        { 'content-type': HttpServiceSparqlEndpoint.MIME_JSON,\n          'Access-Control-Allow-Origin': '*',\n          Location: `http://localhost:${this.port}/sparql${requestUrl.search || ''}` });\n      response.end(JSON.stringify({ message: 'Queries are accepted on /sparql. Redirected.' }));\n      return;\n    }\n    if (requestUrl.pathname !== '/sparql') {\n      stdout.write('[404] Resource not found. Queries are accepted on /sparql.\\n');\n      response.writeHead(404,\n        { 'content-type': HttpServiceSparqlEndpoint.MIME_JSON,\n          'Access-Control-Allow-Origin': '*' });\n      response.end(JSON.stringify({ message: 'Resource not found. Queries are accepted on /sparql.' }));\n      return;\n    }\n\n    if (this.invalidateCacheBeforeQuery) {\n      // Invalidate cache\n      await engine.invalidateHttpCache();\n    }\n\n    // Parse the query, depending on the HTTP method\n    let sparql;\n    switch (request.method) {\n      case 'POST':\n        sparql = await this.parseBody(request);\n        await this.writeQueryResult(engine, stdout, stderr, request, response, sparql, mediaType, false);\n        break;\n      case 'HEAD':\n      case 'GET':\n        sparql = <string> requestUrl.query.query || '';\n        await this\n          .writeQueryResult(engine, stdout, stderr, request, response, sparql, mediaType, request.method === 'HEAD');\n        break;\n      default:\n        stdout.write(`[405] ${request.method} to ${request.url}\\n`);\n        response.writeHead(405,\n          { 'content-type': HttpServiceSparqlEndpoint.MIME_JSON, 'Access-Control-Allow-Origin': '*' });\n        response.end(JSON.stringify({ message: 'Incorrect HTTP method' }));\n    }\n  }\n\n  /**\n   * Writes the result of the given SPARQL query.\n   * @param {ActorInitSparql} engine A SPARQL engine.\n   * @param {module:stream.internal.Writable} stdout Output stream.\n   * @param {module:stream.internal.Writable} stderr Error output stream.\n   * @param {module:http.IncomingMessage} request Request object.\n   * @param {module:http.ServerResponse} response Response object.\n   * @param {string} sparql The SPARQL query string.\n   * @param {string} mediaType The requested response media type.\n   * @param {boolean} headOnly If only the header should be written.\n   */\n  public async writeQueryResult(engine: ActorInitSparql, stdout: Writable, stderr: Writable,\n    request: http.IncomingMessage, response: http.ServerResponse,\n    sparql: string, mediaType: string, headOnly: boolean): Promise<void> {\n    if (!sparql) {\n      return this.writeServiceDescription(engine, stdout, stderr, request, response, mediaType, headOnly);\n    }\n\n    let result: IActorQueryOperationOutput;\n    try {\n      result = await engine.query(sparql, this.context);\n    } catch (error: unknown) {\n      stdout.write('[400] Bad request\\n');\n      response.writeHead(400,\n        { 'content-type': HttpServiceSparqlEndpoint.MIME_PLAIN, 'Access-Control-Allow-Origin': '*' });\n      response.end((<Error> error).message);\n      return;\n    }\n\n    // Default to SPARQL JSON for bindings and boolean\n    if (!mediaType) {\n      switch (result.type) {\n        case 'quads':\n          mediaType = 'application/trig';\n          break;\n        default:\n          mediaType = 'application/sparql-results+json';\n          break;\n      }\n    }\n\n    stdout.write(`[200] ${request.method} to ${request.url}\\n`);\n    stdout.write(`      Requested media type: ${mediaType}\\n`);\n    stdout.write(`      Received query: ${sparql}\\n`);\n    response.writeHead(200, { 'content-type': mediaType, 'Access-Control-Allow-Origin': '*' });\n\n    if (headOnly) {\n      response.end();\n      return;\n    }\n\n    let eventEmitter: EventEmitter | undefined;\n    try {\n      const { data } = await engine.resultToString(result, mediaType);\n      data.on('error', (error: Error) => {\n        stdout.write(`[500] Server error in results: ${error.message} \\n`);\n        response.end('An internal server error occurred.\\n');\n      });\n      data.pipe(response);\n      eventEmitter = data;\n    } catch {\n      stdout.write('[400] Bad request, invalid media type\\n');\n      response.writeHead(400,\n        { 'content-type': HttpServiceSparqlEndpoint.MIME_PLAIN, 'Access-Control-Allow-Origin': '*' });\n      response.end('The response for the given query could not be serialized for the requested media type\\n');\n    }\n\n    this.stopResponse(response, eventEmitter);\n  }\n\n  public async writeServiceDescription(engine: ActorInitSparql, stdout: Writable, stderr: Writable,\n    request: http.IncomingMessage, response: http.ServerResponse,\n    mediaType: string, headOnly: boolean): Promise<void> {\n    stdout.write(`[200] ${request.method} to ${request.url}\\n`);\n    stdout.write(`      Requested media type: ${mediaType}\\n`);\n    stdout.write('      Received query for service description.\\n');\n    response.writeHead(200, { 'content-type': mediaType, 'Access-Control-Allow-Origin': '*' });\n\n    if (headOnly) {\n      response.end();\n      return;\n    }\n\n    // eslint-disable-next-line id-length\n    const s = request.url;\n    const sd = 'http://www.w3.org/ns/sparql-service-description#';\n    const quads: RDF.Quad[] = [\n      // Basic metadata\n      quad(s, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type', `${sd}Service`),\n      quad(s, `${sd}endpoint`, '/sparql'),\n      quad(s, `${sd}url`, '/sparql'),\n\n      // Features\n      quad(s, `${sd}feature`, `${sd}BasicFederatedQuery`),\n      quad(s, `${sd}supportedLanguage`, `${sd}SPARQL10Query`),\n      quad(s, `${sd}supportedLanguage`, `${sd}SPARQL11Query`),\n    ];\n\n    let eventEmitter: EventEmitter;\n    try {\n      // Append result formats\n      const formats = await engine.getResultMediaTypeFormats(ActionContext(this.context));\n      for (const format in formats) {\n        quads.push(quad(s, `${sd}resultFormat`, formats[format]));\n      }\n\n      // Flush results\n      const { data } = await engine.resultToString(<IActorQueryOperationOutputQuads> {\n        type: 'quads',\n        quadStream: new ArrayIterator(quads),\n      }, mediaType);\n      data.on('error', (error: Error) => {\n        stdout.write(`[500] Server error in results: ${error.message} \\n`);\n        response.end('An internal server error occurred.\\n');\n      });\n      data.pipe(response);\n      eventEmitter = data;\n    } catch {\n      stdout.write('[400] Bad request, invalid media type\\n');\n      response.writeHead(400,\n        { 'content-type': HttpServiceSparqlEndpoint.MIME_PLAIN, 'Access-Control-Allow-Origin': '*' });\n      response.end('The response for the given query could not be serialized for the requested media type\\n');\n      return;\n    }\n    this.stopResponse(response, eventEmitter);\n  }\n\n  /**\n   * Stop after timeout or if the connection is terminated\n   * @param {module:http.ServerResponse} response Response object.\n   * @param {NodeJS.ReadableStream} eventEmitter Query result stream.\n   */\n  public stopResponse(response: http.ServerResponse, eventEmitter?: EventEmitter): void {\n    // Note: socket or response timeouts seemed unreliable, hence the explicit timeout\n    const killTimeout = setTimeout(killClient, this.timeout);\n    response.on('close', killClient);\n    function killClient(): void {\n      if (eventEmitter) {\n        // Remove all listeners so we are sure no more write calls are made\n        eventEmitter.removeAllListeners();\n        eventEmitter.emit('end');\n      }\n      try {\n        response.end();\n      } catch {\n        // Do nothing\n      }\n      clearTimeout(killTimeout);\n    }\n  }\n\n  /**\n   * Parses the body of a SPARQL POST request\n   * @param {module:http.IncomingMessage} request Request object.\n   * @return {Promise<string>} A promise resolving to a query string.\n   */\n  public parseBody(request: http.IncomingMessage): Promise<string> {\n    return new Promise((resolve, reject) => {\n      let body = '';\n      request.setEncoding('utf8');\n      request.on('error', reject);\n      request.on('data', chunk => {\n        body += chunk;\n      });\n      request.on('end', () => {\n        const contentType: string | undefined = request.headers['content-type'];\n        if (contentType && contentType.includes('application/sparql-query')) {\n          return resolve(body);\n        }\n        if (contentType && contentType.includes('application/x-www-form-urlencoded')) {\n          return resolve(<string> querystring.parse(body).query || '');\n        }\n        return resolve(body);\n      });\n    });\n  }\n}\n\nexport interface IHttpServiceSparqlEndpointArgs extends IQueryOptions {\n  context?: any;\n  timeout?: number;\n  port?: number;\n  invalidateCacheBeforeQuery?: boolean;\n}\n"]}