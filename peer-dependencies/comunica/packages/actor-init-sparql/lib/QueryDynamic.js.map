{"version":3,"file":"QueryDynamic.js","sourceRoot":"","sources":["QueryDynamic.ts"],"names":[],"mappings":";;;AACA,6CAAwD;AAGxD;;;;;;GAMG;AACH,SAAgB,qBAAqB,CAAC,OAAsB,EAAE,cAAsB,EAClF,iBAAyB;;IACzB,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;QAC3B,mEAAmE;QACnE,OAAO,CAAC,cAAc,GAAG,cAAc,CAAC;KACzC;IACD,MAAM,iBAAiB,SAAW,OAAO,CAAC,iBAAiB,mCAAI,iBAAiB,CAAC;IACjF,MAAM,WAAW,SAAW,OAAO,CAAC,WAAW,mCAAI,yBAAyB,CAAC;IAE7E,iFAAiF;IACjF,qDAAqD;IACrD,MAAM,iBAAiB,SAAW,OAAO,CAAC,iBAAiB,mCAAI,iBAAiB,CAAC;IAEjF,yDAAyD;IACzD,OAAO,6BAAoB,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,OAAO,CAAC;SACvE,IAAI,CAAC,CAAC,MAAc,EAAE,EAAE,CAAmB,MAAM,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AACtG,CAAC;AAhBD,sDAgBC","sourcesContent":["import type { ISetupProperties, Runner } from '@comunica/runner';\nimport { instantiateComponent } from '@comunica/runner';\nimport type { ActorInitSparql } from './ActorInitSparql';\n\n/**\n * Create a new dynamic comunica engine.\n * @param {IQueryOptions} options Optional options on how to instantiate the query evaluator.\n * @param {string} moduleRootPath The path to the invoking module.\n * @param {string} defaultConfigPath The path to the config file.\n * @return {Promise<ActorInitSparql>} A promise that resolves to a fully wired comunica engine.\n */\nexport function newEngineDynamicArged(options: IQueryOptions, moduleRootPath: string,\n  defaultConfigPath: string): Promise<ActorInitSparql> {\n  if (!options.mainModulePath) {\n    // This makes sure that our configuration is found by Components.js\n    options.mainModulePath = moduleRootPath;\n  }\n  const configResourceUrl: string = options.configResourceUrl ?? defaultConfigPath;\n  const instanceUri: string = options.instanceUri ?? 'urn:comunica:sparqlinit';\n\n  // Instantiate the main runner so that all other actors are instantiated as well,\n  // and find the SPARQL init actor with the given name\n  const runnerInstanceUri: string = options.runnerInstanceUri ?? 'urn:comunica:my';\n\n  // This needs to happen before any promise gets generated\n  return instantiateComponent(configResourceUrl, runnerInstanceUri, options)\n    .then((runner: Runner) => <ActorInitSparql> runner.collectActors({ engine: instanceUri }).engine);\n}\n\n/**\n * Options for configuring how the query evaluator must be instantiated.\n */\nexport interface IQueryOptions extends ISetupProperties {\n  /**\n   * The URL or local path to a Components.js config file.\n   */\n  configResourceUrl?: string;\n  /**\n   * A URI identifying the component to instantiate.\n   */\n  instanceUri?: string;\n  /**\n   * A URI identifying the runner component.\n   */\n  runnerInstanceUri?: string;\n}\n"]}