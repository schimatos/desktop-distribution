{"version":3,"file":"ActorQueryOperationAsk.js","sourceRoot":"","sources":["ActorQueryOperationAsk.ts"],"names":[],"mappings":";;;AAGA,uEAAsG;AAItG;;GAEG;AACH,MAAa,sBAAuB,SAAQ,sDAA6C;IACvF,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAoB,EAAE,OAAsB;QACrE,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAoB,EAAE,OAAsB;QACpE,yCAAyC;QACzC,MAAM,MAAM,GAA+B,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAClF,EAAE,SAAS,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,CACtC,CAAC;QACF,MAAM,QAAQ,GAAuC,yCAAmB,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACjG,MAAM,aAAa,GAAqB,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC/E,gEAAgE;YAChE,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;gBACxC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,QAAQ,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;YAClC,CAAC,CAAC,CAAC;YAEH,+EAA+E;YAC/E,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YAExD,0CAA0C;YAC1C,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC;IAC5C,CAAC;CACF;AA9BD,wDA8BC","sourcesContent":["import type { IActorQueryOperationOutput,\n  IActorQueryOperationOutputBindings, IActorQueryOperationOutputBoolean,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation, ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { ActionContext, IActorTest } from '@comunica/core';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Ask Query Operation Actor.\n */\nexport class ActorQueryOperationAsk extends ActorQueryOperationTypedMediated<Algebra.Ask> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'ask');\n  }\n\n  public async testOperation(pattern: Algebra.Ask, context: ActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.Ask, context: ActionContext): Promise<IActorQueryOperationOutputBoolean> {\n    // Call other query operations like this:\n    const output: IActorQueryOperationOutput = await this.mediatorQueryOperation.mediate(\n      { operation: pattern.input, context },\n    );\n    const bindings: IActorQueryOperationOutputBindings = ActorQueryOperation.getSafeBindings(output);\n    const booleanResult: Promise<boolean> = new Promise<boolean>((resolve, reject) => {\n      // Resolve to true if we find one element, and close immediately\n      bindings.bindingsStream.once('data', () => {\n        resolve(true);\n        bindings.bindingsStream.close();\n      });\n\n      // If we reach the end of the stream without finding anything, resolve to false\n      bindings.bindingsStream.on('end', () => resolve(false));\n\n      // Reject if an error occurs in the stream\n      bindings.bindingsStream.on('error', reject);\n    });\n    return { type: 'boolean', booleanResult };\n  }\n}\n"]}