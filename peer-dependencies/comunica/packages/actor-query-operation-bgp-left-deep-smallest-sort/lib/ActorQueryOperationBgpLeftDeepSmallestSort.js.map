{"version":3,"file":"ActorQueryOperationBgpLeftDeepSmallestSort.js","sourceRoot":"","sources":["ActorQueryOperationBgpLeftDeepSmallestSort.ts"],"names":[],"mappings":";;;AAKA,uEAGuC;AAEvC,iDAAyF;AAEzF,2CAA0C;AAC1C,yCAAqC;AAGrC;;;GAGG;AACH,MAAa,0CAA2C,SAAQ,sDAA6C;IAC3G,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrB,CAAC;IAED;;;;;;;;;;OAUG;IACI,MAAM,CAAC,oBAAoB,CAAC,UAA0B,EAAE,QAA2B,EACxF,aACuB;QACvB,OAAO,IAAI,sCAAsB,CAAC,UAAU,EAAE;YAC5C,SAAS,EAAE,KAAK;YAChB,cAAc,CAAC,QAAkB;gBAC/B,MAAM,cAAc,GAAG,CAAC,WAAqB,EAAY,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACxF,OAAO,IAAI,iCAAiB,CAC1B,KAAK,IAAG,EAAE,CAAC,CAAC,MAAM,aAAa,CAAC,0CAA0C,CAAC,mBAAmB,CAAC,QAAQ,EACrG,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,EAAE,aAAa,EAAE,GAAG,EAAE,CAC1D,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,oBAAoB,CAAC,cAAoD;QACrF,MAAM,cAAc,GAAe,EAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EACpD,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;QAChE,aAAa;QACb,OAAO,CAAE,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAE,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,YAAY,CAAC,kBAAsC;QAC/D,OAAO,kBAAkB,CAAC,IAAI,CAAC,CAAC,MAAwB,EAAE,MAAwB,EAAE,EAAE,CACpF,0CAA0C,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC;YACrE,0CAA0C,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3E,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,0BAA0B,CAAC,eAAgD,EACvF,aAAkD;QAClD,MAAM,aAAa,GAAW,0CAA0C,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QACxG,OAAO,aAAa;aACjB,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,aAAa,GAAG,0CAA0C,CAAC,aAAa,CAC3F,YAAY,CACb,CAAC;aACD,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC,CAAC,CAAC;IAChD,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,aAAa,CAAC,QAA8B;QACxD,MAAM,EAAE,UAAU,EAAE,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,EAAE,CAAC;QACtC,OAAO,UAAU,IAAI,UAAU,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC;IAChE,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,mBAAmB,CAAC,QAA2B,EAAE,QAAkB;QAC/E,OAAO,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,0CAA0C,CAAC,kBAAkB,CAC1F,OAAO,EAAE,QAAQ,CAClB,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,kBAAkB,CAAC,OAAwB,EAAE,QAAkB;QAC3E,OAAyB,MAAM,CAAC,MAAM,CAAC,oBAAQ,CAAC,OAAO,EACrD,CAAC,IAAc,EAAE,EAAE,CAAC,0CAA0C,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,EACjG,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;IACjD,CAAC;IAED;;;;;;;;;;;OAWG;IACI,MAAM,CAAC,eAAe,CAAC,IAAc,EAAE,QAAkB;QAC9D,IAAI,IAAI,CAAC,QAAQ,KAAK,UAAU,EAAE;YAChC,MAAM,KAAK,GAAa,QAAQ,CAAC,GAAG,CAAC,yBAAY,CAAC,IAAI,CAAC,CAAC,CAAC;YACzD,IAAI,KAAK,EAAE;gBACT,OAAO,KAAK,CAAC;aACd;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,cAAoD;QAC/F,KAAK,MAAM,aAAa,IAAI,cAAc,EAAE;YAC1C,IAAI,aAAa,CAAC,QAAQ,EAAE;gBAC1B,MAAM,QAAQ,GAAwB,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAC;gBACrE,IAAI,CAAC,0CAA0C,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;oBACvE,OAAO,IAAI,CAAC;iBACb;aACF;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAoB,EAAE,OAAsB;QACrE,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,uDAAuD,CAAC,CAAC;SAC5F;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAoB,EAAE,OAAsB;QACpE,gFAAgF;QAChF,MAAM,cAAc,GAAyC,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ;aAC7F,GAAG,CAAC,CAAC,UAA2B,EAAE,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CACvE,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,CACnC,CAAC,CAAC,CAAC;aACH,GAAG,CAAC,yCAAmB,CAAC,eAAe,CAAC,CAAC;QAE5C,+EAA+E;QAC/E,IAAI,MAAM,0CAA0C,CAAC,wBAAwB,CAAC,cAAc,CAAC,EAAE;YAC7F,OAAO;gBACL,cAAc,EAAE,IAAI,6BAAa,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;gBAC3D,QAAQ,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC;gBAClD,IAAI,EAAE,UAAU;gBAChB,SAAS,EAAE,EAAE;gBACb,gBAAgB,EAAE,KAAK;aACxB,CAAC;SACH;QAED,wCAAwC;QACxC,MAAM,SAAS,GAA0B,MAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAC3E,KAAK,EAAC,aAAa,EAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CACpF,CAAC,CAAC;QAEH,0CAA0C;QAC1C,MAAM,gBAAgB,GAAuB,0CAA0C,CAAC,YAAY,CAClG,cAAc,CAAC,GAAG,CAAC,CAAC,MAA0C,EAAE,CAAS,EAAE,EAAE,CAC3E,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAChE,CAAC;QAEF,iCAAiC;QACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChD,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;SACnD;QAED,qDAAqD;QACrD,MAAM,eAAe,GAAqB,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvE,gBAAgB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAE9B,qEAAqE;QACrE,MAAM,cAAc,GAAmB,0CAA0C,CAAC,oBAAoB,CACpG,eAAe,CAAC,MAAM,CAAC,cAAc,EACrC,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EACtC,KAAK,EAAC,QAA2B,EAAE,EAAE;YACnC,+EAA+E;YAC/E,MAAM,SAAS,GAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;YACzD,OAAO,yCAAmB,CAAC,eAAe,CAAC,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;iBAC1G,cAAc,CAAC;QACpB,CAAC,CACF,CAAC;QAEF,iCAAiC;QACjC,MAAM,SAAS,GAAa,0CAA0C,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC;QAC5G,MAAM,QAAQ,GAAG,GAAiC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;YACnE,UAAU,EAAE,0CAA0C,CAAC,0BAA0B,CAAC,eAAe,CAAC,IAAI,EACpG,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACzC,CAAC,CAAC;QAEH,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,SAAS,EAAE,QAAQ,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC;IAC5F,CAAC;CACF;AAnND,gGAmNC","sourcesContent":["import type { Bindings,\n  BindingsStream,\n\n  IActorQueryOperationOutputBindings,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { ActionContext, IActorTest } from '@comunica/core';\nimport { ArrayIterator, MultiTransformIterator, TransformIterator } from 'asynciterator';\nimport type * as RDF from 'rdf-js';\nimport { termToString } from 'rdf-string';\nimport { mapTerms } from 'rdf-terms';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Query Operation Actor that resolves BGPs in a left-deep manner\n * based on the pattern with the smallest item count and sorts the remaining patterns by increasing count.\n */\nexport class ActorQueryOperationBgpLeftDeepSmallestSort extends ActorQueryOperationTypedMediated<Algebra.Bgp> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'bgp');\n  }\n\n  /**\n   * Create a new bindings stream\n   * that takes every binding of the base stream,\n   * materializes the remaining patterns with it,\n   * and emits all bindings from this new set of patterns.\n   * @param {BindingsStream} baseStream The base stream.\n   * @param {Algebra.Pattern[]} patterns The patterns to materialize with each binding of the base stream.\n   * @param {(patterns: Algebra.Pattern[]) => Promise<IActorQueryOperationOutput>} patternBinder A callback\n   * to retrieve the bindings stream of an array of patterns.\n   * @return {BindingsStream}\n   */\n  public static createLeftDeepStream(baseStream: BindingsStream, patterns: Algebra.Pattern[],\n    patternBinder: (bindPatterns: Algebra.Pattern[]) =>\n    Promise<BindingsStream>): BindingsStream {\n    return new MultiTransformIterator(baseStream, {\n      autoStart: false,\n      multiTransform(bindings: Bindings) {\n        const bindingsMerger = (subBindings: Bindings): Bindings => subBindings.merge(bindings);\n        return new TransformIterator(\n          async() => (await patternBinder(ActorQueryOperationBgpLeftDeepSmallestSort.materializePatterns(patterns,\n            bindings))).map(bindingsMerger), { maxBufferSize: 128 },\n        );\n      },\n    });\n  }\n\n  /**\n   * Get the combined list of variables of the given pattern outputs.\n   * @param {IActorQueryOperationOutput[]} patternOutputs An array of query operation outputs\n   * @return {string[]} The array of variable names.\n   */\n  public static getCombinedVariables(patternOutputs: IActorQueryOperationOutputBindings[]): string[] {\n    const withDuplicates = (<string[]> []).concat.apply([],\n      patternOutputs.map(patternOutput => patternOutput.variables));\n    // @ts-ignore\n    return [ ...new Set(withDuplicates) ];\n  }\n\n  /**\n   * Sort the given patterns and metadata by increasing estimated count.\n   * @param {IOutputMetaTuple[]} patternOutputsMeta An array of pattern output and metadata tuples.\n   * @return {IOutputMetaTuple[]} The sorted array.\n   */\n  public static sortPatterns(patternOutputsMeta: IOutputMetaTuple[]): IOutputMetaTuple[] {\n    return patternOutputsMeta.sort((tuple1: IOutputMetaTuple, tuple2: IOutputMetaTuple) =>\n      ActorQueryOperationBgpLeftDeepSmallestSort.getTotalItems(tuple1.meta) -\n      ActorQueryOperationBgpLeftDeepSmallestSort.getTotalItems(tuple2.meta));\n  }\n\n  /**\n   * Estimate an upper bound for the total number of items from the given metadata.\n   * @param {{[p: string]: any}} smallestPattern The optional metadata for the pattern\n   *                                             with the smallest number of elements.\n   * @param {{[p: string]: any}[]} otherPatterns The array of optional metadata for the other patterns.\n   * @return {number} The estimated number of total items.\n   */\n  public static estimateCombinedTotalItems(smallestPattern: Record<string, any> | undefined,\n    otherPatterns: (Record<string, any> | undefined)[]): number {\n    const smallestCount: number = ActorQueryOperationBgpLeftDeepSmallestSort.getTotalItems(smallestPattern);\n    return otherPatterns\n      .map(otherPattern => smallestCount * ActorQueryOperationBgpLeftDeepSmallestSort.getTotalItems(\n        otherPattern,\n      ))\n      .reduce((sum, element) => sum + element, 0);\n  }\n\n  /**\n   * Get the estimated number of items from the given metadata.\n   * @param {{[p: string]: any}} metadata An optional metadata object.\n   * @return {number} The estimated number of items, or `Infinity` if metadata is falsy.\n   */\n  public static getTotalItems(metadata?: Record<string, any>): number {\n    const { totalItems } = metadata ?? {};\n    return totalItems || totalItems === 0 ? totalItems : Infinity;\n  }\n\n  /**\n   * Materialize all patterns in the given pattern array with the given bindings.\n   * @param {Pattern[]} patterns SPARQL algebra patterns.\n   * @param {Bindings} bindings A bindings object.\n   * @return {Pattern[]} A new array where each input pattern is materialized.\n   */\n  public static materializePatterns(patterns: Algebra.Pattern[], bindings: Bindings): Algebra.Pattern[] {\n    return patterns.map(pattern => ActorQueryOperationBgpLeftDeepSmallestSort.materializePattern(\n      pattern, bindings,\n    ));\n  }\n\n  /**\n   * Materialize a pattern with the given bindings.\n   * @param {Pattern} pattern A SPARQL algebra pattern.\n   * @param {Bindings} bindings A bindings object.\n   * @return {Pattern} A new materialized pattern.\n   */\n  public static materializePattern(pattern: Algebra.Pattern, bindings: Bindings): Algebra.Pattern {\n    return <Algebra.Pattern> Object.assign(mapTerms(pattern,\n      (term: RDF.Term) => ActorQueryOperationBgpLeftDeepSmallestSort.materializeTerm(term, bindings)),\n    { type: 'pattern', context: pattern.context });\n  }\n\n  /**\n   * Materialize a term with the given binding.\n   *\n   * If the given term is a variable (or blank node)\n   * and that variable exist in the given bindings object,\n   * the value of that binding is returned.\n   * In all other cases, the term itself is returned.\n   *\n   * @param {RDF.Term} term A term.\n   * @param {Bindings} bindings A bindings object.\n   * @return {RDF.Term} The materialized term.\n   */\n  public static materializeTerm(term: RDF.Term, bindings: Bindings): RDF.Term {\n    if (term.termType === 'Variable') {\n      const value: RDF.Term = bindings.get(termToString(term));\n      if (value) {\n        return value;\n      }\n    }\n    return term;\n  }\n\n  /**\n   * Check if at least one of the given outputs has an empty output, i.e., when the estimated count is zero.\n   * @param {IActorQueryOperationOutputBindings[]} patternOutputs Pattern outputs.\n   * @return {Promise<boolean>} A promise for indicating whether or not at least one of the outputs is empty.\n   */\n  public static async hasOneEmptyPatternOutput(patternOutputs: IActorQueryOperationOutputBindings[]): Promise<boolean> {\n    for (const patternOutput of patternOutputs) {\n      if (patternOutput.metadata) {\n        const metadata: Record<string, any> = await patternOutput.metadata();\n        if (!ActorQueryOperationBgpLeftDeepSmallestSort.getTotalItems(metadata)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  public async testOperation(pattern: Algebra.Bgp, context: ActionContext): Promise<IActorTest> {\n    if (pattern.patterns.length < 2) {\n      throw new Error(`Actor ${this.name} can only operate on BGPs with at least two patterns.`);\n    }\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.Bgp, context: ActionContext): Promise<IActorQueryOperationOutputBindings> {\n    // Get the total number of items for all patterns by resolving the quad patterns\n    const patternOutputs: IActorQueryOperationOutputBindings[] = (await Promise.all(pattern.patterns\n      .map((subPattern: Algebra.Pattern) => this.mediatorQueryOperation.mediate(\n        { operation: subPattern, context },\n      ))))\n      .map(ActorQueryOperation.getSafeBindings);\n\n    // If a triple pattern has no matches, the entire graph pattern has no matches.\n    if (await ActorQueryOperationBgpLeftDeepSmallestSort.hasOneEmptyPatternOutput(patternOutputs)) {\n      return {\n        bindingsStream: new ArrayIterator([], { autoStart: false }),\n        metadata: () => Promise.resolve({ totalItems: 0 }),\n        type: 'bindings',\n        variables: [],\n        canContainUndefs: false,\n      };\n    }\n\n    // Resolve the metadata for all patterns\n    const metadatas: Record<string, any>[] = await Promise.all(patternOutputs.map(\n      async patternOutput => patternOutput.metadata ? await patternOutput.metadata() : {},\n    ));\n\n    // Sort patterns by increasing total items\n    const outputMetaTuples: IOutputMetaTuple[] = ActorQueryOperationBgpLeftDeepSmallestSort.sortPatterns(\n      patternOutputs.map((output: IActorQueryOperationOutputBindings, i: number) =>\n        ({ input: pattern.patterns[i], output, meta: metadatas[i] })),\n    );\n\n    // Close the non-smallest streams\n    for (let i = 1; i < outputMetaTuples.length; i++) {\n      outputMetaTuples[i].output.bindingsStream.close();\n    }\n\n    // Take the pattern with the smallest number of items\n    const smallestPattern: IOutputMetaTuple = outputMetaTuples.slice(0)[0];\n    outputMetaTuples.splice(0, 1);\n\n    // Materialize the remaining patterns for each binding in the stream.\n    const bindingsStream: BindingsStream = ActorQueryOperationBgpLeftDeepSmallestSort.createLeftDeepStream(\n      smallestPattern.output.bindingsStream,\n      outputMetaTuples.map(pat => pat.input),\n      async(patterns: Algebra.Pattern[]) => {\n        // Send the materialized patterns to the mediator for recursive BGP evaluation.\n        const operation: Algebra.Bgp = { type: 'bgp', patterns };\n        return ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation, context }))\n          .bindingsStream;\n      },\n    );\n\n    // Prepare variables and metadata\n    const variables: string[] = ActorQueryOperationBgpLeftDeepSmallestSort.getCombinedVariables(patternOutputs);\n    const metadata = (): Promise<Record<string, any>> => Promise.resolve({\n      totalItems: ActorQueryOperationBgpLeftDeepSmallestSort.estimateCombinedTotalItems(smallestPattern.meta,\n        outputMetaTuples.map(pat => pat.meta)),\n    });\n\n    return { type: 'bindings', bindingsStream, variables, metadata, canContainUndefs: false };\n  }\n}\n\nexport interface IOutputMetaTuple {\n  input: Algebra.Pattern;\n  output: IActorQueryOperationOutputBindings;\n  meta?: Record<string, any>;\n}\n"]}