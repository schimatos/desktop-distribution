{"version":3,"file":"ActorQueryOperationBgpSingle.js","sourceRoot":"","sources":["ActorQueryOperationBgpSingle.ts"],"names":[],"mappings":";;;AACA,uEAGuC;AAIvC;;GAEG;AACH,MAAa,4BAA6B,SAAQ,sDAA6C;IAC7F,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAoB,EAAE,OAAsB;QACrE,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,kDAAkD,CAAC,CAAC;SACvF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,YAAY,CAAC,OAAoB,EAAE,OAAsB;QAC9D,wEAAwE;QACxE,IAAI,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,oDAA8B,CAAC,EAAE;YAC1D,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,oDAA8B,CAAC,CAAC;YAC9D,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,oDAA8B,CAAC,CAAC;YACzD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,wDAAkC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SACzE;QAED,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IAC1F,CAAC;CACF;AAtBD,oEAsBC","sourcesContent":["import type { IActorQueryOperationOutput, IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperationTypedMediated,\n  KEY_CONTEXT_BGP_PARENTMETADATA, KEY_CONTEXT_PATTERN_PARENTMETADATA,\n} from '@comunica/bus-query-operation';\nimport type { ActionContext, IActorTest } from '@comunica/core';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Query Operation Actor for BGPs with a single pattern.\n */\nexport class ActorQueryOperationBgpSingle extends ActorQueryOperationTypedMediated<Algebra.Bgp> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'bgp');\n  }\n\n  public async testOperation(pattern: Algebra.Bgp, context: ActionContext): Promise<IActorTest> {\n    if (pattern.patterns.length !== 1) {\n      throw new Error(`Actor ${this.name} can only operate on BGPs with a single pattern.`);\n    }\n    return true;\n  }\n\n  public runOperation(pattern: Algebra.Bgp, context: ActionContext): Promise<IActorQueryOperationOutput> {\n    // If we have parent metadata, extract the single parent metadata entry.\n    if (context && context.has(KEY_CONTEXT_BGP_PARENTMETADATA)) {\n      const metadatas = context.get(KEY_CONTEXT_BGP_PARENTMETADATA);\n      context = context.delete(KEY_CONTEXT_BGP_PARENTMETADATA);\n      context = context.set(KEY_CONTEXT_PATTERN_PARENTMETADATA, metadatas[0]);\n    }\n\n    return this.mediatorQueryOperation.mediate({ operation: pattern.patterns[0], context });\n  }\n}\n"]}