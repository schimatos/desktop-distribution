{"version":3,"file":"ActorQueryOperationConstruct.js","sourceRoot":"","sources":["ActorQueryOperationConstruct.ts"],"names":[],"mappings":";;;AAGA,uEAGuC;AAIvC,yCAA8D;AAE9D,uEAAoE;AAEpE;;GAEG;AACH,MAAa,4BAA6B,SAAQ,sDAAmD;IACnG,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,YAAY,CAAC,QAAwB;QACjD,OAAO,qBAAS,CAAmB,EAAG,CAAC,MAAM;aAC1C,KAAK,CAAC,EAAE,EAAE,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,wBAAY,CAAC,oBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1E,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAA0B,EAAE,OAAsB;QAC3E,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAA0B,EAAE,OAAsB;QAE1E,yGAAyG;QACzG,MAAM,SAAS,GAAmB,4BAA4B,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC9F,MAAM,SAAS,GAAsB,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC;QAE1F,2BAA2B;QAC3B,MAAM,MAAM,GAAuC,yCAAmB,CAAC,eAAe,CACpF,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAClE,CAAC;QAEF,2DAA2D;QAC3D,MAAM,UAAU,GAA4B,IAAI,iDAAuB,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC;QAEjH,iEAAiE;QACjE,IAAI,QAA0D,CAAC;QAC/D,IAAI,MAAM,CAAC,QAAQ,EAAE;YACnB,QAAQ,GAAG,GAAG,EAAE,CAAuC,MAAM,CAAC,QAAS,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACpF,IAAI,IAAI,CAAC,UAAU,EAAE;oBACnB,uCAAY,IAAI,KAAE,UAAU,EAAE,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC,MAAM,IAAG;iBAC3E;gBACD,OAAO,IAAI,CAAC;YACd,CAAC,CAAC,CAAC;SACJ;QAED,OAAO;YACL,QAAQ;YACR,UAAU;YACV,IAAI,EAAE,OAAO;SACd,CAAC;IACJ,CAAC;CACF;AAlDD,oEAkDC","sourcesContent":["import type { IActorQueryOperationOutputBindings,\n  IActorQueryOperationOutputQuads,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { ActionContext, IActorTest } from '@comunica/core';\nimport type { AsyncIterator } from 'asynciterator';\nimport type * as RDF from 'rdf-js';\nimport { getTerms, getVariables, uniqTerms } from 'rdf-terms';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { BindingsToQuadsIterator } from './BindingsToQuadsIterator';\n\n/**\n * A comunica Construct Query Operation Actor.\n */\nexport class ActorQueryOperationConstruct extends ActorQueryOperationTypedMediated<Algebra.Construct> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'construct');\n  }\n\n  /**\n   * Find all variables in a list of triple patterns.\n   * @param {Algebra.Pattern[]} patterns An array of triple patterns.\n   * @return {RDF.Variable[]} The variables in the triple patterns.\n   */\n  public static getVariables(patterns: RDF.BaseQuad[]): RDF.Variable[] {\n    return uniqTerms((<RDF.Variable[]> []).concat\n      .apply([], patterns.map(pattern => getVariables(getTerms(pattern)))));\n  }\n\n  public async testOperation(pattern: Algebra.Construct, context: ActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.Construct, context: ActionContext):\n  Promise<IActorQueryOperationOutputQuads> {\n    // Apply a projection on our CONSTRUCT variables first, as the query may contain other variables as well.\n    const variables: RDF.Variable[] = ActorQueryOperationConstruct.getVariables(pattern.template);\n    const operation: Algebra.Operation = { type: 'project', input: pattern.input, variables };\n\n    // Evaluate the input query\n    const output: IActorQueryOperationOutputBindings = ActorQueryOperation.getSafeBindings(\n      await this.mediatorQueryOperation.mediate({ operation, context }),\n    );\n\n    // Construct triples using the result based on the pattern.\n    const quadStream: AsyncIterator<RDF.Quad> = new BindingsToQuadsIterator(pattern.template, output.bindingsStream);\n\n    // Let the final metadata contain the estimated number of triples\n    let metadata: (() => Promise<Record<string, any>>) | undefined;\n    if (output.metadata) {\n      metadata = () => (<() => Promise<Record<string, any>>> output.metadata)().then(meta => {\n        if (meta.totalItems) {\n          return { ...meta, totalItems: meta.totalItems * pattern.template.length };\n        }\n        return meta;\n      });\n    }\n\n    return {\n      metadata,\n      quadStream,\n      type: 'quads',\n    };\n  }\n}\n"]}