{"version":3,"file":"ActorQueryOperationDistinctHash.js","sourceRoot":"","sources":["ActorQueryOperationDistinctHash.ts"],"names":[],"mappings":";;;AACA,yFAAkG;AAIlG;;GAEG;AACH,MAAa,+BAAgC,SAAQ,mDAAsC;IAEzF,YAAmB,IAAuC;QACxD,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC1B,CAAC;IAED;;;;SAIK;IACE,aAAa;QAClB,MAAM,MAAM,GAA4B,EAAE,CAAC;QAC3C,OAAO,CAAC,QAAkB,EAAE,EAAE;YAC5B,MAAM,IAAI,GAAW,iDAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACvD,4CAA4C;YAC5C,OAAO,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QACpD,CAAC,CAAC;IACJ,CAAC;CACF;AAnBD,0EAmBC","sourcesContent":["import type { IActorInitRdfDereferencePagedArgs } from '@comunica/actor-abstract-bindings-hash';\nimport { AbstractBindingsHash, AbstractFilterHash } from '@comunica/actor-abstract-bindings-hash';\nimport type { Bindings } from '@comunica/bus-query-operation';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Distinct Hash Query Operation Actor.\n */\nexport class ActorQueryOperationDistinctHash extends AbstractBindingsHash<Algebra.Distinct>\n  implements IActorInitRdfDereferencePagedArgs {\n  public constructor(args: IActorInitRdfDereferencePagedArgs) {\n    super(args, 'distinct');\n  }\n\n  /**\n     * Create a new distinct filter function for the given hash algorithm and digest algorithm.\n     * This will maintain an internal hash datastructure so that every bindings object only returns true once.\n     * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.\n     */\n  public newHashFilter(): (bindings: Bindings) => boolean {\n    const hashes: Record<string, boolean> = {};\n    return (bindings: Bindings) => {\n      const hash: string = AbstractFilterHash.hash(bindings);\n      // eslint-disable-next-line no-return-assign\n      return !(hash in hashes) && (hashes[hash] = true);\n    };\n  }\n}\n"]}