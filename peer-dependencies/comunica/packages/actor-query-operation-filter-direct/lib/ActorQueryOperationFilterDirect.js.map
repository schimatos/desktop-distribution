{"version":3,"file":"ActorQueryOperationFilterDirect.js","sourceRoot":"","sources":["ActorQueryOperationFilterDirect.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA,uEAAsG;AAGtG,uFAAyE;AAEzE;;GAEG;AACH,MAAa,+BAAgC,SAAQ,sDAAgD;IACnG,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAuB;QAChD,6CAA6C;QAC7C,yBAAyB,CAAC,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC9D,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAuB,EAAE,OAAsB;QAEvE,MAAM,MAAM,GAAuC,yCAAmB,CAAC,eAAe,CACpF,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CACjF,CAAC;QACF,yCAAmB,CAAC,mBAAmB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAE5D,MAAM,QAAQ,GAAG,yBAAyB,CAAC,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/E,SAAS,MAAM,CAAC,QAAkB;YAChC,IAAI;gBACF,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAChC,gDAAgD;gBAChD,OAAO,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO,IAAI,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC;aAC/D;YAAC,OAAO,KAAc,EAAE;gBACvB,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACpC,OAAO,KAAK,CAAC;aACd;QACH,CAAC;QACD,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,SAAS,CAAW,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAE/F,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc;YACd,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,gBAAgB,EAAE,MAAM,CAAC,gBAAgB;SAC1C,CAAC;IACJ,CAAC;CACF;AAvCD,0EAuCC","sourcesContent":["import type { Bindings,\n  IActorQueryOperationOutputBindings, IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation, ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { ActionContext, IActorTest } from '@comunica/core';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport * as SparqlExpressionEvaluator from './SparqlExpressionEvaluator';\n\n/**\n * A comunica Filter Direct Query Operation Actor.\n */\nexport class ActorQueryOperationFilterDirect extends ActorQueryOperationTypedMediated<Algebra.Filter> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'filter');\n  }\n\n  public async testOperation(pattern: Algebra.Filter): Promise<IActorTest> {\n    // Will throw error for unsupported operators\n    SparqlExpressionEvaluator.createEvaluator(pattern.expression);\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.Filter, context: ActionContext):\n  Promise<IActorQueryOperationOutputBindings> {\n    const output: IActorQueryOperationOutputBindings = ActorQueryOperation.getSafeBindings(\n      await this.mediatorQueryOperation.mediate({ operation: pattern.input, context }),\n    );\n    ActorQueryOperation.validateQueryOutput(output, 'bindings');\n\n    const exprFunc = SparqlExpressionEvaluator.createEvaluator(pattern.expression);\n    function filter(bindings: Bindings): boolean {\n      try {\n        const term = exprFunc(bindings);\n        // eslint-disable-next-line no-implicit-coercion\n        return !!term && term.value !== 'false' && term.value !== '0';\n      } catch (error: unknown) {\n        bindingsStream.emit('error', error);\n        return false;\n      }\n    }\n    const bindingsStream = output.bindingsStream.transform<Bindings>({ filter, autoStart: false });\n\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata: output.metadata,\n      variables: output.variables,\n      canContainUndefs: output.canContainUndefs,\n    };\n  }\n}\n"]}