{"version":3,"file":"ActorQueryOperationFilterSparqlee.js","sourceRoot":"","sources":["ActorQueryOperationFilterSparqlee.ts"],"names":[],"mappings":";;;AAGA,uEAGuC;AAGvC,uCAA6D;AAE7D;;GAEG;AACH,MAAa,iCAAkC,SAAQ,sDAAgD;IACrG,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAuB,EAAE,OAAsB;QACxE,6CAA6C;QAC7C,MAAM,CAAC,GAAG,IAAI,yBAAc,CAAC,OAAO,CAAC,UAAU,EAC7C,yCAAmB,CAAC,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;QAClF,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAuB,EAAE,OAAsB;QAEvE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QACnG,MAAM,MAAM,GAAG,yCAAmB,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC9D,yCAAmB,CAAC,mBAAmB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAC5D,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;QAEvC,MAAM,MAAM,GAAG,yCAAmB,CAAC,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAC9F,MAAM,SAAS,GAAG,IAAI,yBAAc,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAEjE,MAAM,SAAS,GAAG,KAAK,EAAC,IAAc,EAAE,IAAS,EAAE,IAAkC,EAAiB,EAAE;YACtG,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACnD,IAAI,MAAM,EAAE;oBACV,IAAI,CAAC,IAAI,CAAC,CAAC;iBACZ;aACF;YAAC,OAAO,KAAc,EAAE;gBACvB,IAAI,CAAC,4BAAiB,CAAS,KAAK,CAAC,EAAE;oBACrC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;iBACrC;aACF;YACD,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;QAEF,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,SAAS,CAAW,EAAE,SAAS,EAAE,CAAC,CAAC;QAChF,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAE,SAAS,EAAE,gBAAgB,EAAE,MAAM,CAAC,gBAAgB,EAAE,CAAC;IAC9G,CAAC;CACF;AAvCD,8EAuCC","sourcesContent":["import type { Bindings,\n  IActorQueryOperationOutputBindings,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { ActionContext, IActorTest } from '@comunica/core';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { AsyncEvaluator, isExpressionError } from 'sparqlee';\n\n/**\n * A comunica Filter Sparqlee Query Operation Actor.\n */\nexport class ActorQueryOperationFilterSparqlee extends ActorQueryOperationTypedMediated<Algebra.Filter> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'filter');\n  }\n\n  public async testOperation(pattern: Algebra.Filter, context: ActionContext): Promise<IActorTest> {\n    // Will throw error for unsupported operators\n    const _ = new AsyncEvaluator(pattern.expression,\n      ActorQueryOperation.getExpressionContext(context, this.mediatorQueryOperation));\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.Filter, context: ActionContext):\n  Promise<IActorQueryOperationOutputBindings> {\n    const outputRaw = await this.mediatorQueryOperation.mediate({ operation: pattern.input, context });\n    const output = ActorQueryOperation.getSafeBindings(outputRaw);\n    ActorQueryOperation.validateQueryOutput(output, 'bindings');\n    const { variables, metadata } = output;\n\n    const config = ActorQueryOperation.getExpressionContext(context, this.mediatorQueryOperation);\n    const evaluator = new AsyncEvaluator(pattern.expression, config);\n\n    const transform = async(item: Bindings, next: any, push: (bindings: Bindings) => void): Promise<void> => {\n      try {\n        const result = await evaluator.evaluateAsEBV(item);\n        if (result) {\n          push(item);\n        }\n      } catch (error: unknown) {\n        if (!isExpressionError(<Error> error)) {\n          bindingsStream.emit('error', error);\n        }\n      }\n      next();\n    };\n\n    const bindingsStream = output.bindingsStream.transform<Bindings>({ transform });\n    return { type: 'bindings', bindingsStream, metadata, variables, canContainUndefs: output.canContainUndefs };\n  }\n}\n"]}