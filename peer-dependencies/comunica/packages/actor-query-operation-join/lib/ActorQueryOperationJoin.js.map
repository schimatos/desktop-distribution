{"version":3,"file":"ActorQueryOperationJoin.js","sourceRoot":"","sources":["ActorQueryOperationJoin.ts"],"names":[],"mappings":";;;AAEA,uEAAsG;AAMtG;;GAEG;AACH,MAAa,uBAAwB,SAAQ,sDAA8C;IAIzF,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAqB,EAAE,OAAsB;QACtE,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAqB,EAAE,OAAsB;QACrE,MAAM,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;QACvF,MAAM,KAAK,GAAG,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAEzF,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YAC/B,OAAO,EAAE,CAAE,yCAAmB,CAAC,eAAe,CAAC,MAAM,IAAI,CAAC,EAAE,yCAAmB,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,CAAE;SAC/G,CAAC,CAAC;IACL,CAAC;CACF;AApBD,0DAoBC","sourcesContent":["import type { IActorQueryOperationOutput,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation, ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { ActorRdfJoin, IActionRdfJoin } from '@comunica/bus-rdf-join';\nimport type { ActionContext, IActorTest, Mediator } from '@comunica/core';\nimport type { IMediatorTypeIterations } from '@comunica/mediatortype-iterations';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Join Query Operation Actor.\n */\nexport class ActorQueryOperationJoin extends ActorQueryOperationTypedMediated<Algebra.Join> {\n  public readonly mediatorJoin: Mediator<ActorRdfJoin,\n  IActionRdfJoin, IMediatorTypeIterations, IActorQueryOperationOutput>;\n\n  public constructor(args: IActorQueryOperationJoinArgs) {\n    super(args, 'join');\n  }\n\n  public async testOperation(pattern: Algebra.Join, context: ActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.Join, context: ActionContext): Promise<IActorQueryOperationOutput> {\n    const left = this.mediatorQueryOperation.mediate({ operation: pattern.left, context });\n    const right = this.mediatorQueryOperation.mediate({ operation: pattern.right, context });\n\n    return this.mediatorJoin.mediate({\n      entries: [ ActorQueryOperation.getSafeBindings(await left), ActorQueryOperation.getSafeBindings(await right) ],\n    });\n  }\n}\n\nexport interface IActorQueryOperationJoinArgs extends IActorQueryOperationTypedMediatedArgs {\n  mediatorJoin: Mediator<ActorRdfJoin, IActionRdfJoin, IMediatorTypeIterations, IActorQueryOperationOutput>;\n}\n"]}