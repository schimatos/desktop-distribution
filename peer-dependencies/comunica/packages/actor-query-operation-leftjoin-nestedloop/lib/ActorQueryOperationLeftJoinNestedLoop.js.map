{"version":3,"file":"ActorQueryOperationLeftJoinNestedLoop.js","sourceRoot":"","sources":["ActorQueryOperationLeftJoinNestedLoop.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Bindings, IActorQueryOperationOutputBindings,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation, ActorQueryOperationTypedMediated, getMetadata,\n} from '@comunica/bus-query-operation';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { ActionContext, IActorTest } from '@comunica/core';\nimport type { AsyncIterator } from 'asynciterator';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { AsyncEvaluator, isExpressionError } from 'sparqlee';\n\n/**\n * A comunica LeftJoin NestedLoop Query Operation Actor.\n */\nexport class ActorQueryOperationLeftJoinNestedLoop extends ActorQueryOperationTypedMediated<Algebra.LeftJoin> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'leftjoin');\n  }\n\n  public async testOperation(pattern: Algebra.LeftJoin, context: ActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.LeftJoin, context: ActionContext):\n  Promise<IActorQueryOperationOutputBindings> {\n    const leftRaw = await this.mediatorQueryOperation.mediate({ operation: pattern.left, context });\n    const left = ActorQueryOperation.getSafeBindings(leftRaw);\n    const rightRaw = await this.mediatorQueryOperation.mediate({ operation: pattern.right, context });\n    const right = ActorQueryOperation.getSafeBindings(rightRaw);\n\n    // TODO: refactor custom handling of pattern.expression. Should be pushed on the bus instead as a filter operation.\n    const config = { ...ActorQueryOperation.getExpressionContext(context) };\n    const evaluator = pattern.expression ?\n      new AsyncEvaluator(pattern.expression, config) :\n      null;\n\n    const leftJoinInner = (outerItem: Bindings, innerStream: AsyncIterator<Bindings>):\n    AsyncIterator<{ joinedBindings: Bindings; result: boolean }> => innerStream\n      .transform<{ joinedBindings: Bindings; result: boolean }>({\n      async transform(innerItem: Bindings, nextInner: any, push) {\n        const joinedBindings = ActorRdfJoin.join(outerItem, innerItem);\n        if (!joinedBindings) {\n          nextInner();\n          return;\n        }\n        if (!evaluator) {\n          push({ joinedBindings, result: true });\n          nextInner();\n          return;\n        }\n        try {\n          const result = await evaluator.evaluateAsEBV(joinedBindings);\n          push({ joinedBindings, result });\n        } catch (error: unknown) {\n          if (!isExpressionError(<Error> error)) {\n            bindingsStream.emit('error', error);\n          }\n        }\n        nextInner();\n      },\n    });\n\n    const leftJoinOuter = (leftItem: Bindings, nextLeft: any, push: (bindings: Bindings) => void): void => {\n      const innerStream = right.bindingsStream.clone();\n      const joinedStream = leftJoinInner(leftItem, innerStream);\n\n      // TODO: This will not work for larger streams.\n      // The full inner stream is kept in memory.\n      joinedStream.on('end', () => nextLeft());\n      joinedStream.on('data', async({ joinedBindings, result }) => {\n        if (result) {\n          push(joinedBindings);\n        }\n      });\n    };\n\n    const transform = leftJoinOuter;\n    const bindingsStream = left.bindingsStream\n      .transform<Bindings>({ optional: true, transform });\n\n    const variables = ActorRdfJoin.joinVariables({ entries: [ left, right ]});\n    const metadata = (): Promise<Record<string, any>> => Promise.all([ left, right ].map(x => getMetadata(x)))\n      .then(metadatas => metadatas.reduce((acc, val) => acc * val.totalItems, 1))\n      .catch(() => Infinity)\n      .then(totalItems => ({ totalItems }));\n\n    return { type: 'bindings', bindingsStream, metadata, variables, canContainUndefs: true };\n  }\n}\n"]}