{"version":3,"file":"ActorQueryOperationPathAlt.js","sourceRoot":"","sources":["ActorQueryOperationPathAlt.ts"],"names":[],"mappings":";;;AAAA,uEAAkE;AAGlE,uEAEuC;AAEvC,iDAA8C;AAC9C,qDAA0C;AAE1C;;GAEG;AACH,MAAa,0BAA2B,SAAQ,uCAAiB;IAC/D,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,yBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,IAAkB,EAAE,OAAsB;QAClE,MAAM,SAAS,GAAiB,IAAI,CAAC,SAAS,CAAC;QAE/C,MAAM,aAAa,GAAyC,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC;YAC7E,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;gBAClC,OAAO;gBACP,SAAS,EAAE,uCAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC;aACvG,CAAC;YACF,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;gBAClC,OAAO;gBACP,SAAS,EAAE,uCAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC;aACxG,CAAC;SACH,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,yCAAmB,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;QAEvD,MAAM,cAAc,GAAG,IAAI,6BAAa,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,cAAc,CAAC,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAC3G,MAAM,SAAS,GAAe,EAAG,CAAC,MAAM;aACrC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QACpD,aAAa;QACb,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,SAAS,EAAE,CAAE,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAE,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC;IAC7G,CAAC;CACF;AAzBD,gEAyBC","sourcesContent":["import { ActorAbstractPath } from '@comunica/actor-abstract-path';\nimport type { IActorQueryOperationOutputBindings,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n} from '@comunica/bus-query-operation';\nimport type { ActionContext } from '@comunica/core';\nimport { UnionIterator } from 'asynciterator';\nimport { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Path Alt Query Operation Actor.\n */\nexport class ActorQueryOperationPathAlt extends ActorAbstractPath {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, Algebra.types.ALT);\n  }\n\n  public async runOperation(path: Algebra.Path, context: ActionContext): Promise<IActorQueryOperationOutputBindings> {\n    const predicate = <Algebra.Alt> path.predicate;\n\n    const subOperations: IActorQueryOperationOutputBindings[] = (await Promise.all([\n      this.mediatorQueryOperation.mediate({\n        context,\n        operation: ActorAbstractPath.FACTORY.createPath(path.subject, predicate.left, path.object, path.graph),\n      }),\n      this.mediatorQueryOperation.mediate({\n        context,\n        operation: ActorAbstractPath.FACTORY.createPath(path.subject, predicate.right, path.object, path.graph),\n      }),\n    ])).map(op => ActorQueryOperation.getSafeBindings(op));\n\n    const bindingsStream = new UnionIterator(subOperations.map(op => op.bindingsStream), { autoStart: false });\n    const variables = (<string[]> []).concat\n      .apply([], subOperations.map(op => op.variables));\n    // @ts-ignore\n    return { type: 'bindings', bindingsStream, variables: [ ...new Set(variables) ], canContainUndefs: false };\n  }\n}\n"]}