{"version":3,"file":"ActorQueryOperationPathNps.js","sourceRoot":"","sources":["ActorQueryOperationPathNps.ts"],"names":[],"mappings":";;;AAAA,uEAAkE;AAGlE,uEAEuC;AAEvC,2CAA0C;AAC1C,qDAA0C;AAE1C;;GAEG;AACH,MAAa,0BAA2B,SAAQ,uCAAiB;IAC/D,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,yBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,IAAkB,EAAE,OAAsB;QAClE,MAAM,SAAS,GAAiB,IAAI,CAAC,SAAS,CAAC;QAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,SAAS,GAAG,yBAAY,CAAC,KAAK,CAAC,CAAC;QAEtC,MAAM,OAAO,GAAG,uCAAiB,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACtG,MAAM,MAAM,GAAG,yCAAmB,CAAC,eAAe,CAChD,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAC3E,CAAC;QAEF,qDAAqD;QACrD,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,SAAS,CAAW;YAC/D,MAAM,CAAC,QAAQ;gBACb,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC1E,CAAC;YACD,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI;gBACxB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC7B,IAAI,EAAE,CAAC;YACT,CAAC;SACF,CAAC,CAAC;QAEH,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC;IACpG,CAAC;CACF;AA5BD,gEA4BC","sourcesContent":["import { ActorAbstractPath } from '@comunica/actor-abstract-path';\nimport type { Bindings, IActorQueryOperationOutputBindings,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n} from '@comunica/bus-query-operation';\nimport type { ActionContext } from '@comunica/core';\nimport { termToString } from 'rdf-string';\nimport { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Path Nps Query Operation Actor.\n */\nexport class ActorQueryOperationPathNps extends ActorAbstractPath {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, Algebra.types.NPS);\n  }\n\n  public async runOperation(path: Algebra.Path, context: ActionContext): Promise<IActorQueryOperationOutputBindings> {\n    const predicate = <Algebra.Nps> path.predicate;\n    const blank = this.generateVariable(path);\n    const blankName = termToString(blank);\n\n    const pattern = ActorAbstractPath.FACTORY.createPattern(path.subject, blank, path.object, path.graph);\n    const output = ActorQueryOperation.getSafeBindings(\n      await this.mediatorQueryOperation.mediate({ operation: pattern, context }),\n    );\n\n    // Remove the generated blank nodes from the bindings\n    const bindingsStream = output.bindingsStream.transform<Bindings>({\n      filter(bindings) {\n        return !predicate.iris.some(iri => iri.equals(bindings.get(blankName)));\n      },\n      transform(item, next, push) {\n        push(item.delete(blankName));\n        next();\n      },\n    });\n\n    return { type: 'bindings', bindingsStream, variables: output.variables, canContainUndefs: false };\n  }\n}\n"]}