{"version":3,"file":"ActorQueryOperationPathOneOrMore.js","sourceRoot":"","sources":["ActorQueryOperationPathOneOrMore.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActorAbstractPath } from '@comunica/actor-abstract-path';\nimport type { IActorQueryOperationOutputBindings,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  Bindings,\n} from '@comunica/bus-query-operation';\nimport type { ActionContext } from '@comunica/core';\nimport { BufferedIterator, MultiTransformIterator, TransformIterator } from 'asynciterator';\n\nimport type { Term } from 'rdf-js';\nimport { termToString } from 'rdf-string';\nimport { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Path OneOrMore Query Operation Actor.\n */\nexport class ActorQueryOperationPathOneOrMore extends ActorAbstractPath {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, Algebra.types.ONE_OR_MORE_PATH);\n  }\n\n  public async runOperation(path: Algebra.Path, context: ActionContext): Promise<IActorQueryOperationOutputBindings> {\n    const distinct = await this.isPathArbitraryLengthDistinct(context, path);\n    if (distinct.operation) {\n      return distinct.operation;\n    }\n\n    context = distinct.context;\n\n    const predicate = <Algebra.OneOrMorePath> path.predicate;\n\n    const sVar = path.subject.termType === 'Variable';\n    const oVar = path.object.termType === 'Variable';\n    const gVar = path.graph.termType === 'Variable';\n\n    if (!sVar && oVar) {\n      // Get all the results of applying this once, then do zeroOrMore for those\n      const single = ActorAbstractPath.FACTORY.createDistinct(\n        ActorAbstractPath.FACTORY.createPath(path.subject, predicate.path, path.object, path.graph),\n      );\n      const results = ActorQueryOperation.getSafeBindings(\n        await this.mediatorQueryOperation.mediate({ context, operation: single }),\n      );\n\n      const objectString = termToString(path.object);\n\n      // All branches need to share the same termHashes to prevent duplicates\n      const termHashes = {};\n\n      const bindingsStream: MultiTransformIterator<Bindings, Bindings> = new MultiTransformIterator(\n        results.bindingsStream,\n        {\n          multiTransform: (bindings: Bindings) => {\n            const val = bindings.get(objectString);\n            const graph = gVar ? bindings.get(termToString(path.graph)) : path.graph;\n            return new TransformIterator<Bindings>(\n              async() => {\n                const it = new BufferedIterator<Term>();\n                await this.getObjectsPredicateStar(val,\n                  predicate.path,\n                  path.graph,\n                  context,\n                  termHashes,\n                  it,\n                  { count: 0 });\n                return it.transform<Bindings>({\n                  transform(item, next, push) {\n                    let binding = Bindings({ [objectString]: item });\n                    if (gVar) {\n                      binding = binding.set(termToString(path.graph), graph);\n                    }\n                    push(binding);\n                    next();\n                  },\n                });\n              }, { maxBufferSize: 128 },\n            );\n          },\n          autoStart: false,\n        },\n      );\n      const variables = gVar ? [ objectString, termToString(path.graph) ] : [ objectString ];\n      return { type: 'bindings', bindingsStream, variables, canContainUndefs: false };\n    }\n    if (sVar && oVar) {\n      // Get all the results of subjects with same predicate, but once, then fill in first variable for those\n      const single = ActorAbstractPath.FACTORY.createDistinct(\n        ActorAbstractPath.FACTORY.createPath(path.subject, path.predicate.path, path.object, path.graph),\n      );\n      const results = ActorQueryOperation.getSafeBindings(\n        await this.mediatorQueryOperation.mediate({ context, operation: single }),\n      );\n      const subjectString = termToString(path.subject);\n      const objectString = termToString(path.object);\n\n      const termHashes = {};\n\n      const bindingsStream: MultiTransformIterator<Bindings, Bindings> = new MultiTransformIterator(\n        results.bindingsStream,\n        {\n          multiTransform: (bindings: Bindings) => {\n            const subject = bindings.get(subjectString);\n            const object = bindings.get(objectString);\n            const graph = gVar ? bindings.get(termToString(path.graph)) : path.graph;\n            return new TransformIterator<Bindings>(\n              async() => {\n                const it = new BufferedIterator<Bindings>();\n                await this.getSubjectAndObjectBindingsPredicateStar(\n                  subjectString,\n                  objectString,\n                  subject,\n                  object,\n                  predicate.path,\n                  graph,\n                  context,\n                  termHashes,\n                  {},\n                  it,\n                  { count: 0 },\n                );\n                return it.transform<Bindings>({\n                  transform(item, next, push) {\n                    if (gVar) {\n                      item = item.set(termToString(path.graph), graph);\n                    }\n                    push(item);\n                    next();\n                  },\n                });\n              }, { maxBufferSize: 128 },\n            );\n          },\n          autoStart: false,\n        },\n      );\n      const variables = gVar ?\n        [ subjectString, objectString, termToString(path.graph) ] :\n        [ subjectString, objectString ];\n      return { type: 'bindings', bindingsStream, variables, canContainUndefs: false };\n    }\n    if (sVar && !oVar) {\n      return <Promise<IActorQueryOperationOutputBindings>> this.mediatorQueryOperation.mediate({\n        context,\n        operation: ActorAbstractPath.FACTORY.createPath(\n          path.object,\n          ActorAbstractPath.FACTORY.createOneOrMorePath(\n            ActorAbstractPath.FACTORY.createInv(predicate.path),\n          ),\n          path.subject,\n          path.graph,\n        ),\n      });\n    }\n    // If (!sVar && !oVar)\n    const variable = this.generateVariable();\n    const vString = termToString(variable);\n    const results = ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({\n      context,\n      operation: ActorAbstractPath.FACTORY.createPath(path.subject, predicate, variable, path.graph),\n    }));\n    const bindingsStream = results.bindingsStream.transform<Bindings>({\n      filter: item => item.get(vString).equals(path.object),\n      transform(item, next, push) {\n        const binding = gVar ?\n          Bindings({ [termToString(path.graph)]: item.get(termToString(path.graph)) }) :\n          Bindings({});\n        push(binding);\n        next();\n      },\n    });\n    return {\n      type: 'bindings',\n      bindingsStream,\n      variables: gVar ? [ termToString(path.graph) ] : [],\n      canContainUndefs: false,\n    };\n  }\n}\n\n"]}