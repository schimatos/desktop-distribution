{"version":3,"file":"ActorQueryOperationPathSeq.js","sourceRoot":"","sources":["ActorQueryOperationPathSeq.ts"],"names":[],"mappings":";;;AAAA,uEAAkE;AAGlE,uEAEuC;AAKvC,2CAA0C;AAC1C,qDAA0C;AAC1C;;GAEG;AACH,MAAa,0BAA2B,SAAQ,uCAAiB;IAI/D,YAAmB,IAAiC;QAClD,KAAK,CAAC,IAAI,EAAE,yBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,IAAkB,EAAE,OAAsB;QAClE,MAAM,SAAS,GAAiB,IAAI,CAAC,SAAS,CAAC;QAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,OAAO,GAAG,yBAAY,CAAC,QAAQ,CAAC,CAAC;QAEvC,MAAM,aAAa,GAAyC,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC;YAC7E,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;gBAClC,OAAO,EAAE,SAAS,EAAE,uCAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC;aAC7G,CAAC;YACF,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;gBAClC,OAAO,EAAE,SAAS,EAAE,uCAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC;aAC7G,CAAC;SACH,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,yCAAmB,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;QAEvD,MAAM,IAAI,GAAG,yCAAmB,CAAC,eAAe,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;QAC9G,kDAAkD;QAClD,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAW;YAC7D,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI;gBACxB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC3B,IAAI,EAAE,CAAC;YACT,CAAC;SACF,CAAC,CAAC;QAEH,2DAA2D;QAC3D,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACjC,MAAM,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9C,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAChC,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,SAAS,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC;IAClF,CAAC;CACF;AArCD,gEAqCC","sourcesContent":["import { ActorAbstractPath } from '@comunica/actor-abstract-path';\nimport type { Bindings, IActorQueryOperationOutput, IActorQueryOperationOutputBindings,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n} from '@comunica/bus-query-operation';\nimport type { ActorRdfJoin, IActionRdfJoin } from '@comunica/bus-rdf-join';\nimport type { ActionContext, Mediator } from '@comunica/core';\nimport type { IMediatorTypeIterations } from '@comunica/mediatortype-iterations';\n\nimport { termToString } from 'rdf-string';\nimport { Algebra } from 'sparqlalgebrajs';\n/**\n * A comunica Path Seq Query Operation Actor.\n */\nexport class ActorQueryOperationPathSeq extends ActorAbstractPath {\n  public readonly mediatorJoin: Mediator<ActorRdfJoin,\n  IActionRdfJoin, IMediatorTypeIterations, IActorQueryOperationOutput>;\n\n  public constructor(args: IActorQueryOperationPathSeq) {\n    super(args, Algebra.types.SEQ);\n  }\n\n  public async runOperation(path: Algebra.Path, context: ActionContext): Promise<IActorQueryOperationOutputBindings> {\n    const predicate = <Algebra.Seq> path.predicate;\n    const variable = this.generateVariable(path);\n    const varName = termToString(variable);\n\n    const subOperations: IActorQueryOperationOutputBindings[] = (await Promise.all([\n      this.mediatorQueryOperation.mediate({\n        context, operation: ActorAbstractPath.FACTORY.createPath(path.subject, predicate.left, variable, path.graph),\n      }),\n      this.mediatorQueryOperation.mediate({\n        context, operation: ActorAbstractPath.FACTORY.createPath(variable, predicate.right, path.object, path.graph),\n      }),\n    ])).map(op => ActorQueryOperation.getSafeBindings(op));\n\n    const join = ActorQueryOperation.getSafeBindings(await this.mediatorJoin.mediate({ entries: subOperations }));\n    // Remove the generated variable from the bindings\n    const bindingsStream = join.bindingsStream.transform<Bindings>({\n      transform(item, next, push) {\n        push(item.delete(varName));\n        next();\n      },\n    });\n\n    // Remove the generated variable from the list of variables\n    const variables = join.variables;\n    const indexOfVar = variables.indexOf(varName);\n    variables.splice(indexOfVar, 1);\n    return { type: 'bindings', bindingsStream, variables, canContainUndefs: false };\n  }\n}\n\nexport interface IActorQueryOperationPathSeq extends IActorQueryOperationTypedMediatedArgs {\n  mediatorJoin: Mediator<ActorRdfJoin, IActionRdfJoin, IMediatorTypeIterations, IActorQueryOperationOutput>;\n}\n"]}