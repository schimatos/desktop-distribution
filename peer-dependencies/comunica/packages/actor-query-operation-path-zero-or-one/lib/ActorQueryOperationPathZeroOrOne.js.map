{"version":3,"file":"ActorQueryOperationPathZeroOrOne.js","sourceRoot":"","sources":["ActorQueryOperationPathZeroOrOne.ts"],"names":[],"mappings":";;;AAAA,2FAAwF;AAGxF,uEAGuC;AAEvC,iDAAkD;AAElD,2CAA0C;AAC1C,qDAA0C;AAE1C;;GAEG;AACH,MAAa,gCAAiC,SAAQ,qCAAiB;IACrE,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,yBAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAC9C,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,IAAkB,EAAE,OAAsB;QAClE,MAAM,SAAS,GAA2B,IAAI,CAAC,SAAS,CAAC;QAEzD,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,UAAU,CAAC;QAClD,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,UAAU,CAAC;QAEjD,MAAM,KAAK,GAAe,EAAE,CAAC;QAE7B,wCAAwC;QACxC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;YAClB,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACpC,OAAO;oBACL,IAAI,EAAE,UAAU;oBAChB,cAAc,EAAE,IAAI,iCAAiB,CAAC,8BAAQ,CAAC,EAAE,CAAC,CAAC;oBACnD,SAAS,EAAE,EAAE;oBACb,gBAAgB,EAAE,KAAK;iBACxB,CAAC;aACH;SACF;QAED,IAAI,IAAI,IAAI,IAAI,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;SAClF;QAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,6BAA6B,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACzE,IAAI,QAAQ,CAAC,SAAS,EAAE;YACtB,OAAO,QAAQ,CAAC,SAAS,CAAC;SAC3B;QAED,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QAE3B,IAAI,IAAI,EAAE;YACR,KAAK,CAAC,IAAI,CAAC,8BAAQ,CAAC,EAAE,CAAC,yBAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;SACrE;QAED,IAAI,IAAI,EAAE;YACR,KAAK,CAAC,IAAI,CAAC,8BAAQ,CAAC,EAAE,CAAC,yBAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;SACrE;QAED,MAAM,MAAM,GAAG,yCAAmB,CAAC,eAAe,CAAC,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;YAC3F,OAAO;YACP,SAAS,EAAE,qCAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC;SACvG,CAAC,CAAC,CAAC;QAEJ,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAE5D,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC;IACpG,CAAC;CACF;AArDD,4EAqDC","sourcesContent":["import { ActorAbstractPath } from '@comunica/actor-abstract-path/lib/ActorAbstractPath';\nimport type { IActorQueryOperationOutputBindings,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  Bindings,\n} from '@comunica/bus-query-operation';\nimport type { ActionContext } from '@comunica/core';\nimport { SingletonIterator } from 'asynciterator';\n\nimport { termToString } from 'rdf-string';\nimport { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Path ZeroOrOne Query Operation Actor.\n */\nexport class ActorQueryOperationPathZeroOrOne extends ActorAbstractPath {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, Algebra.types.ZERO_OR_ONE_PATH);\n  }\n\n  public async runOperation(path: Algebra.Path, context: ActionContext): Promise<IActorQueryOperationOutputBindings> {\n    const predicate = <Algebra.ZeroOrOnePath> path.predicate;\n\n    const sVar = path.subject.termType === 'Variable';\n    const oVar = path.object.termType === 'Variable';\n\n    const extra: Bindings[] = [];\n\n    // Both subject and object non-variables\n    if (!sVar && !oVar) {\n      if (path.subject.equals(path.object)) {\n        return {\n          type: 'bindings',\n          bindingsStream: new SingletonIterator(Bindings({})),\n          variables: [],\n          canContainUndefs: false,\n        };\n      }\n    }\n\n    if (sVar && oVar) {\n      throw new Error('ZeroOrOne path expressions with 2 variables not supported yet');\n    }\n\n    const distinct = await this.isPathArbitraryLengthDistinct(context, path);\n    if (distinct.operation) {\n      return distinct.operation;\n    }\n\n    context = distinct.context;\n\n    if (sVar) {\n      extra.push(Bindings({ [termToString(path.subject)]: path.object }));\n    }\n\n    if (oVar) {\n      extra.push(Bindings({ [termToString(path.object)]: path.subject }));\n    }\n\n    const single = ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({\n      context,\n      operation: ActorAbstractPath.FACTORY.createPath(path.subject, predicate.path, path.object, path.graph),\n    }));\n\n    const bindingsStream = single.bindingsStream.prepend(extra);\n\n    return { type: 'bindings', bindingsStream, variables: single.variables, canContainUndefs: false };\n  }\n}\n"]}