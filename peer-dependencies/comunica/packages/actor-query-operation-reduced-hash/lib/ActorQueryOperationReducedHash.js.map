{"version":3,"file":"ActorQueryOperationReducedHash.js","sourceRoot":"","sources":["ActorQueryOperationReducedHash.ts"],"names":[],"mappings":";;;;;;AACA,yFAAkG;AAElG,0DAA4B;AAE5B;;GAEG;AACH,MAAa,8BAA+B,SAAQ,mDAAqC;IAIvF,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACI,aAAa;QAClB,MAAM,MAAM,GAAG,IAAI,mBAAG,CAAkB,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QACjE,OAAO,CAAC,QAAkB,EAAE,EAAE;YAC5B,MAAM,IAAI,GAAW,iDAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACvD,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACrD,CAAC,CAAC;IACJ,CAAC;CACF;AApBD,wEAoBC","sourcesContent":["import type { IActorInitRdfDereferencePagedArgs } from '@comunica/actor-abstract-bindings-hash';\nimport { AbstractBindingsHash, AbstractFilterHash } from '@comunica/actor-abstract-bindings-hash';\nimport type { Bindings } from '@comunica/bus-query-operation';\nimport LRU from 'lru-cache';\nimport type { Algebra } from 'sparqlalgebrajs';\n/**\n * A comunica Reduced Hash Query Operation Actor.\n */\nexport class ActorQueryOperationReducedHash extends AbstractBindingsHash<Algebra.Reduced>\n  implements IActorInitRdfBindingHashArgs {\n  public readonly cacheSize: number;\n\n  public constructor(args: IActorInitRdfBindingHashArgs) {\n    super(args, 'reduced');\n  }\n\n  /**\n   * Create a new distinct filter function for the given hash algorithm and digest algorithm.\n   * This will maintain an internal hash datastructure so that every bindings object only returns true once.\n   * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.\n   */\n  public newHashFilter(): (bindings: Bindings) => boolean {\n    const hashes = new LRU<string, boolean>({ max: this.cacheSize });\n    return (bindings: Bindings) => {\n      const hash: string = AbstractFilterHash.hash(bindings);\n      return !hashes.has(hash) && hashes.set(hash, true);\n    };\n  }\n}\n\nexport interface IActorInitRdfBindingHashArgs extends IActorInitRdfDereferencePagedArgs {\n  cacheSize: number;\n}\n"]}