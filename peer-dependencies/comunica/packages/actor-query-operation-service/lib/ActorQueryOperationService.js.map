{"version":3,"file":"ActorQueryOperationService.js","sourceRoot":"","sources":["ActorQueryOperationService.ts"],"names":[],"mappings":";;;AAEA,uEACkD;AAClD,yFAAiG;AAEjG,yCAA+C;AAC/C,iDAAkD;AAGlD;;;GAGG;AACH,MAAa,0BAA2B,SAAQ,sDAAiD;IAG/F,YAAmB,IAAqC;QACtD,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAwB,EAAE,OAAsB;QACzE,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,KAAK,WAAW,EAAE;YACzC,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,4CAA4C,OAAO,CAAC,IAAI,CAAC,QAAQ,aAAa,CAAC,CAAC;SAC7G;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAwB,EAAE,OAAsB;QAExE,MAAM,QAAQ,GAAW,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;QAE5C,yDAAyD;QACzD,OAAO,GAAG,OAAO,IAAI,oBAAa,CAAC,EAAE,CAAC,CAAC;QACvC,IAAI,UAAU,GAAkB,OAAO,CAAC,MAAM,CAAC,iDAAkB,CAAC,CAAC,MAAM,CAAC,kDAAmB,CAAC,CAAC;QAC/F,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC;QAChE,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,kDAAmB,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;QAE1F,mBAAmB;QACnB,IAAI,MAA0C,CAAC;QAC/C,IAAI;YACF,MAAM,GAAG,yCAAmB,CAAC,eAAe,CAC1C,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAC7F,CAAC;SACH;QAAC,OAAO,KAAc,EAAE;YACvB,IAAI,OAAO,CAAC,MAAM,EAAE;gBAClB,8BAA8B;gBAC9B,MAAM,GAAG;oBACP,cAAc,EAAE,IAAI,iCAAiB,CAAC,8BAAQ,CAAC,EAAE,CAAC,CAAC;oBACnD,IAAI,EAAE,UAAU;oBAChB,SAAS,EAAE,EAAE;oBACb,gBAAgB,EAAE,KAAK;iBACxB,CAAC;aACH;iBAAM;gBACL,MAAM,KAAK,CAAC;aACb;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AA9CD,gEA8CC","sourcesContent":["import type { IActorQueryOperationOutputBindings,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperation, ActorQueryOperationTypedMediated,\n  Bindings } from '@comunica/bus-query-operation';\nimport { KEY_CONTEXT_SOURCE, KEY_CONTEXT_SOURCES } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { IActorTest } from '@comunica/core';\nimport { ActionContext } from '@comunica/core';\nimport { SingletonIterator } from 'asynciterator';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Service Query Operation Actor.\n * It unwraps the SERVICE operation and executes it on the given source.\n */\nexport class ActorQueryOperationService extends ActorQueryOperationTypedMediated<Algebra.Service> {\n  public readonly forceSparqlEndpoint: boolean;\n\n  public constructor(args: IActorQueryOperationServiceArgs) {\n    super(args, 'service');\n  }\n\n  public async testOperation(pattern: Algebra.Service, context: ActionContext): Promise<IActorTest> {\n    if (pattern.name.termType !== 'NamedNode') {\n      throw new Error(`${this.name} can only query services by IRI, while a ${pattern.name.termType} was given.`);\n    }\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.Service, context: ActionContext):\n  Promise<IActorQueryOperationOutputBindings> {\n    const endpoint: string = pattern.name.value;\n\n    // Adjust our context to only have the endpoint as source\n    context = context || ActionContext({});\n    let subContext: ActionContext = context.delete(KEY_CONTEXT_SOURCE).delete(KEY_CONTEXT_SOURCES);\n    const sourceType = this.forceSparqlEndpoint ? 'sparql' : 'auto';\n    subContext = subContext.set(KEY_CONTEXT_SOURCES, [{ type: sourceType, value: endpoint }]);\n\n    // Query the source\n    let output: IActorQueryOperationOutputBindings;\n    try {\n      output = ActorQueryOperation.getSafeBindings(\n        await this.mediatorQueryOperation.mediate({ operation: pattern.input, context: subContext }),\n      );\n    } catch (error: unknown) {\n      if (pattern.silent) {\n        // Emit a single empty binding\n        output = {\n          bindingsStream: new SingletonIterator(Bindings({})),\n          type: 'bindings',\n          variables: [],\n          canContainUndefs: false,\n        };\n      } else {\n        throw error;\n      }\n    }\n\n    return output;\n  }\n}\n\nexport interface IActorQueryOperationServiceArgs extends IActorQueryOperationTypedMediatedArgs {\n  forceSparqlEndpoint: boolean;\n}\n"]}