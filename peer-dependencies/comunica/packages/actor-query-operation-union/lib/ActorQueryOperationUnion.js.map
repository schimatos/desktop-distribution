{"version":3,"file":"ActorQueryOperationUnion.js","sourceRoot":"","sources":["ActorQueryOperationUnion.ts"],"names":[],"mappings":";;;AAGA,uEAGuC;AAEvC,iDAA8C;AAG9C;;GAEG;AACH,MAAa,wBAAyB,SAAQ,sDAA+C;IAC3F,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,cAAc,CAAC,SAAqB;QAChD,MAAM,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAE,GAAG,GAAG,EAAE,GAAG,EAAE,CAAE,EAAE,EAAE,CAAC,CAAC;QAC5E,OAAO,CAAE,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAE,CAAC;IACxC,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,aAAa,CAAC,SAAgC;QAC1D,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,IAAI,QAAQ,CAAC,UAAU,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;gBAC/D,UAAU,IAAI,QAAQ,CAAC,UAAU,CAAC;aACnC;iBAAM;gBACL,UAAU,GAAG,QAAQ,CAAC;gBACtB,MAAM;aACP;SACF;QACD,OAAO,EAAE,UAAU,EAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAsB,EAAE,OAAsB;QACvE,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAsB,EAAE,OAAsB;QAEtE,MAAM,OAAO,GAAyC,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC;YACvE,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC;YACzE,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC;SAC3E,CAAC,CAAC,CAAC,GAAG,CAAC,yCAAmB,CAAC,eAAe,CAAC,CAAC;QAE7C,MAAM,cAAc,GAAmB,IAAI,6BAAa,CAAC,OAAO,CAAC,GAAG,CAClE,CAAC,MAA0C,EAAE,EAAE,CAAC,MAAM,CAAC,cAAc,CACtE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QACzB,MAAM,QAAQ,GAAqD,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YAC7G,GAAG,EAAE,CACH,OAAO,CAAC,GAAG,CAAC;gBAC2B,OAAO,CAAC,CAAC,CAAC,CAAC,QAAS,EAAE;gBACtB,OAAO,CAAC,CAAC,CAAC,CAAC,QAAS,EAAE;aAC5D,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,CAAC,CAAC;YACnD,SAAS,CAAC;QACZ,MAAM,SAAS,GAAa,wBAAwB,CAAC,cAAc,CACjE,OAAO,CAAC,GAAG,CAAC,CAAC,MAA0C,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAC9E,CAAC;QACF,MAAM,gBAAgB,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;QAC1F,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;IACrF,CAAC;CACF;AA9DD,4DA8DC","sourcesContent":["import type { BindingsStream,\n  IActorQueryOperationOutputBindings,\n  IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { ActionContext, IActorTest } from '@comunica/core';\nimport { UnionIterator } from 'asynciterator';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Union Query Operation Actor.\n */\nexport class ActorQueryOperationUnion extends ActorQueryOperationTypedMediated<Algebra.Union> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'union');\n  }\n\n  /**\n   * Takes the union of the given double array variables.\n   * Uniqueness is guaranteed.\n   * @param {string[][]} variables Double array of variables to take the union of.\n   * @return {string[]} The union of the given variables.\n   */\n  public static unionVariables(variables: string[][]): string[] {\n    const withDuplicates = variables.reduce((acc, it) => [ ...acc, ...it ], []);\n    return [ ...new Set(withDuplicates) ];\n  }\n\n  /**\n   * Takes the union of the given metadata array.\n   * It will ensure that the totalItems metadata value is properly calculated.\n   * @param {{[p: string]: any}[]} metadatas Array of metadata.\n   * @return {{[p: string]: any}} Union of the metadata.\n   */\n  public static unionMetadata(metadatas: Record<string, any>[]): Record<string, any> {\n    let totalItems = 0;\n    for (const metadata of metadatas) {\n      if (metadata.totalItems && Number.isFinite(metadata.totalItems)) {\n        totalItems += metadata.totalItems;\n      } else {\n        totalItems = Infinity;\n        break;\n      }\n    }\n    return { totalItems };\n  }\n\n  public async testOperation(pattern: Algebra.Union, context: ActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.Union, context: ActionContext):\n  Promise<IActorQueryOperationOutputBindings> {\n    const outputs: IActorQueryOperationOutputBindings[] = (await Promise.all([\n      this.mediatorQueryOperation.mediate({ operation: pattern.left, context }),\n      this.mediatorQueryOperation.mediate({ operation: pattern.right, context }),\n    ])).map(ActorQueryOperation.getSafeBindings);\n\n    const bindingsStream: BindingsStream = new UnionIterator(outputs.map(\n      (output: IActorQueryOperationOutputBindings) => output.bindingsStream,\n    ), { autoStart: false });\n    const metadata: (() => Promise<Record<string, any>>) | undefined = outputs[0].metadata && outputs[1].metadata ?\n      () =>\n        Promise.all([\n          (<() => Promise<Record<string, any>>>outputs[0].metadata)(),\n          (<() => Promise<Record<string, any>>>outputs[1].metadata)(),\n        ]).then(ActorQueryOperationUnion.unionMetadata) :\n      undefined;\n    const variables: string[] = ActorQueryOperationUnion.unionVariables(\n      outputs.map((output: IActorQueryOperationOutputBindings) => output.variables),\n    );\n    const canContainUndefs = outputs.reduce((acc, val) => acc || val.canContainUndefs, false);\n    return { type: 'bindings', bindingsStream, metadata, variables, canContainUndefs };\n  }\n}\n"]}