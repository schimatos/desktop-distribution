{"version":3,"file":"ActorQueryOperationUpdateCompositeUpdate.js","sourceRoot":"","sources":["ActorQueryOperationUpdateCompositeUpdate.ts"],"names":[],"mappings":";;;AAAA,uEAEmD;AAKnD;;GAEG;AACH,MAAa,wCACX,SAAQ,sDAAyD;IAI/D,YAAmB,IAA2C;QAC9D,KAAK,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAgC,EAAE,OAAsB;QACjF,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAgC,EAAE,OAAsB;QAEhF,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;QACxC,2BAA2B;QAC3B,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO;aACpD,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QAElF,MAAM,mBAAmB,GAAiB,EAAE,CAAC;QAC7C,MAAM,kBAAkB,GAAiB,EAAE,CAAC;QAC5C,KAAK,MAAM,MAAM,IAAI,aAAa,EAAE;YAClC,MAAM,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,GAAG,yCAAmB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC5F,IAAI,kBAAkB,EAAE;gBACtB,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;aAC9C;YACD,IAAI,iBAAiB,EAAE;gBACrB,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;aAC5C;SACF;QAED,OAAO;YACL,IAAI,EAAE,QAAQ;YACd,kBAAkB,EAAE,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,mBAAmB,EAAE,CAAC,CAAC,CAAC,KAAK;YACtG,iBAAiB,EAAE,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC,KAAK;SACrG,CAAC;IACJ,CAAC;CACF;AAtCD,4FAsCC","sourcesContent":["import { ActorQueryOperation, ActorQueryOperationTypedMediated, IActorQueryOperationOutput,\n  IActorQueryOperationTypedMediatedArgs, \n  QuadStream} from '@comunica/bus-query-operation';\nimport { IActionRdfJoinQuads, IActorRdfJoinQuadsOutput } from '@comunica/bus-rdf-join-quads';\nimport { ActionContext, Actor, IActorTest, Mediator } from '@comunica/core';\nimport { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Update CompositeUpdate Query Operation Actor.\n */\nexport class ActorQueryOperationUpdateCompositeUpdate\n  extends ActorQueryOperationTypedMediated<Algebra.CompositeUpdate> {\n    public readonly mediatorJoinQuads: Mediator<Actor<IActionRdfJoinQuads, IActorTest, IActorRdfJoinQuadsOutput>,\n    IActionRdfJoinQuads, IActorTest, IActorRdfJoinQuadsOutput>;\n  \n    public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'compositeupdate');\n  }\n\n  public async testOperation(pattern: Algebra.CompositeUpdate, context: ActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.CompositeUpdate, context: ActionContext):\n  Promise<IActorQueryOperationOutput> {\n    console.log(\"running composite update\");\n    // TODO: create transaction\n    const updateResults = await Promise.all(pattern.updates\n      .map(operation => this.mediatorQueryOperation.mediate({ operation, context })));\n    \n    const quadStreamsInserted: QuadStream[] = [];\n    const quadStreamsDeleted: QuadStream[] = [];\n    for (const update of updateResults) {\n      const { quadStreamInserted, quadStreamDeleted } = ActorQueryOperation.getSafeUpdate(update);\n      if (quadStreamInserted) {\n        quadStreamsInserted.push(quadStreamInserted);\n      }\n      if (quadStreamDeleted) {\n        quadStreamsDeleted.push(quadStreamDeleted);\n      }\n    }\n\n    return {\n      type: 'update',\n      quadStreamInserted: (await this.mediatorJoinQuads.mediate({ quadStreams: quadStreamsInserted })).quads,\n      quadStreamDeleted: (await this.mediatorJoinQuads.mediate({ quadStreams: quadStreamsDeleted })).quads,\n    };\n  }\n}\n"]}