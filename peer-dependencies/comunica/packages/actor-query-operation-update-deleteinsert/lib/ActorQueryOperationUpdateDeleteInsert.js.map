{"version":3,"file":"ActorQueryOperationUpdateDeleteInsert.js","sourceRoot":"","sources":["ActorQueryOperationUpdateDeleteInsert.ts"],"names":[],"mappings":";;;AAAA,+FAAoF;AACpF,uEAGuC;AAGvC,iDAAiE;AAIjE;;GAEG;AACH,MAAa,qCAAsC,SAAQ,sDAAsD;IAI/G,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAA6B,EAAE,OAAsB;QAC9E,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAA6B,EAAE,OAAsB;QAE7E,4BAA4B;QAC5B,MAAM,aAAa,GAAmB,OAAO,CAAC,KAAK,CAAC,CAAC;YACnD,yCAAmB,CAAC,eAAe,CAAC,MAAM,IAAI,CAAC,sBAAsB;iBAClE,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;YACnE,IAAI,iCAAiB,CAAC,8BAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QAEtC,2DAA2D;QAC3D,IAAI,gBAAqD,CAAC;QAC1D,IAAI,gBAAqD,CAAC;QAC1D,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,gBAAgB,GAAG,IAAI,yDAAuB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;SACvF;QACD,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,gBAAgB,GAAG,IAAI,yDAAuB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;SACvF;QAED,yCAAyC;QACzC,oCAAoC;QACpC,sBAAsB;QACtB,KAAK;QACL,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACjB,wDAAwD;QACxD,sCAAsC;QACtC,iBAAiB;QACjB,sCAAsC;QACtC,MAAM,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;YAC1F,gBAAgB;YAChB,gBAAgB;YAChB,OAAO;SACR,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACjB,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;YACpC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACnB,CAAC,EAAC;QACF,mCAAmC;QAEnC,OAAO;YACL,IAAI,EAAE,QAAQ;YACd,kBAAkB;YAClB,iBAAiB;SAClB,CAAC;IACJ,CAAC;CACF;AAxDD,sFAwDC","sourcesContent":["import { BindingsToQuadsIterator } from '@comunica/actor-query-operation-construct';\nimport {\n  ActorQueryOperation, ActorQueryOperationTypedMediated, Bindings, BindingsStream, IActorQueryOperationOutput,\n  IActorQueryOperationTypedMediatedArgs,\n} from '@comunica/bus-query-operation';\nimport { IActionRdfUpdateQuads, IActorRdfUpdateQuadsOutput } from '@comunica/bus-rdf-update-quads';\nimport { ActionContext, Actor, IActorTest, Mediator } from '@comunica/core';\nimport { AsyncIterator, SingletonIterator } from 'asynciterator';\nimport * as RDF from 'rdf-js';\nimport { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Update DeleteInsert Query Operation Actor.\n */\nexport class ActorQueryOperationUpdateDeleteInsert extends ActorQueryOperationTypedMediated<Algebra.DeleteInsert> {\n  public readonly mediatorRdfUpdateQuads: Mediator<Actor<IActionRdfUpdateQuads, IActorTest, IActorRdfUpdateQuadsOutput>,\n  IActionRdfUpdateQuads, IActorTest, IActorRdfUpdateQuadsOutput>;\n  \n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'deleteinsert');\n  }\n\n  public async testOperation(pattern: Algebra.DeleteInsert, context: ActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.DeleteInsert, context: ActionContext):\n  Promise<IActorQueryOperationOutput> {\n    // Evaluate the where clause\n    const whereBindings: BindingsStream = pattern.where ?\n      ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation\n        .mediate({ operation: pattern.where, context })).bindingsStream :\n      new SingletonIterator(Bindings({}));\n\n    // Construct triples using the result based on the pattern.\n    let quadStreamInsert: AsyncIterator<RDF.Quad> | undefined;\n    let quadStreamDelete: AsyncIterator<RDF.Quad> | undefined;\n    if (pattern.insert) {\n      quadStreamInsert = new BindingsToQuadsIterator(pattern.insert, whereBindings.clone());\n    }\n    if (pattern.delete) {\n      quadStreamDelete = new BindingsToQuadsIterator(pattern.delete, whereBindings.clone());\n    }\n    \n    // quadStreamInsert?.on('data', quad => {\n    //   console.log(\"Quad found in on\")\n    //   console.log(quad)\n    // })\n    console.log(\"HO\")\n    // console.log(\"quadStreamInsert is \", quadStreamInsert)\n    // const q = quadStreamInsert?.read();\n    // console.log(q)\n    // Evaluate the required modifications\n    const { quadStreamInserted, quadStreamDeleted } = await this.mediatorRdfUpdateQuads.mediate({\n      quadStreamInsert,\n      quadStreamDelete,\n      context,\n    });\n    console.log(\"HI\")\n    quadStreamInserted?.on('data', quad => {\n      console.log(quad)\n    })\n    // console.log(quadStreamInserted);\n\n    return {\n      type: 'update',\n      quadStreamInserted,\n      quadStreamDeleted,\n    };\n  }\n}\n"]}