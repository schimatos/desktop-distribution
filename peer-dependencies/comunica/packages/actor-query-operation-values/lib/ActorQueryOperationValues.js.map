{"version":3,"file":"ActorQueryOperationValues.js","sourceRoot":"","sources":["ActorQueryOperationValues.ts"],"names":[],"mappings":";;;AAEA,uEAAmF;AAGnF,iDAA8C;AAC9C,2CAA0C;AAG1C;;GAEG;AACH,MAAa,yBAA0B,SAAQ,8CAAwC;IACrF,YAAmB,IAA+E;QAChG,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAuB,EAAE,OAAsB;QACxE,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAuB,EAAE,OAAsB;QAEvE,MAAM,cAAc,GAAmB,IAAI,6BAAa,CAAW,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,8BAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3G,MAAM,QAAQ,GAAG,GAAiC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAC9G,MAAM,SAAS,GAAa,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,yBAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,MAAM,gBAAgB,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;QAChH,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;IACrF,CAAC;CACF;AAjBD,8DAiBC","sourcesContent":["import type { IActionQueryOperation,\n  IActorQueryOperationOutput, IActorQueryOperationOutputBindings, BindingsStream } from '@comunica/bus-query-operation';\nimport { ActorQueryOperationTyped, Bindings } from '@comunica/bus-query-operation';\n\nimport type { ActionContext, IActorArgs, IActorTest } from '@comunica/core';\nimport { ArrayIterator } from 'asynciterator';\nimport { termToString } from 'rdf-string';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Values Query Operation Actor.\n */\nexport class ActorQueryOperationValues extends ActorQueryOperationTyped<Algebra.Values> {\n  public constructor(args: IActorArgs<IActionQueryOperation, IActorTest, IActorQueryOperationOutput>) {\n    super(args, 'values');\n  }\n\n  public async testOperation(pattern: Algebra.Values, context: ActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.Values, context: ActionContext):\n  Promise<IActorQueryOperationOutputBindings> {\n    const bindingsStream: BindingsStream = new ArrayIterator<Bindings>(pattern.bindings.map(x => Bindings(x)));\n    const metadata = (): Promise<Record<string, any>> => Promise.resolve({ totalItems: pattern.bindings.length });\n    const variables: string[] = pattern.variables.map(x => termToString(x));\n    const canContainUndefs = pattern.bindings.some(bindings => variables.some(variable => !(variable in bindings)));\n    return { type: 'bindings', bindingsStream, metadata, variables, canContainUndefs };\n  }\n}\n"]}