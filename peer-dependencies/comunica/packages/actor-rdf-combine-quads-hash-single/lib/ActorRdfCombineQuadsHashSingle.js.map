{"version":3,"file":"ActorRdfCombineQuadsHashSingle.js","sourceRoot":"","sources":["ActorRdfCombineQuadsHashSingle.ts"],"names":[],"mappings":"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","sourcesContent":["import type { QuadStream } from '@comunica/bus-query-operation';\nimport type { IActionRdfCombineQuads, IActorRdfCombineQuadsOutput, IQuadStreamUpdate } from '@comunica/bus-rdf-combine-quads';\nimport { ActorRdfCombineQuads } from '@comunica/bus-rdf-combine-quads';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\nimport { AsyncIterator } from 'asynciterator';\nimport { sha1 } from 'hash.js';\nimport type * as RDF from 'rdf-js';\nimport { quadToStringQuad } from 'rdf-string';\n\n\n/**\n * A comunica Hash, single iteration of each stream RDF Combine Quads Actor.\n */\nexport class ActorRdfCombineQuadsHashSingle extends ActorRdfCombineQuads {\n  public constructor(args: IActorArgs<IActionRdfCombineQuads, IActorTest, IActorRdfCombineQuadsOutput>) {\n    super(args);\n  }\n\n  protected canTrackChanges = true;\n  protected canMaintainOrder = true;\n  protected canAvoidDuplicates = true;\n  protected limitInsertsMin = 0;\n  protected limitInsertsMax = Infinity;\n  protected limitDeletesMin = 0;\n  protected limitDeletesMax = Infinity;\n\n  /**\n   * Create a string-based hash of the given object.\n   * @param quad The quad to hash\n   * @return {string} The object's hash.\n   */\n  public static hash(quad: RDF.Quad): string {\n    return sha1()\n      .update(require('canonicalize')(quadToStringQuad(quad)))\n      .digest('hex');\n  }\n\n  /**\n   * Gets the number of 'iterations' over streams required to complete\n   * this operation. Insert operations are iterated (at most) twice and the delete\n   * and base streams are iterated over once each.\n   * @param inserts The number of insert operations\n   * @param deletes The number of delete operations\n   * @param hasBase Whether there is a base quad stream\n   */\n  public async getIterations(inserts: number, deletes: number, hasBase?: boolean): Promise<number> {\n    // Odgy\n    return inserts + deletes + (hasBase ? 1 : 0);\n  }\n\n  /**\n   *\n   * @param action\n   */\n  public async getOutput(quads: QuadStream, updates: IQuadStreamUpdate[]): Promise<IActorRdfCombineQuadsOutput> {\n    console.log('start of output', updates, quads)\n    const deletions: (Record<string, boolean> | undefined)[] = [];\n    const added: Record<string, boolean> = {};\n    let quadStreamDeleted: QuadStream = new AsyncIterator<RDF.Quad>();\n    let quadStreamInserted: QuadStream = new AsyncIterator<RDF.Quad>();\n\n    for (const update of updates) {\n      if (update.type === 'delete') {\n        const hashes: Record<string, boolean> = {};\n        update.quadStream.forEach(quad => {\n          hashes[ActorRdfCombineQuadsHashSingle.hash(quad)] = true;\n        });\n      } else {\n        console.log('inside else')\n        deletions.push(undefined);\n      }\n    }\n    quads = quads.filter(quad => {\n      if (deletions.every(hashes => !hashes?.[ActorRdfCombineQuadsHashSingle.hash(quad)])) {\n        quadStreamDeleted = quadStreamDeleted.append([quad]);\n        return false;\n      } else {\n        return true;\n      };\n    })\n\n    for (const update of updates) {\n      deletions.splice(0, 1);\n      if (update.type === 'insert') {\n        quadStreamInserted = quadStreamInserted.append(update.quadStream.filter(quad => {\n          const hash = ActorRdfCombineQuadsHashSingle.hash(quad);\n          if (!(hash in added) && deletions.every(hashes => !hashes?.[hash])) {\n            added[hash] = true;\n            return true;\n          }\n          return false;\n        }))\n      }\n    }\n    quads = quads.append(quadStreamInserted);\n    console.log('end of combine')\n    console.log('------------------------------------------------------------------------------------------------')\n    // await new Promise((res, rej) => {\n    //   quads.on('data', data => {console.log(data)});\n    //   quads.on('end', () => {\n    //     console.log('end');\n    //     res(undefined);\n    //   })\n    // })\n    console.log('------------------------------------------------------------------------------------------------')\n    return {\n      quads,\n      quadStreamDeleted,\n      quadStreamInserted\n    }\n  }\n}\n"]}