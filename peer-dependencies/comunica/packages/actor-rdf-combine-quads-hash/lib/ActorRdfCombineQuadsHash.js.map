{"version":3,"file":"ActorRdfCombineQuadsHash.js","sourceRoot":"","sources":["ActorRdfCombineQuadsHash.ts"],"names":[],"mappings":"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","sourcesContent":["import type { QuadStream } from '@comunica/bus-query-operation';\nimport type { IActionRdfCombineQuads, IActorRdfCombineQuadsOutput, IQuadStreamUpdate } from '@comunica/bus-rdf-combine-quads';\nimport { ActorRdfCombineQuads } from '@comunica/bus-rdf-combine-quads';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\nimport { AsyncIterator } from 'asynciterator';\nimport { sha1 } from 'hash.js';\nimport type * as RDF from 'rdf-js';\nimport { quadToStringQuad } from 'rdf-string';\n\n\n/**\n * A comunica Hash, stream RDF Combine Quads Actor.\n */\nexport class ActorRdfCombineQuadsHash extends ActorRdfCombineQuads {\n  public constructor(args: IActorArgs<IActionRdfCombineQuads, IActorTest, IActorRdfCombineQuadsOutput>) {\n    super(args);\n  }\n\n  protected canTrackChanges = true;\n  protected canMaintainOrder = true;\n  protected canAvoidDuplicates = true;\n  protected limitInsertsMin = 0;\n  protected limitInsertsMax = Infinity;\n  protected limitDeletesMin = 0;\n  protected limitDeletesMax = Infinity;\n\n  /**\n   * Create a string-based hash of the given object.\n   * @param quad The quad to hash\n   * @return {string} The object's hash.\n   */\n  public static hash(quad: RDF.Quad): string {\n    return sha1()\n      .update(require('canonicalize')(quadToStringQuad(quad)))\n      .digest('hex');\n  }\n\n  /**\n   * Gets the number of 'iterations' over streams required to complete\n   * this operation. Insert operations are iterated (at most) twice and the delete\n   * and base streams are iterated over once each.\n   * @param inserts The number of insert operations\n   * @param deletes The number of delete operations\n   * @param hasBase Whether there is a base quad stream\n   */\n  public async getIterations(inserts: number, deletes: number, hasBase?: boolean): Promise<number> {\n    return (2 * inserts) + deletes - (hasBase ? 1 : 0);\n  }\n\n  public async getOutput(quads: QuadStream, updates: IQuadStreamUpdate[]): Promise<IActorRdfCombineQuadsOutput> {\n    \n    console.log('get output');\n    \n    let quadStreamInserted = new AsyncIterator<RDF.Quad>();\n    const add: Record<string, boolean> | null = {};\n    const hashes: Record<string, boolean> = {};\n    // let quad: RDF.Quad | null = null;\n    // First we create a hash map of deletions\n    for (const update of updates.reverse()) {\n      if (update.type === 'delete') {\n        update.quadStream.forEach(quad => {\n          hashes[ActorRdfCombineQuadsHash.hash(quad)] = true;\n        });\n      } else {\n        update.quadStream.forEach(quad => {\n          const hash = ActorRdfCombineQuadsHash.hash(quad);\n          if (!(hash in add) &&  !(hash in hashes)) {\n            add[hash] = true;\n            quadStreamInserted.append([ quad ]);\n          }\n        })\n      }\n    }\n\n    const quadStreamDeleted = new AsyncIterator<RDF.Quad>();\n    quads = quads.filter((quad: RDF.Quad) => {\n      const hash = ActorRdfCombineQuadsHash.hash(quad);\n      if (hash in hashes) {\n        quadStreamDeleted.append([ quad ]);\n        return false;\n      }\n      hashes[hash] = true;\n      return true;\n    });\n\n    quadStreamInserted = quadStreamInserted.filter(quad => !(ActorRdfCombineQuadsHash.hash(quad) in hashes));\n    quads.append(quadStreamInserted);\n\n    console.log('end of combine quads');\n\n    return {\n      quadStreamInserted,\n      quadStreamDeleted,\n      quads,\n    };\n  }\n}\n"]}