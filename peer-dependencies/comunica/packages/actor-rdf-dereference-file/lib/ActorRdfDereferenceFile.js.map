{"version":3,"file":"ActorRdfDereferenceFile.js","sourceRoot":"","sources":["ActorRdfDereferenceFile.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAyB;AACzB,6BAA0B;AAC1B,+BAAiC;AAIjC,uEAEuC;AASvC;;GAEG;AACH,MAAa,uBAAwB,SAAQ,sDAAgC;IAK3E,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA6B;QAC7C,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAA;QAClC,IAAI;YACF,MAAM,gBAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CACxB,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CACvF,CAAC;SACH;QAAC,OAAO,KAAc,EAAE;YACvB,MAAM,IAAI,KAAK,CACb,mDAAmD,KAAK,GAAG,CAC5D,CAAC;SACH;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA6B;QAC5C,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAA;QAClC,IAAI,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;QAE3B,oDAAoD;QACpD,IAAI,CAAC,SAAS,EAAE;YACd,SAAS,GAAG,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACxD;QAED,MAAM,WAAW,GAA0B;YACzC,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,MAAM,EAAE;gBACN,OAAO,EAAE,MAAM,CAAC,GAAG;gBACnB,KAAK,EAAE,EAAE,CAAC,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC;aAChG;SACF,CAAC;QACF,IAAI,SAAS,EAAE;YACb,WAAW,CAAC,eAAe,GAAG,SAAS,CAAC;SACzC;QAED,IAAI,WAAiC,CAAC;QACtC,IAAI;YACF,WAAW,GAAG,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC;SACzE;QAAC,OAAO,KAAc,EAAE;YACvB,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;SACnD;QAED,OAAO;YACL,OAAO,EAAE,EAAE;YACX,KAAK,EAAE,IAAI,CAAC,6BAA6B,CAAC,MAAM,EAAE,WAAW,CAAC,KAAK,CAAC;YACpE,OAAO,EAAE,WAAW,CAAC,OAAO;YAC5B,GAAG,EAAE,MAAM,CAAC,GAAG;SAChB,CAAC;IACJ,CAAC;CACF;AAzDD,0DAyDC","sourcesContent":["import * as fs from 'fs';\nimport { URL } from 'url';\nimport { promisify } from 'util';\nimport type { IActionRdfDereference,\n  IActorRdfDereferenceMediaMappingsArgs,\n  IActorRdfDereferenceOutput } from '@comunica/bus-rdf-dereference';\nimport {\n  ActorRdfDereferenceMediaMappings,\n} from '@comunica/bus-rdf-dereference';\nimport type {\n  IActionHandleRdfParse,\n  IActorOutputHandleRdfParse,\n  IActorRdfParseOutput,\n  IActorTestHandleRdfParse,\n} from '@comunica/bus-rdf-parse';\nimport type { Actor, IActorTest, Mediator } from '@comunica/core';\n\n/**\n * A comunica File RDF Dereference Actor.\n */\nexport class ActorRdfDereferenceFile extends ActorRdfDereferenceMediaMappings {\n  public readonly mediatorRdfParse: Mediator<\n  Actor<IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>,\n  IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>;\n\n  public constructor(args: IActorRdfDereferenceFileArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfDereference): Promise<IActorTest> {\n    console.log(\"dereference testing\")\n    try {\n      await promisify(fs.access)(\n        action.url.startsWith('file://') ? new URL(action.url) : action.url, fs.constants.F_OK,\n      );\n    } catch (error: unknown) {\n      throw new Error(\n        `This actor only works on existing local files. (${error})`,\n      );\n    }\n    return true;\n  }\n\n  public async run(action: IActionRdfDereference): Promise<IActorRdfDereferenceOutput> {\n    console.log(\"dereference running\")\n    let { mediaType } = action;\n\n    // Deduce media type from file extension if possible\n    if (!mediaType) {\n      mediaType = this.getMediaTypeFromExtension(action.url);\n    }\n\n    const parseAction: IActionHandleRdfParse = {\n      context: action.context,\n      handle: {\n        baseIRI: action.url,\n        input: fs.createReadStream(action.url.startsWith('file://') ? new URL(action.url) : action.url),\n      },\n    };\n    if (mediaType) {\n      parseAction.handleMediaType = mediaType;\n    }\n\n    let parseOutput: IActorRdfParseOutput;\n    try {\n      parseOutput = (await this.mediatorRdfParse.mediate(parseAction)).handle;\n    } catch (error: unknown) {\n      return this.handleDereferenceError(action, error);\n    }\n\n    return {\n      headers: {},\n      quads: this.handleDereferenceStreamErrors(action, parseOutput.quads),\n      triples: parseOutput.triples,\n      url: action.url,\n    };\n  }\n}\n\nexport interface IActorRdfDereferenceFileArgs extends IActorRdfDereferenceMediaMappingsArgs {\n  /**\n   * Mediator used for parsing the file contents.\n   */\n  mediatorRdfParse: Mediator<\n  Actor<IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>,\n  IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>;\n}\n"]}