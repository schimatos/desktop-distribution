{"version":3,"file":"ActorRdfDereferencePagedNext.js","sourceRoot":"","sources":["ActorRdfDereferencePagedNext.ts"],"names":[],"mappings":";;;;;;AAIA,mFAA+E;AAI/E,0DAAiC;AACjC,mFAAgF;AAEhF;;GAEG;AACH,MAAa,4BAA6B,SAAQ,oDAAwB;IAcxE,YAAmB,IAA+B;QAChD,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,mBAAQ,CAAc,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC7F,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,CAAC,EAAE,GAAG,EAAyB,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,CACzE,CAAC;SACH;IACH,CAAC;IAEM,IAAI,CAAC,MAAkC;QAC5C,8FAA8F;QAC9F,OAAO,IAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;IAChG,CAAC;IAEM,GAAG,CAAC,MAAkC;QAC3C,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YAC5C,OAAO,IAAI,CAAC,WAAW,CAA4C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;SAChG;QACD,MAAM,MAAM,GAA6C,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC/E,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YACnC,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SACjC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACO,KAAK,CAAC,WAAW,CAAC,aAAuD;QAEjF,MAAM,MAAM,GAAoC,MAAM,aAAa,CAAC;QACpE,OAAO;YACL,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE;YACzB,iBAAiB,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,IAAI,CACtD,CAAC,QAA6B,EAAE,EAAE,CAAC,mBAAM,QAAQ,EAAG,CACrD;YACD,YAAY,EAAE,MAAM,CAAC,YAAY;YACjC,OAAO,EAAE,MAAM,CAAC,OAAO;SACxB,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACO,KAAK,CAAC,QAAQ,CAAC,MAAkC;QACzD,MAAM,SAAS,GAA+B,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAChG,MAAM,YAAY,GAAW,SAAS,CAAC,GAAG,CAAC;QAE3C,MAAM,kBAAkB,GAA4B,MAAM,IAAI,CAAC,gBAAgB;aAC5E,OAAO,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;QAC/G,IAAI,6BAAuE,CAAC;QAC5E,4CAA4C;QAC5C,MAAM,iBAAiB,GAAuC,GAAG,EAAE,CAAC,6BAA6B,aAA7B,6BAA6B,cAA7B,6BAA6B,GAC/F,CAAC,6BAA6B,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CACnE,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,YAAY,EAAE,QAAQ,EAAE,kBAAkB,CAAC,QAAQ,EAAE,CACtF,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;QAErC,MAAM,IAAI,GAAkC,IAAI,6DAA6B,CAC3E,YAAY,EACZ,kBAAkB,CAAC,IAAI,EACvB,iBAAiB,EACjB,IAAI,CAAC,sBAAsB,EAC3B,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,uBAAuB,EAC5B,MAAM,CAAC,OAAO,CACf,CAAC;QACF,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,iBAAiB,EAAE,OAAO,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC;IAC/E,CAAC;CACF;AAzFD,oEAyFC","sourcesContent":["import type { ActorHttpInvalidateListenable, IActionHttpInvalidate } from '@comunica/bus-http-invalidate';\nimport type { IActionRdfDereference, IActorRdfDereferenceOutput } from '@comunica/bus-rdf-dereference';\nimport type { IActionRdfDereferencePaged,\n  IActorRdfDereferencePagedOutput } from '@comunica/bus-rdf-dereference-paged';\nimport { ActorRdfDereferencePaged } from '@comunica/bus-rdf-dereference-paged';\nimport type { IActionRdfMetadata, IActorRdfMetadataOutput } from '@comunica/bus-rdf-metadata';\nimport type { IActionRdfMetadataExtract, IActorRdfMetadataExtractOutput } from '@comunica/bus-rdf-metadata-extract';\nimport type { Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport LRUCache from 'lru-cache';\nimport { MediatedPagedAsyncRdfIterator } from './MediatedPagedAsyncRdfIterator';\n\n/**\n * An RDF Dereference Paged Actor that will lazily follow 'next' links as defined from the extracted metadata.\n */\nexport class ActorRdfDereferencePagedNext extends ActorRdfDereferencePaged implements IActorRdfDereferencePaged {\n  public readonly mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>,\n  IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;\n\n  public readonly mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>,\n  IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>;\n\n  public readonly mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest,\n  IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>;\n\n  public readonly cacheSize: number;\n  public readonly cache?: LRUCache<string, Promise<IActorRdfDereferencePagedOutput>>;\n  public readonly httpInvalidator: ActorHttpInvalidateListenable;\n\n  public constructor(args: IActorRdfDereferencePaged) {\n    super(args);\n    this.cache = this.cacheSize ? new LRUCache<string, any>({ max: this.cacheSize }) : undefined;\n    const cache = this.cache;\n    if (cache) {\n      this.httpInvalidator.addInvalidateListener(\n        ({ url }: IActionHttpInvalidate) => url ? cache.del(url) : cache.reset(),\n      );\n    }\n  }\n\n  public test(action: IActionRdfDereferencePaged): Promise<IActorTest> {\n    // Try to determine an actor in the RDF dereference bus to see if we can handle the given URL.\n    return this.mediatorRdfDereference.mediateActor({ context: action.context, url: action.url });\n  }\n\n  public run(action: IActionRdfDereferencePaged): Promise<IActorRdfDereferencePagedOutput> {\n    if (this.cache && this.cache.has(action.url)) {\n      return this.cloneOutput(<Promise<IActorRdfDereferencePagedOutput>> this.cache.get(action.url));\n    }\n    const output: Promise<IActorRdfDereferencePagedOutput> = this.runAsync(action);\n    if (this.cache) {\n      this.cache.set(action.url, output);\n      return this.cloneOutput(output);\n    }\n    return output;\n  }\n\n  /**\n   * Make a copy of the given output promise.\n   * @param {Promise<IActorRdfDereferencePagedOutput>} outputPromise An output promise.\n   * @return {Promise<IActorRdfDereferencePagedOutput>} A cloned output promise.\n   */\n  protected async cloneOutput(outputPromise: Promise<IActorRdfDereferencePagedOutput>):\n  Promise<IActorRdfDereferencePagedOutput> {\n    const output: IActorRdfDereferencePagedOutput = await outputPromise;\n    return {\n      data: output.data.clone(),\n      firstPageMetadata: () => output.firstPageMetadata().then(\n        (metadata: Record<string, any>) => ({ ...metadata }),\n      ),\n      firstPageUrl: output.firstPageUrl,\n      triples: output.triples,\n    };\n  }\n\n  /**\n   * Actual logic to produce the paged output.\n   * @param {IActionRdfDereferencePaged} action An action.\n   * @return {Promise<IActorRdfDereferencePagedOutput>} The output.\n   */\n  protected async runAsync(action: IActionRdfDereferencePaged): Promise<IActorRdfDereferencePagedOutput> {\n    const firstPage: IActorRdfDereferenceOutput = await this.mediatorRdfDereference.mediate(action);\n    const firstPageUrl: string = firstPage.url;\n\n    const firstPageMetaSplit: IActorRdfMetadataOutput = await this.mediatorMetadata\n      .mediate({ context: action.context, url: firstPageUrl, quads: firstPage.quads, triples: firstPage.triples });\n    let materializedFirstPageMetadata: Promise<Record<string, any>> | undefined;\n    // eslint-disable-next-line no-return-assign\n    const firstPageMetadata: () => Promise<Record<string, any>> = () => materializedFirstPageMetadata ??\n      (materializedFirstPageMetadata = this.mediatorMetadataExtract.mediate(\n        { context: action.context, url: firstPageUrl, metadata: firstPageMetaSplit.metadata },\n      ).then(output => output.metadata));\n\n    const data: MediatedPagedAsyncRdfIterator = new MediatedPagedAsyncRdfIterator(\n      firstPageUrl,\n      firstPageMetaSplit.data,\n      firstPageMetadata,\n      this.mediatorRdfDereference,\n      this.mediatorMetadata,\n      this.mediatorMetadataExtract,\n      action.context,\n    );\n    return { firstPageUrl, data, firstPageMetadata, triples: firstPage.triples };\n  }\n}\n\nexport interface IActorRdfDereferencePaged extends\n  IActorArgs<IActionRdfDereferencePaged, IActorTest, IActorRdfDereferencePagedOutput> {\n  mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>,\n  IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;\n  mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>,\n  IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>;\n  mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>,\n  IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>;\n  cacheSize: number;\n  httpInvalidator: ActorHttpInvalidateListenable;\n}\n"]}