{"version":3,"file":"MediatedPagedAsyncRdfIterator.js","sourceRoot":"","sources":["MediatedPagedAsyncRdfIterator.ts"],"names":[],"mappings":";;;AAKA,mEAAgE;AAEhE;;;;;;;;;;;GAWG;AACH,MAAa,6BAA8B,SAAQ,6CAAqB;IActE,YAAmB,YAAoB,EAAE,aAAyB,EAChE,iBAAqD,EACrD,sBAC2F,EAC3F,gBACwD,EACxD,uBAE+B,EAC/B,OAAuB;QACvB,KAAK,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;QACrD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACvD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAES,KAAK,CAAC,WAAW,CAAC,GAAW,EAAE,IAAY,EAAE,UAAsC;QAC3F,IAAI,QAAoB,CAAC;QAEzB,yDAAyD;QACzD,IAAI,CAAC,IAAI,EAAE;YACT,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC;YAC9B,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,IAAI;gBACF,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,IAAI,CAAC;aAC9C;YAAC,OAAO,KAAc,EAAE;gBACvB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aAC3B;YACD,UAAU,CAAC,IAAI,CAAC,CAAC;SAClB;aAAM;YACL,MAAM,SAAS,GAA+B,MAAM,IAAI,CAAC,sBAAsB;iBAC5E,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;YAC3C,MAAM,aAAa,GAA4B,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAChF,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,SAAS,CAAC,GAAG,EAAE,KAAK,EAAE,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC,OAAO,EAAE,CAClG,CAAC;YACF,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC;YAE9B,8DAA8D;YAC9D,IAAI,CAAC,uBAAuB;iBACzB,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,SAAS,CAAC,GAAG,EAAE,QAAQ,EAAE,aAAa,CAAC,QAAQ,EAAE,CAAC;iBACxF,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;SAC/F;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AA9DD,sEA8DC","sourcesContent":["import type { IActionRdfDereference, IActorRdfDereferenceOutput } from '@comunica/bus-rdf-dereference';\nimport type { IActionRdfMetadata, IActorRdfMetadataOutput } from '@comunica/bus-rdf-metadata';\nimport type { IActionRdfMetadataExtract, IActorRdfMetadataExtractOutput } from '@comunica/bus-rdf-metadata-extract';\nimport type { ActionContext, Actor, IActorTest, Mediator } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\nimport { PagedAsyncRdfIterator } from './PagedAsyncRdfIterator';\n\n/**\n * A PagedAsyncRdfIterator that pages based on a set of mediators.\n *\n * It expects the first page to be already processed partially.\n * Based on the data stream of the first page, and a promise to the metadata of the first page,\n * it will emit data elements from this page and all following pages using the 'next' metadata link.\n *\n * `mediatorRdfDereference` is used to dereference the 'next' link to a quad stream.\n * `mediatorMetadata` is used to split this quad stream into a data and metadata stream.\n * `mediatorMetadataExtract` is used to collect the metadata object from this metadata stream,\n * possibly containing another 'next' link.\n */\nexport class MediatedPagedAsyncRdfIterator extends PagedAsyncRdfIterator {\n  public readonly firstPageData: RDF.Stream;\n  public readonly firstPageMetadata: () => Promise<Record<string, any>>;\n  public readonly mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>,\n  IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;\n\n  public readonly mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>,\n  IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>;\n\n  public readonly mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest,\n  IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>;\n\n  public readonly context?: ActionContext;\n\n  public constructor(firstPageUrl: string, firstPageData: RDF.Stream,\n    firstPageMetadata: () => Promise<Record<string, any>>,\n    mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest,\n    IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>,\n    mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>,\n    IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>,\n    mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest,\n    IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest,\n    IActorRdfMetadataExtractOutput>,\n    context?: ActionContext) {\n    super(firstPageUrl, { autoStart: false });\n    this.firstPageData = firstPageData;\n    this.firstPageMetadata = firstPageMetadata;\n    this.mediatorRdfDereference = mediatorRdfDereference;\n    this.mediatorMetadata = mediatorMetadata;\n    this.mediatorMetadataExtract = mediatorMetadataExtract;\n    this.context = context;\n  }\n\n  protected async getIterator(url: string, page: number, onNextPage: (nextPage: string) => void): Promise<RDF.Stream> {\n    let pageData: RDF.Stream;\n\n    // Don't call mediators again if we are on the first page\n    if (!page) {\n      pageData = this.firstPageData;\n      let next = '';\n      try {\n        next = (await this.firstPageMetadata()).next;\n      } catch (error: unknown) {\n        this.emit('error', error);\n      }\n      onNextPage(next);\n    } else {\n      const pageQuads: IActorRdfDereferenceOutput = await this.mediatorRdfDereference\n        .mediate({ context: this.context, url });\n      const pageMetaSplit: IActorRdfMetadataOutput = await this.mediatorMetadata.mediate(\n        { context: this.context, url: pageQuads.url, quads: pageQuads.quads, triples: pageQuads.triples },\n      );\n      pageData = pageMetaSplit.data;\n\n      // Don't await, we want to process metadata in the background.\n      this.mediatorMetadataExtract\n        .mediate({ context: this.context, url: pageQuads.url, metadata: pageMetaSplit.metadata })\n        .then(result => onNextPage(result.metadata.next)).catch(error => this.emit('error', error));\n    }\n\n    return pageData;\n  }\n}\n"]}