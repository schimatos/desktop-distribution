{"version":3,"file":"ActorRdfJoinMultiSequential.js","sourceRoot":"","sources":["ActorRdfJoinMultiSequential.ts"],"names":[],"mappings":";;;AAEA,uEAEuC;AAEvC,yDAAsD;AAItD;;;GAGG;AACH,MAAa,2BAA4B,SAAQ,2BAAY;IAI3D,YAAmB,IAAsC;QACvD,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IACvB,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,MAAsB;QAC9C,kFAAkF;QAClF,MAAM,UAAU,GAA4E,MAC5F,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAE,EAAC,CAAC,CAAC;QAChF,MAAM,gBAAgB,GAAyC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACvF,gBAAgB,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;QACjC,OAA4C,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAC7G,CAAC;IAES,KAAK,CAAC,aAAa,CAAC,MAAsB;QAClD,OAAO,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,iCAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAChE,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC;CACF;AArBD,kEAqBC","sourcesContent":["import type { IActorQueryOperationOutput,\n  IActorQueryOperationOutputBindings } from '@comunica/bus-query-operation';\nimport {\n  getMetadata,\n} from '@comunica/bus-query-operation';\nimport type { IActionRdfJoin } from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport type { IMediatorTypeIterations } from '@comunica/mediatortype-iterations';\n\n/**\n * A Multi Sequential RDF Join Actor.\n * It accepts 3 or more streams, joins the first two, and joins the result with the remaining streams.\n */\nexport class ActorRdfJoinMultiSequential extends ActorRdfJoin {\n  public readonly mediatorJoin: Mediator<ActorRdfJoin,\n  IActionRdfJoin, IMediatorTypeIterations, IActorQueryOperationOutput>;\n\n  public constructor(args: IActorRdfJoinMultiSequentialArgs) {\n    super(args, 3, true);\n  }\n\n  protected async getOutput(action: IActionRdfJoin): Promise<IActorQueryOperationOutputBindings> {\n    // Join the two first streams, and then join the result with the remaining streams\n    const firstEntry: IActorQueryOperationOutputBindings = <IActorQueryOperationOutputBindings> await\n    this.mediatorJoin.mediate({ entries: [ action.entries[0], action.entries[1] ]});\n    const remainingEntries: IActorQueryOperationOutputBindings[] = action.entries.slice(1);\n    remainingEntries[0] = firstEntry;\n    return <IActorQueryOperationOutputBindings> await this.mediatorJoin.mediate({ entries: remainingEntries });\n  }\n\n  protected async getIterations(action: IActionRdfJoin): Promise<number> {\n    return (await Promise.all(action.entries.map(x => getMetadata(x))))\n      .reduce((acc, value) => acc * value.totalItems, 1);\n  }\n}\n\nexport interface IActorRdfJoinMultiSequentialArgs\n  extends IActorArgs<IActionRdfJoin, IActorTest, IActorQueryOperationOutput> {\n  mediatorJoin: Mediator<ActorRdfJoin,\n  IActionRdfJoin, IMediatorTypeIterations, IActorQueryOperationOutput>;\n}\n"]}