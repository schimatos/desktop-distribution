{"version":3,"file":"ActorRdfJoinMultiSmallest.js","sourceRoot":"","sources":["ActorRdfJoinMultiSmallest.ts"],"names":[],"mappings":";;;AAEA,uEAEuC;AAEvC,yDAAsD;AAItD;;;GAGG;AACH,MAAa,yBAA0B,SAAQ,2BAAY;IAIzD,YAAmB,IAAoC;QACrD,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IACvB,CAAC;IAEM,MAAM,CAAC,oBAAoB,CAAC,UAAoB;QACrD,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC;QACpB,IAAI,aAAa,GAAG,QAAQ,CAAC;QAC7B,KAAK,MAAM,CAAE,CAAC,EAAE,KAAK,CAAE,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE;YAC/C,IAAI,KAAK,IAAI,aAAa,EAAE;gBAC1B,aAAa,GAAG,KAAK,CAAC;gBACtB,UAAU,GAAG,CAAC,CAAC;aAChB;SACF;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,MAAsB;QAC9C,MAAM,OAAO,GAAyC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAE7E,wDAAwD;QACxD,MAAM,iBAAiB,GAAG,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,iCAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACnF,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,IAAI,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC9E,MAAM,cAAc,GAAW,yBAAyB,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;QACjG,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,MAAM,cAAc,GAAG,iBAAiB,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;QACnE,MAAM,cAAc,GAAW,yBAAyB,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;QACjG,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,MAAM,cAAc,GAAG,iBAAiB,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;QAEnE,qFAAqF;QACrF,MAAM,UAAU,GAA4E,MAC5F,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAE,aAAa,EAAE,aAAa,CAAE,EAAC,CAAC,CAAC;QACxE,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACzB,OAA4C,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IAC3F,CAAC;IAES,KAAK,CAAC,aAAa,CAAC,MAAsB;QAClD,OAAO,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,iCAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAChE,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC;CACF;AA5CD,8DA4CC","sourcesContent":["import type { IActorQueryOperationOutput,\n  IActorQueryOperationOutputBindings } from '@comunica/bus-query-operation';\nimport {\n  getMetadata,\n} from '@comunica/bus-query-operation';\nimport type { IActionRdfJoin } from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport type { IMediatorTypeIterations } from '@comunica/mediatortype-iterations';\n\n/**\n * A Multi Smallest RDF Join Actor.\n * It accepts 3 or more streams, joins the smallest two, and joins the result with the remaining streams.\n */\nexport class ActorRdfJoinMultiSmallest extends ActorRdfJoin {\n  public readonly mediatorJoin: Mediator<ActorRdfJoin,\n  IActionRdfJoin, IMediatorTypeIterations, IActorQueryOperationOutput>;\n\n  public constructor(args: IActorRdfJoinMultiSmallestArgs) {\n    super(args, 3, true);\n  }\n\n  public static getSmallestPatternId(totalItems: number[]): number {\n    let smallestId = -1;\n    let smallestCount = Infinity;\n    for (const [ i, count ] of totalItems.entries()) {\n      if (count <= smallestCount) {\n        smallestCount = count;\n        smallestId = i;\n      }\n    }\n    return smallestId;\n  }\n\n  protected async getOutput(action: IActionRdfJoin): Promise<IActorQueryOperationOutputBindings> {\n    const entries: IActorQueryOperationOutputBindings[] = action.entries.slice();\n\n    // Determine the two smallest streams by estimated count\n    const entriesTotalItems = (await Promise.all(action.entries.map(x => getMetadata(x))))\n      .map(metadata => 'totalItems' in metadata ? metadata.totalItems : Infinity);\n    const smallestIndex1: number = ActorRdfJoinMultiSmallest.getSmallestPatternId(entriesTotalItems);\n    const smallestItem1 = entries.splice(smallestIndex1, 1)[0];\n    const smallestCount1 = entriesTotalItems.splice(smallestIndex1, 1);\n    const smallestIndex2: number = ActorRdfJoinMultiSmallest.getSmallestPatternId(entriesTotalItems);\n    const smallestItem2 = entries.splice(smallestIndex2, 1)[0];\n    const smallestCount2 = entriesTotalItems.splice(smallestIndex2, 1);\n\n    // Join the two selected streams, and then join the result with the remaining streams\n    const firstEntry: IActorQueryOperationOutputBindings = <IActorQueryOperationOutputBindings> await\n    this.mediatorJoin.mediate({ entries: [ smallestItem1, smallestItem2 ]});\n    entries.push(firstEntry);\n    return <IActorQueryOperationOutputBindings> await this.mediatorJoin.mediate({ entries });\n  }\n\n  protected async getIterations(action: IActionRdfJoin): Promise<number> {\n    return (await Promise.all(action.entries.map(x => getMetadata(x))))\n      .reduce((acc, value) => acc * value.totalItems, 1);\n  }\n}\n\nexport interface IActorRdfJoinMultiSmallestArgs\n  extends IActorArgs<IActionRdfJoin, IActorTest, IActorQueryOperationOutput> {\n  mediatorJoin: Mediator<ActorRdfJoin,\n  IActionRdfJoin, IMediatorTypeIterations, IActorQueryOperationOutput>;\n}\n"]}