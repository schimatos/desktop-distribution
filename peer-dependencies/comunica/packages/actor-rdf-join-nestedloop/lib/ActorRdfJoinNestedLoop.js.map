{"version":3,"file":"ActorRdfJoinNestedLoop.js","sourceRoot":"","sources":["ActorRdfJoinNestedLoop.ts"],"names":[],"mappings":";;;AAGA,uEAEuC;AAEvC,yDAAsD;AAGtD,yCAA2C;AAE3C;;GAEG;AACH,MAAa,sBAAuB,SAAQ,2BAAY;IACtD,YAAmB,IAAqF;QACtG,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,MAAsB;QAC9C,MAAM,IAAI,GAAG,IAAI,0BAAc,CAC7B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,cAAc,EAAQ,2BAAY,CAAC,IAAI,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAClH,CAAC;QACF,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc,EAAE,IAAI;YACpB,SAAS,EAAE,2BAAY,CAAC,aAAa,CAAC,MAAM,CAAC;YAC7C,gBAAgB,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC;SAC1F,CAAC;IACJ,CAAC;IAES,KAAK,CAAC,aAAa,CAAC,MAAsB;QAClD,OAAO,CAAC,MAAM,iCAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,MAAM,iCAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;IAC/G,CAAC;CACF;AApBD,wDAoBC","sourcesContent":["import type { Bindings,\n  IActorQueryOperationOutput,\n  IActorQueryOperationOutputBindings } from '@comunica/bus-query-operation';\nimport {\n  getMetadata,\n} from '@comunica/bus-query-operation';\nimport type { IActionRdfJoin } from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { IActorArgs } from '@comunica/core';\nimport type { IMediatorTypeIterations } from '@comunica/mediatortype-iterations';\nimport { NestedLoopJoin } from 'asyncjoin';\n\n/**\n * A comunica NestedLoop RDF Join Actor.\n */\nexport class ActorRdfJoinNestedLoop extends ActorRdfJoin {\n  public constructor(args: IActorArgs<IActionRdfJoin, IMediatorTypeIterations, IActorQueryOperationOutput>) {\n    super(args, 2, undefined, true);\n  }\n\n  protected async getOutput(action: IActionRdfJoin): Promise<IActorQueryOperationOutputBindings> {\n    const join = new NestedLoopJoin<Bindings, Bindings, Bindings>(\n      action.entries[0].bindingsStream, action.entries[1].bindingsStream, <any> ActorRdfJoin.join, { autoStart: false },\n    );\n    return {\n      type: 'bindings',\n      bindingsStream: join,\n      variables: ActorRdfJoin.joinVariables(action),\n      canContainUndefs: action.entries.reduce((acc, val) => acc || val.canContainUndefs, false),\n    };\n  }\n\n  protected async getIterations(action: IActionRdfJoin): Promise<number> {\n    return (await getMetadata(action.entries[0])).totalItems * (await getMetadata(action.entries[1])).totalItems;\n  }\n}\n"]}