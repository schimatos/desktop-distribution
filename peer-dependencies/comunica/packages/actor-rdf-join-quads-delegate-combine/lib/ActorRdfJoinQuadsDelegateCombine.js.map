{"version":3,"file":"ActorRdfJoinQuadsDelegateCombine.js","sourceRoot":"","sources":["ActorRdfJoinQuadsDelegateCombine.ts"],"names":[],"mappings":";;;AAAA,qEAAgH;AAKhH;;GAEG;AACH,MAAa,gCAAiC,SAAQ,sCAAiB;IAKrE,YAAmB,IAA2E;QAC5F,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,MAA2B;QACvD,IAAI,iBAAiB,GAAwB,EAAE,CAAA;QAC/C,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,WAAW,EAAE;YAC3C,IAAI,UAAU,EAAE;gBACd,iBAAiB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAG,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAA;aACxD;SACF;QACD,OAAO;YACL,YAAY,EAAE,KAAK;YACnB,aAAa,EAAE,KAAK;YACpB,eAAe,EAAE,IAAI;YACrB,iBAAiB;SAClB,CAAA;IACH,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA2B;QAC3C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;QACvG,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC,KAAK,CAAC;QACtC,OAAO,SAAS,CAAC,KAAK,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA2B;QAC1C,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;SACpE;QACD,OAAO,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;IAClF,CAAC;CACF;AApCD,4EAoCC","sourcesContent":["import { ActorRdfJoinQuads, IActionRdfJoinQuads, IActorRdfJoinQuadsOutput } from '@comunica/bus-rdf-join-quads';\nimport { IActorRdfUpdateQuadStreamOutput } from '@comunica/bus-rdf-update-quad-stream';\nimport { Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport { IActionRdfCombineQuads, IActorRdfCombineQuadsOutput, IQuadStreamUpdate } from '../../bus-rdf-combine-quads';\n\n/**\n * A comunica Delegate Combine RDF Join Quads Actor.\n */\nexport class ActorRdfJoinQuadsDelegateCombine extends ActorRdfJoinQuads {\n  public readonly mediatorRdfCombineQuads: Mediator<Actor<IActionRdfCombineQuads, IActorTest, IActorRdfCombineQuadsOutput>,\n  IActionRdfCombineQuads, IActorTest, IActorRdfCombineQuadsOutput>;\n  private delegatedActor: Actor<IActionRdfCombineQuads, IActorTest, IActorRdfCombineQuadsOutput>;\n\n  public constructor(args: IActorArgs<IActionRdfJoinQuads, IActorTest, IActorRdfJoinQuadsOutput>) {\n    super(args);\n  }\n\n  private async getCombineInput(action: IActionRdfJoinQuads): Promise<IActionRdfCombineQuads> {\n    let quadStreamUpdates: IQuadStreamUpdate[] = []\n    for (const quadStream of action.quadStreams) {\n      if (quadStream) {\n        quadStreamUpdates.push({ type : 'insert', quadStream })\n      }\n    }\n    return {\n      trackChanges: false,\n      maintainOrder: false,\n      avoidDuplicates: true,\n      quadStreamUpdates\n    }\n  }\n\n  public async test(action: IActionRdfJoinQuads): Promise<IActorTest> {\n    const published = await this.mediatorRdfCombineQuads.mediateResult(await this.getCombineInput(action));\n    this.delegatedActor = published.actor;\n    return published.reply;\n  }\n\n  public async run(action: IActionRdfJoinQuads): Promise<IActorRdfUpdateQuadStreamOutput> {\n    if (this.delegatedActor) {\n      return this.delegatedActor.run(await this.getCombineInput(action));\n    }\n    return this.mediatorRdfCombineQuads.mediate(await this.getCombineInput(action));\n  }\n}"]}