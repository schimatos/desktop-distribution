{"version":3,"file":"ActorRdfMetadataExtractHydraCountQuery.js","sourceRoot":"","sources":["ActorRdfMetadataExtractHydraCountQuery.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA,iFAAkF;AAElF,kEAAoD;AAEpD;;GAEG;AACH,MAAa,sCAAuC,SAAQ,uDAA4B;IAQtF,YAAmB,IAAuC;QACxD,KAAK,CAAC,iBAAiB,EAAE,sCAAsC,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;IACzF,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAiC;QACjD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAiC;QAChD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QACpF,IAAI,YAAY,IAAI,SAAS,IAAI,OAAO,SAAS,CAAC,UAAU,KAAK,QAAQ,EAAE;YACzE,SAAS,CAAC,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAClE;QACD,OAAO;YACL,QAAQ,EAAE;gBACR,UAAU,EAAE,YAAY,IAAI,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ;aACxE;SACF,CAAC;IACJ,CAAC;;AA1BH,wFA2BC;AA1BwB,sDAAe,GAAW;;;;;MAK7C,CAAC","sourcesContent":["import type { IActionRdfMetadataExtract, IActorRdfMetadataExtractOutput,\n  IActorRdfMetadataExtractQueryArgs } from '@comunica/bus-rdf-metadata-extract';\nimport { ActorRdfMetadataExtractQuery } from '@comunica/bus-rdf-metadata-extract';\nimport type { IActorTest } from '@comunica/core';\nimport * as GRAPHQLLD_CONTEXT from './context.json';\n\n/**\n * An RDF Metadata Extract Actor that extracts total items counts from a metadata stream based on the given predicates.\n */\nexport class ActorRdfMetadataExtractHydraCountQuery extends ActorRdfMetadataExtractQuery {\n  public static readonly GRAPHQLLD_QUERY: string = `\n    query($pageUrl: String) @single(scope: all) {\n      graph\n      id(_: $pageUrl)\n      totalItems(alt: triples)\n    }`;\n\n  public constructor(args: IActorRdfMetadataExtractQueryArgs) {\n    super(GRAPHQLLD_CONTEXT, ActorRdfMetadataExtractHydraCountQuery.GRAPHQLLD_QUERY, args);\n  }\n\n  public async test(action: IActionRdfMetadataExtract): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionRdfMetadataExtract): Promise<IActorRdfMetadataExtractOutput> {\n    const queryData = await this.queryData(action.metadata, { '?pageUrl': action.url });\n    if ('totalItems' in queryData && typeof queryData.totalItems !== 'number') {\n      queryData.totalItems = Number.parseInt(queryData.totalItems, 10);\n    }\n    return {\n      metadata: {\n        totalItems: 'totalItems' in queryData ? queryData.totalItems : Infinity,\n      },\n    };\n  }\n}\n"]}