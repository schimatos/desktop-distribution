{"version":3,"file":"ActorRdfMetadataTriplePredicate.js","sourceRoot":"","sources":["ActorRdfMetadataTriplePredicate.ts"],"names":[],"mappings":";;;AACA,iEAA2E;AAI3E;;;GAGG;AACH,MAAa,+BAAgC,SAAQ,gDAA6B;IAIhF,YAAmB,IAAuC;QACxD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA0B;QAC1C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,UAAU,CAAC,IAAc,EAAE,GAAW,EAAE,OAAY;QACzD,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,GAAG,EAAE;YAC9B,OAAO,IAAI,CAAC;SACb;QACD,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzC,iEAAiE;YACjE,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACrC,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAxBD,0EAwBC","sourcesContent":["import type { IActionRdfMetadata, IActorRdfMetadataOutput } from '@comunica/bus-rdf-metadata';\nimport { ActorRdfMetadataQuadPredicate } from '@comunica/bus-rdf-metadata';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\n\n/**\n * An RDF Metadata Actor that splits off the metadata based on the existence of a preconfigured set of predicates\n * with the page url as subject.\n */\nexport class ActorRdfMetadataTriplePredicate extends ActorRdfMetadataQuadPredicate\n  implements IActorRdfParseFixedMediaTypesArgs {\n  public readonly predicateRegexes: string[];\n\n  public constructor(args: IActorRdfParseFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfMetadata): Promise<IActorTest> {\n    return true;\n  }\n\n  public isMetadata(quad: RDF.Quad, url: string, context: any): boolean {\n    if (quad.subject.value === url) {\n      return true;\n    }\n    for (const regex of this.predicateRegexes) {\n      // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n      if (quad.predicate.value.match(regex)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport interface IActorRdfParseFixedMediaTypesArgs\n  extends IActorArgs<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput> {\n  predicateRegexes: string[];\n}\n"]}