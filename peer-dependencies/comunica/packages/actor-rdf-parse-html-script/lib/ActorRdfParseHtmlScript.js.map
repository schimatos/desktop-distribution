{"version":3,"file":"ActorRdfParseHtmlScript.js","sourceRoot":"","sources":["ActorRdfParseHtmlScript.ts"],"names":[],"mappings":";;;AAUA,qEAAiE;AAEjE,6DAA0D;AAE1D;;;;;GAKG;AACH,MAAa,uBAAwB,SAAQ,sCAAiB;IAS5D,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA2B;QAC3C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA2B;QAC1C,MAAM,cAAc,GAA2B,CAAC,MAAM,IAAI,CAAC,0BAA0B;aAClF,OAAO,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;QACtE,MAAM,iBAAiB,GAAG,IAAI,uCAAkB,CAC9C,IAAI,CAAC,sBAAsB,EAC3B,MAAM,CAAC,IAAI,EACX,MAAM,CAAC,KAAK,EACZ,MAAM,CAAC,GAAG,EACV,cAAc,EACd,MAAM,CAAC,OAAO,EACd,MAAM,CAAC,OAAO,EACd,MAAM,CAAC,OAAO,CACf,CAAC;QACF,OAAO,EAAE,iBAAiB,EAAE,CAAC;IAC/B,CAAC;CACF;AAhCD,0DAgCC","sourcesContent":["/* eslint-disable @typescript-eslint/unbound-method */\nimport type {\n  IActionHandleRdfParse,\n  IActionMediaTypesRdfParse,\n  IActorOutputHandleRdfParse,\n  IActorOutputMediaTypesRdfParse,\n  IActorTestHandleRdfParse,\n  IActorTestMediaTypesRdfParse,\n} from '@comunica/bus-rdf-parse';\nimport type { IActionRdfParseHtml, IActorRdfParseHtmlOutput } from '@comunica/bus-rdf-parse-html';\nimport { ActorRdfParseHtml } from '@comunica/bus-rdf-parse-html';\nimport type { Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport { HtmlScriptListener } from './HtmlScriptListener';\n\n/**\n * A HTML script RDF Parse actor that listens on the 'rdf-parse' bus.\n *\n * It is able to extract and parse any RDF serialization from script tags in HTML files\n * and announce the presence of them by media type.\n */\nexport class ActorRdfParseHtmlScript extends ActorRdfParseHtml {\n  private readonly mediatorRdfParseMediatypes: Mediator<\n  Actor<IActionMediaTypesRdfParse, IActorTestMediaTypesRdfParse, IActorOutputMediaTypesRdfParse>,\n  IActionMediaTypesRdfParse, IActorTestMediaTypesRdfParse, IActorOutputMediaTypesRdfParse>;\n\n  private readonly mediatorRdfParseHandle: Mediator<\n  Actor<IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>,\n  IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>;\n\n  public constructor(args: IActorRdfParseHtmlScriptArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfParseHtml): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionRdfParseHtml): Promise<IActorRdfParseHtmlOutput> {\n    const supportedTypes: Record<string, number> = (await this.mediatorRdfParseMediatypes\n      .mediate({ context: action.context, mediaTypes: true })).mediaTypes;\n    const htmlParseListener = new HtmlScriptListener(\n      this.mediatorRdfParseHandle,\n      action.emit,\n      action.error,\n      action.end,\n      supportedTypes,\n      action.context,\n      action.baseIRI,\n      action.headers,\n    );\n    return { htmlParseListener };\n  }\n}\n\nexport interface IActorRdfParseHtmlScriptArgs\n  extends IActorArgs<IActionRdfParseHtml, IActorTest, IActorRdfParseHtmlOutput> {\n  mediatorRdfParseMediatypes: Mediator<\n  Actor<IActionMediaTypesRdfParse, IActorTestMediaTypesRdfParse, IActorOutputMediaTypesRdfParse>,\n  IActionMediaTypesRdfParse, IActorTestMediaTypesRdfParse, IActorOutputMediaTypesRdfParse>;\n  mediatorRdfParseHandle: Mediator<\n  Actor<IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>,\n  IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>;\n}\n"]}