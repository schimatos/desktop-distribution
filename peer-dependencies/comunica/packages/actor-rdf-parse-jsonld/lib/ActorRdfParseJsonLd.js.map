{"version":3,"file":"ActorRdfParseJsonLd.js","sourceRoot":"","sources":["ActorRdfParseJsonLd.ts"],"names":[],"mappings":";;;AAGA,2DAAuE;AAEvE,qEAAuD;AAEvD,qEAAkE;AAElE;;;;GAIG;AACH,MAAa,mBAAoB,SAAQ,4CAA4B;IAInE,YAAmB,IAA8B;QAC/C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,MAAuB,EAAE,SAAiB,EAAE,OAAsB;QACxF,IAAI,OAAO;YACT,OAAO,CAAC,GAAG,CAAC,8DAA8D,CAAC;YAC3E,SAAS,KAAK,qBAAqB,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;SAC1F;QACD,IAAI,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACnE,MAAM,IAAI,KAAK,CAAC,4BAA4B,SAAS,EAAE,CAAC,CAAC;SAC1D;QACD,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAAuB,EAAE,SAAiB,EAAE,aAA4B;QAE7F,MAAM,MAAM,GAAG,sCAAY,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,OAAO,EAAE;YACtF,cAAc,EAAE,aAAa,IAAI,aAAa,CAAC,GAAG,CAAC,kCAA0B,CAAC;gBAC5E,IAAI,+CAAsB,CAAC,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC;YAC9D,YAAY,EAAE,aAAa,IAAI,aAAa,CAAC,GAAG,CAAC,gCAAwB,CAAC;SAC3E,CAAC,CAAC;QACH,MAAM,KAAK,GAAe,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACtD,OAAO,EAAE,KAAK,EAAE,CAAC;IACnB,CAAC;CACF;AA9BD,kDA8BC;AAOY,QAAA,0BAA0B,GAAG,iDAAiD,CAAC;AAC/E,QAAA,wBAAwB,GAAG,+CAA+C,CAAC","sourcesContent":["import type { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport type { IActionRdfParse,\n  IActorRdfParseFixedMediaTypesArgs, IActorRdfParseOutput } from '@comunica/bus-rdf-parse';\nimport { ActorRdfParseFixedMediaTypes } from '@comunica/bus-rdf-parse';\nimport type { ActionContext, Actor, IActorTest, Mediator } from '@comunica/core';\nimport { JsonLdParser } from 'jsonld-streaming-parser';\nimport type * as RDF from 'rdf-js';\nimport { DocumentLoaderMediated } from './DocumentLoaderMediated';\n\n/**\n * A JSON-LD RDF Parse actor that listens on the 'rdf-parse' bus.\n *\n * It is able to parse JSON-LD-based RDF serializations and announce the presence of them by media type.\n */\nexport class ActorRdfParseJsonLd extends ActorRdfParseFixedMediaTypes {\n  public readonly mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>;\n\n  public constructor(args: IActorRdfParseJsonLdArgs) {\n    super(args);\n  }\n\n  public async testHandle(action: IActionRdfParse, mediaType: string, context: ActionContext): Promise<IActorTest> {\n    if (context &&\n      context.has('@comunica/actor-rdf-parse-html-script:processing-html-script') &&\n      mediaType !== 'application/ld+json') {\n      throw new Error(`JSON-LD in script tags can only have media type 'application/ld+json'`);\n    }\n    if (!(mediaType in this.mediaTypes) && !mediaType.endsWith('+json')) {\n      throw new Error(`Unrecognized media type: ${mediaType}`);\n    }\n    return await this.testHandleChecked(action);\n  }\n\n  public async runHandle(action: IActionRdfParse, mediaType: string, actionContext: ActionContext):\n  Promise<IActorRdfParseOutput> {\n    const parser = JsonLdParser.fromHttpResponse(action.baseIRI, mediaType, action.headers, {\n      documentLoader: actionContext && actionContext.get(KEY_CONTEXT_DOCUMENTLOADER) ||\n        new DocumentLoaderMediated(this.mediatorHttp, actionContext),\n      strictValues: actionContext && actionContext.get(KEY_CONTEXT_STRICTVALUES),\n    });\n    const quads: RDF.Stream = parser.import(action.input);\n    return { quads };\n  }\n}\n\nexport interface IActorRdfParseJsonLdArgs extends IActorRdfParseFixedMediaTypesArgs {\n  mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>;\n}\n\nexport const KEY_CONTEXT_DOCUMENTLOADER = '@comunica/actor-rdf-parse-jsonld:documentLoader';\nexport const KEY_CONTEXT_STRICTVALUES = '@comunica/actor-rdf-parse-jsonld:strictValues';\n"]}