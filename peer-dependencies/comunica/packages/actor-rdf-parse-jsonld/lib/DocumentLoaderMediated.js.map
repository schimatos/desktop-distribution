{"version":3,"file":"DocumentLoaderMediated.js","sourceRoot":"","sources":["DocumentLoaderMediated.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,iDAA+C;AAE/C,iEAA4D;AAC5D,kEAAoD;AAEpD;;GAEG;AACH,MAAa,sBAAuB,SAAQ,2CAAmB;IAM7D,YAAmB,YACuB,EAC1C,OAAsB;QACpB,KAAK,CAAC,sBAAsB,CAAC,aAAa,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAES,MAAM,CAAC,aAAa,CAAC,YACW,EAC1C,OAAsB;QAEpB,OAAO,KAAK,EAAC,GAAW,EAAE,IAAiB,EAAE,EAAE;YAC7C,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;YAC3E,aAAa;YACb,QAAQ,CAAC,IAAI,GAAG,KAAK,IAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,eAAe,CAAC,oBAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtG,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC;IACJ,CAAC;CACF;AAzBD,wDAyBC","sourcesContent":["import type { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport { ActorHttp } from '@comunica/bus-http';\nimport type { ActionContext, Actor, IActorTest, Mediator } from '@comunica/core';\nimport { FetchDocumentLoader } from 'jsonld-context-parser';\nimport * as stringifyStream from 'stream-to-string';\n\n/**\n * A JSON-LD document loader that fetches over an HTTP bus using a given mediator.\n */\nexport class DocumentLoaderMediated extends FetchDocumentLoader {\n  private readonly mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>;\n\n  private readonly context: ActionContext;\n\n  public constructor(mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>,\n  context: ActionContext) {\n    super(DocumentLoaderMediated.createFetcher(mediatorHttp, context));\n    this.mediatorHttp = mediatorHttp;\n    this.context = context;\n  }\n\n  protected static createFetcher(mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>,\n  context: ActionContext):\n    (input: RequestInfo, init: RequestInit) => Promise<Response> {\n    return async(url: string, init: RequestInit) => {\n      const response = await mediatorHttp.mediate({ input: url, init, context });\n      // @ts-ignore\n      response.json = async() => JSON.parse(await stringifyStream(ActorHttp.toNodeReadable(response.body)));\n      return response;\n    };\n  }\n}\n"]}