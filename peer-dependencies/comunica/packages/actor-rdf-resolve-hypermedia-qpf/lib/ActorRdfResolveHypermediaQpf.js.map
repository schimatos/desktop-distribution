{"version":3,"file":"ActorRdfResolveHypermediaQpf.js","sourceRoot":"","sources":["ActorRdfResolveHypermediaQpf.ts"],"names":[],"mappings":";;;AAMA,qFAE8C;AAG9C,iDAA8C;AAE9C;;GAEG;AACH,MAAa,4BAA6B,SAAQ,sDAAyB;IAgBzE,YAAmB,IAAuC;QACxD,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,MAAmC;QAC3D,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAC1E,IAAI,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;YACxE,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,2DAA2D,CAAC,CAAC;SAChG;QACD,OAAO,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,GAAG,CAAC,MAAmC;QAClD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,6BAA6B,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QACxE,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QAChF,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IACxD,CAAC;IAES,YAAY,CAAC,QAA6B,EAAE,OAAuB,EAAE,KAAkB;QAC/F,OAAO,IAAI,2BAAY,CACrB,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,uBAAuB,EAC5B,IAAI,CAAC,sBAAsB,EAC3B,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,EACb,QAAQ,EACR,OAAO,EACP,KAAK,CACN,CAAC;IACJ,CAAC;CACF;AArDD,oEAqDC","sourcesContent":["import type { IActionRdfDereference, IActorRdfDereferenceOutput } from '@comunica/bus-rdf-dereference';\nimport type { IActionRdfMetadata, IActorRdfMetadataOutput } from '@comunica/bus-rdf-metadata';\nimport type { IActionRdfMetadataExtract, IActorRdfMetadataExtractOutput } from '@comunica/bus-rdf-metadata-extract';\nimport type { IActionRdfResolveHypermedia,\n  IActorRdfResolveHypermediaOutput,\n  IActorRdfResolveHypermediaTest } from '@comunica/bus-rdf-resolve-hypermedia';\nimport {\n  ActorRdfResolveHypermedia,\n} from '@comunica/bus-rdf-resolve-hypermedia';\nimport type { ActionContext, Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\nimport { RdfSourceQpf } from './RdfSourceQpf';\n\n/**\n * A comunica QPF RDF Resolve Quad Pattern Actor.\n */\nexport class ActorRdfResolveHypermediaQpf extends ActorRdfResolveHypermedia\n  implements IActorRdfResolveHypermediaQpfArgs {\n  public readonly mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>,\n  IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>;\n\n  public readonly mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest,\n  IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>;\n\n  public readonly mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest,\n  IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;\n\n  public readonly subjectUri: string;\n  public readonly predicateUri: string;\n  public readonly objectUri: string;\n  public readonly graphUri?: string;\n\n  public constructor(args: IActorRdfResolveHypermediaQpfArgs) {\n    super(args, 'qpf');\n  }\n\n  public async testMetadata(action: IActionRdfResolveHypermedia): Promise<IActorRdfResolveHypermediaTest> {\n    const { searchForm } = this.createSource(action.metadata, action.context);\n    if (action.handledDatasets && action.handledDatasets[searchForm.dataset]) {\n      throw new Error(`Actor ${this.name} can only be applied for the first page of a QPF dataset.`);\n    }\n    return { filterFactor: 1 };\n  }\n\n  /**\n   * Look for the search form\n   * @param {IActionRdfResolveHypermedia} the metadata to look for the form.\n   * @return {Promise<IActorRdfResolveHypermediaOutput>} A promise resolving to a hypermedia form.\n   */\n  public async run(action: IActionRdfResolveHypermedia): Promise<IActorRdfResolveHypermediaOutput> {\n    this.logInfo(action.context, `Identified as qpf source: ${action.url}`);\n    const source = this.createSource(action.metadata, action.context, action.quads);\n    return { source, dataset: source.searchForm.dataset };\n  }\n\n  protected createSource(metadata: Record<string, any>, context?: ActionContext, quads?: RDF.Stream): RdfSourceQpf {\n    return new RdfSourceQpf(\n      this.mediatorMetadata,\n      this.mediatorMetadataExtract,\n      this.mediatorRdfDereference,\n      this.subjectUri,\n      this.predicateUri,\n      this.objectUri,\n      this.graphUri,\n      metadata,\n      context,\n      quads,\n    );\n  }\n}\n\nexport interface IActorRdfResolveHypermediaQpfArgs extends\n  IActorArgs<IActionRdfResolveHypermedia, IActorRdfResolveHypermediaTest, IActorRdfResolveHypermediaOutput> {\n  mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>,\n  IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>;\n  mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest,\n  IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>;\n  mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest,\n  IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;\n  subjectUri: string;\n  predicateUri: string;\n  objectUri: string;\n  graphUri?: string;\n}\n"]}