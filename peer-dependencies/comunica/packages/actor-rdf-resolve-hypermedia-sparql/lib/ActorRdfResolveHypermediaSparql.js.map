{"version":3,"file":"ActorRdfResolveHypermediaSparql.js","sourceRoot":"","sources":["ActorRdfResolveHypermediaSparql.ts"],"names":[],"mappings":";;;AAGA,qFAAiF;AAGjF,uDAAoD;AAEpD;;GAEG;AACH,MAAa,+BAAgC,SAAQ,sDAAyB;IAM5E,YAAmB,IAA0C;QAC3D,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,MAAmC;QAC3D,IAAI,CAAC,MAAM,CAAC,eAAe,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa;YAC3D,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE;YAC1D,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,0EAA0E,CAAC,CAAC;SAC/G;QACD,OAAO,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAmC;QAClD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,gCAAgC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QAC3E,MAAM,MAAM,GAAG,IAAI,iCAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,IAAI,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACnH,OAAO,EAAE,MAAM,EAAE,CAAC;IACpB,CAAC;CACF;AAvBD,0EAuBC","sourcesContent":["import type { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport type { IActionRdfResolveHypermedia,\n  IActorRdfResolveHypermediaOutput, IActorRdfResolveHypermediaTest } from '@comunica/bus-rdf-resolve-hypermedia';\nimport { ActorRdfResolveHypermedia } from '@comunica/bus-rdf-resolve-hypermedia';\nimport type { Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\n\nimport { RdfSourceSparql } from './RdfSourceSparql';\n\n/**\n * A comunica SPARQL RDF Resolve Hypermedia Actor.\n */\nexport class ActorRdfResolveHypermediaSparql extends ActorRdfResolveHypermedia {\n  public readonly mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>;\n\n  public readonly checkUrlSuffix: boolean;\n\n  public constructor(args: IActorRdfResolveHypermediaSparqlArgs) {\n    super(args, 'sparql');\n  }\n\n  public async testMetadata(action: IActionRdfResolveHypermedia): Promise<IActorRdfResolveHypermediaTest> {\n    if (!action.forceSourceType && !action.metadata.sparqlService &&\n      !(this.checkUrlSuffix && action.url.endsWith('/sparql'))) {\n      throw new Error(`Actor ${this.name} could not detect a SPARQL service description or URL ending on /sparql.`);\n    }\n    return { filterFactor: 1 };\n  }\n\n  public async run(action: IActionRdfResolveHypermedia): Promise<IActorRdfResolveHypermediaOutput> {\n    this.logInfo(action.context, `Identified as sparql source: ${action.url}`);\n    const source = new RdfSourceSparql(action.metadata.sparqlService || action.url, action.context, this.mediatorHttp);\n    return { source };\n  }\n}\n\nexport interface IActorRdfResolveHypermediaSparqlArgs\n  extends IActorArgs<IActionRdfResolveHypermedia, IActorRdfResolveHypermediaTest, IActorRdfResolveHypermediaOutput> {\n  mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>;\n  checkUrlSuffix: boolean;\n}\n"]}