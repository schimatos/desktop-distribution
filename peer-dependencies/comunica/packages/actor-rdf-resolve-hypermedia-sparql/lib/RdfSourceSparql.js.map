{"version":3,"file":"RdfSourceSparql.js","sourceRoot":"","sources":["RdfSourceSparql.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ActorRdfResolveQuadPatternSparqlJson,\n  AsyncIteratorJsonBindings,\n} from '@comunica/actor-rdf-resolve-quad-pattern-sparql-json';\nimport type { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport type { Bindings, BindingsStream } from '@comunica/bus-query-operation';\nimport type { IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { ActionContext, Actor, IActorTest, Mediator } from '@comunica/core';\nimport type { AsyncIterator } from 'asynciterator';\nimport type * as RDF from 'rdf-js';\nimport { mapTerms } from 'rdf-terms';\nimport { Factory } from 'sparqlalgebrajs';\n\nexport class RdfSourceSparql implements IQuadSource {\n  protected static readonly FACTORY: Factory = new Factory();\n\n  private readonly url: string;\n  private readonly context: ActionContext | undefined;\n  private readonly mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>;\n\n  public constructor(url: string, context: ActionContext | undefined,\n    mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n    IActionHttp, IActorTest, IActorHttpOutput>) {\n    this.url = url;\n    this.context = context;\n    this.mediatorHttp = mediatorHttp;\n  }\n\n  /**\n   * Send a SPARQL query to a SPARQL endpoint and retrieve its bindings as a stream.\n   * @param {string} endpoint A SPARQL endpoint URL.\n   * @param {string} query A SPARQL query string.\n   * @param {ActionContext} context An optional context.\n   * @return {BindingsStream} A stream of bindings.\n   */\n  public queryBindings(endpoint: string, query: string, context?: ActionContext): BindingsStream {\n    return new AsyncIteratorJsonBindings(endpoint, query, context, this.mediatorHttp);\n  }\n\n  public match(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term): AsyncIterator<RDF.Quad> {\n    const pattern = ActorRdfResolveQuadPatternSparqlJson.replaceBlankNodes(RdfSourceSparql.FACTORY.createPattern(\n      subject,\n      predicate,\n      object,\n      graph,\n    ));\n    const countQuery: string = ActorRdfResolveQuadPatternSparqlJson.patternToCountQuery(pattern);\n    const selectQuery: string = ActorRdfResolveQuadPatternSparqlJson.patternToSelectQuery(pattern);\n\n    // Emit metadata containing the estimated count (reject is never called)\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    new Promise(resolve => {\n      const bindingsStream: BindingsStream = this.queryBindings(this.url, countQuery, this.context);\n      bindingsStream.on('data', (bindings: Bindings) => {\n        const count: RDF.Term = bindings.get('?count');\n        if (count) {\n          const totalItems: number = Number.parseInt(count.value, 10);\n          if (Number.isNaN(totalItems)) {\n            return resolve({ totalItems: Infinity });\n          }\n          return resolve({ totalItems });\n        }\n        return resolve({ totalItems: Infinity });\n      });\n      bindingsStream.on('error', () => resolve({ totalItems: Infinity }));\n      bindingsStream.on('end', () => resolve({ totalItems: Infinity }));\n    })\n      .then(metadata => quads.setProperty('metadata', metadata));\n\n    // Materialize the queried pattern using each found binding.\n    const quads: AsyncIterator<RDF.Quad> & RDF.Stream = this.queryBindings(this.url, selectQuery, this.context)\n      .map((bindings: Bindings) => <RDF.Quad> mapTerms(pattern, (value: RDF.Term) => {\n        if (value.termType === 'Variable') {\n          const boundValue: RDF.Term = bindings.get(`?${value.value}`);\n          if (!boundValue) {\n            quads.destroy(new Error(`The endpoint ${this.url} failed to provide a binding for ${value.value}.`));\n          }\n          return boundValue;\n        }\n        return value;\n      }));\n\n    return quads;\n  }\n}\n"]}