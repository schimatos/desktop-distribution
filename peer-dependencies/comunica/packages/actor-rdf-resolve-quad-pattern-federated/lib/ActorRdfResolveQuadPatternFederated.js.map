{"version":3,"file":"ActorRdfResolveQuadPatternFederated.js","sourceRoot":"","sources":["ActorRdfResolveQuadPatternFederated.ts"],"names":[],"mappings":";;;AAEA,yFAEgD;AAGhD,+DAA4D;AAE5D;;GAEG;AACH,MAAa,mCAAoC,SAAQ,+DAAgC;IASvF,YAAmB,IAA8C;QAC/D,KAAK,CAAC,IAAI,CAAC,CAAC;QAHK,kBAAa,GAAiC,IAAI,GAAG,EAAE,CAAC;IAI3E,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAoC;QACpD,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACvD,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,iEAAiE,CAAC,CAAC;SACtG;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,OAAsB;QAC9C,OAAO,IAAI,yCAAmB,CAC5B,IAAI,CAAC,0BAA0B,EAC/B,OAAO,EACP,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,iBAAiB,CACvB,CAAC;IACJ,CAAC;CACF;AA7BD,kFA6BC","sourcesContent":["import type { IActionRdfResolveQuadPattern,\n  IActorRdfResolveQuadPatternOutput, IDataSource, IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport {\n  ActorRdfResolveQuadPatternSource,\n} from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { ActionContext, Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\nimport { FederatedQuadSource } from './FederatedQuadSource';\n\n/**\n * A comunica Federated RDF Resolve Quad Pattern Actor.\n */\nexport class ActorRdfResolveQuadPatternFederated extends ActorRdfResolveQuadPatternSource\n  implements IActorRdfResolveQuadPatternFederatedArgs {\n  public readonly mediatorResolveQuadPattern: Mediator<Actor<IActionRdfResolveQuadPattern, IActorTest,\n  IActorRdfResolveQuadPatternOutput>, IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput>;\n\n  public readonly skipEmptyPatterns: boolean;\n\n  protected readonly emptyPatterns: Map<IDataSource, RDF.Quad[]> = new Map();\n\n  public constructor(args: IActorRdfResolveQuadPatternFederatedArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfResolveQuadPattern): Promise<IActorTest> {\n    const sources = this.getContextSources(action.context);\n    if (!sources) {\n      throw new Error(`Actor ${this.name} can only resolve quad pattern queries against a sources array.`);\n    }\n    return true;\n  }\n\n  protected async getSource(context: ActionContext): Promise<IQuadSource> {\n    return new FederatedQuadSource(\n      this.mediatorResolveQuadPattern,\n      context,\n      this.emptyPatterns,\n      this.skipEmptyPatterns,\n    );\n  }\n}\n\nexport interface IActorRdfResolveQuadPatternFederatedArgs\n  extends IActorArgs<IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput> {\n  mediatorResolveQuadPattern: Mediator<Actor<IActionRdfResolveQuadPattern, IActorTest,\n  IActorRdfResolveQuadPatternOutput>, IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput>;\n  skipEmptyPatterns?: boolean;\n}\n"]}