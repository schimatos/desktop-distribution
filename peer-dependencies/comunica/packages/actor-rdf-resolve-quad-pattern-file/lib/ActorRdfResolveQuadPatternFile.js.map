{"version":3,"file":"ActorRdfResolveQuadPatternFile.js","sourceRoot":"","sources":["ActorRdfResolveQuadPatternFile.ts"],"names":[],"mappings":";;;;;;AAKA,yFAEgD;AAEhD,0DAAiC;AACjC,2BAA2B;AAC3B,2DAAwD;AAExD;;GAEG;AACH,MAAa,8BAA+B,SAAQ,+DAAgC;IAUlF,YAAmB,IAAyC;QAC1D,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,KAAK,GAAG,IAAI,mBAAQ,CAAc,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QAChE,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,CAAC,EAAE,GAAG,EAAyB,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CACnF,CAAC;IACJ,CAAC;IAEM,cAAc,CAAC,IAAY,EAAE,OAAuB;QACzD,MAAM,YAAY,GAAG,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;aAC7E,IAAI,CAAC,CAAC,IAAgC,EAAE,EAAE,CAAC,IAAI,OAAO,CAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACjF,MAAM,KAAK,GAAU,IAAI,UAAK,EAAE,CAAC;YACjC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC/B,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC,CAAC;QACN,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QACnC,OAAO,YAAY,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,UAAU;;QACrB,OAAC,IAAI,CAAC,KAAK,mCAAI,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAoC;QACpD,IAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE;YAC9D,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,qEAAqE,CAAC,CAAC;SACpG;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,OAAsB;QAC9C,MAAM,IAAI,GAAuB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;QAC1F,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;SAC9D;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACzB,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SAC1C;QACD,OAAO,IAAI,qCAAiB,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAC;CACF;AApDD,wEAoDC","sourcesContent":["import type { ActorHttpInvalidateListenable, IActionHttpInvalidate } from '@comunica/bus-http-invalidate';\nimport type { IActionRdfDereference, IActorRdfDereferenceOutput } from '@comunica/bus-rdf-dereference';\nimport type { IActionRdfResolveQuadPattern,\n  IActorRdfResolveQuadPatternOutput,\n  IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport {\n  ActorRdfResolveQuadPatternSource,\n} from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { ActionContext, Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport LRUCache from 'lru-cache';\nimport { Store } from 'n3';\nimport { N3StoreQuadSource } from './N3StoreQuadSource';\n\n/**\n * A comunica File RDF Resolve Quad Pattern Actor.\n */\nexport class ActorRdfResolveQuadPatternFile extends ActorRdfResolveQuadPatternSource\n  implements IActorRdfResolveQuadPatternFileArgs {\n  public readonly mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>,\n  IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;\n\n  public readonly files?: string[];\n  public readonly cacheSize: number;\n  public readonly cache: LRUCache<string, Promise<Store>>;\n  public readonly httpInvalidator: ActorHttpInvalidateListenable;\n\n  public constructor(args: IActorRdfResolveQuadPatternFileArgs) {\n    super(args);\n    this.cache = new LRUCache<string, any>({ max: this.cacheSize });\n    this.httpInvalidator.addInvalidateListener(\n      ({ url }: IActionHttpInvalidate) => url ? this.cache.del(url) : this.cache.reset(),\n    );\n  }\n\n  public initializeFile(file: string, context?: ActionContext): Promise<any> {\n    const storePromise = this.mediatorRdfDereference.mediate({ context, url: file })\n      .then((page: IActorRdfDereferenceOutput) => new Promise<Store>((resolve, reject) => {\n        const store: Store = new Store();\n        page.quads.on('data', quad => store.addQuad(quad));\n        page.quads.on('error', reject);\n        page.quads.on('end', () => resolve(store));\n      }));\n    this.cache.set(file, storePromise);\n    return storePromise;\n  }\n\n  public async initialize(): Promise<any> {\n    (this.files ?? []).forEach(file => this.initializeFile(file));\n    return null;\n  }\n\n  public async test(action: IActionRdfResolveQuadPattern): Promise<IActorTest> {\n    if (!this.hasContextSingleSourceOfType('file', action.context)) {\n      throw new Error(`${this.name} requires a single source with a file to be present in the context.`);\n    }\n    return true;\n  }\n\n  protected async getSource(context: ActionContext): Promise<IQuadSource> {\n    const file: string | undefined = this.getContextSourceUrl(this.getContextSource(context));\n    if (!file) {\n      throw new Error('Illegal state: Invalid file source found.');\n    }\n    if (!this.cache.has(file)) {\n      await this.initializeFile(file, context);\n    }\n    return new N3StoreQuadSource(await this.cache.get(file));\n  }\n}\n\nexport interface IActorRdfResolveQuadPatternFileArgs\n  extends IActorArgs<IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput> {\n  /**\n   * The mediator to use for dereferencing files.\n   */\n  mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>,\n  IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;\n  /**\n   * The files to preload.\n   */\n  files?: string[];\n  /**\n   * The maximum number of files to be cached.\n   */\n  cacheSize: number;\n  /**\n   * An actor that listens to HTTP invalidation events\n   */\n  httpInvalidator: ActorHttpInvalidateListenable;\n}\n"]}