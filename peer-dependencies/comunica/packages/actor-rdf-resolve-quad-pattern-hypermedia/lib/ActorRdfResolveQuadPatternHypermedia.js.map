{"version":3,"file":"ActorRdfResolveQuadPatternHypermedia.js","sourceRoot":"","sources":["ActorRdfResolveQuadPatternHypermedia.ts"],"names":[],"mappings":";;;;;;AAaA,yFAEgD;AAEhD,0DAAiC;AAEjC,6DAA0D;AAE1D;;GAEG;AACH,MAAa,oCAAqC,SAAQ,+DAAgC;IAuBxF,YAAmB,IAA+C;QAChE,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,mBAAQ,CAAc,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC7F,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,eAAe,CAAC,qBAAqB,CACxC,CAAC,EAAE,GAAG,EAAyB,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,CACzE,CAAC;SACH;IACH,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAoC;QACpD,MAAM,OAAO,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC5D,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,iEAAiE,CAAC,CAAC;SACtG;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAES,SAAS,CAAC,OAAsB,EAAE,SAA0B;QACpE,MAAM,aAAa,GAAiB,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,GAAG,GAAY,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;QAC7D,IAAI,MAA0B,CAAC;QAE/B,yBAAyB;QACzB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACrC,MAAM,GAAwB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACnD;aAAM;YACL,uCAAuC;YACvC,MAAM,GAAG,IAAI,uCAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,GAAG,EAAE,gDAAiB,CAAC,aAAa,CAAC,EAAE;gBAC9F,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;gBACvC,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;gBACrD,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;gBACnD,4BAA4B,EAAE,IAAI,CAAC,4BAA4B;gBAC/D,iCAAiC,EAAE,IAAI,CAAC,iCAAiC;aAC1E,CAAC,CAAC;YAEH,eAAe;YACf,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;aAC7B;SACF;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;CACF;AApED,oFAoEC","sourcesContent":["import type { ActorHttpInvalidateListenable, IActionHttpInvalidate } from '@comunica/bus-http-invalidate';\nimport type { IActionRdfDereference, IActorRdfDereferenceOutput } from '@comunica/bus-rdf-dereference';\nimport type { IActionRdfMetadata, IActorRdfMetadataOutput } from '@comunica/bus-rdf-metadata';\nimport type { IActionRdfMetadataExtract, IActorRdfMetadataExtractOutput } from '@comunica/bus-rdf-metadata-extract';\nimport type { IActionRdfResolveHypermedia,\n  IActorRdfResolveHypermediaOutput } from '@comunica/bus-rdf-resolve-hypermedia';\nimport type {\n  IActionRdfResolveHypermediaLinks,\n  IActorRdfResolveHypermediaLinksOutput,\n} from '@comunica/bus-rdf-resolve-hypermedia-links';\nimport type { IActionRdfResolveQuadPattern,\n  IActorRdfResolveQuadPatternOutput, IDataSource,\n  IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport {\n  ActorRdfResolveQuadPatternSource, getDataSourceType,\n} from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { ActionContext, Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport LRUCache from 'lru-cache';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { MediatedQuadSource } from './MediatedQuadSource';\n\n/**\n * A comunica Hypermedia RDF Resolve Quad Pattern Actor.\n */\nexport class ActorRdfResolveQuadPatternHypermedia extends ActorRdfResolveQuadPatternSource\n  implements IActorRdfResolveQuadPatternHypermediaArgs {\n  // Mediators\n  public readonly mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest,\n  IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;\n\n  public readonly mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>,\n  IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>;\n\n  public readonly mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest,\n  IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>;\n\n  public readonly mediatorRdfResolveHypermedia: Mediator<Actor<IActionRdfResolveHypermedia, IActorTest,\n  IActorRdfResolveHypermediaOutput>, IActionRdfResolveHypermedia, IActorTest, IActorRdfResolveHypermediaOutput>;\n\n  public readonly mediatorRdfResolveHypermediaLinks: Mediator<Actor<IActionRdfResolveHypermediaLinks, IActorTest,\n  IActorRdfResolveHypermediaLinksOutput>, IActionRdfResolveHypermediaLinks, IActorTest,\n  IActorRdfResolveHypermediaLinksOutput>;\n\n  public readonly cacheSize: number;\n  public readonly cache?: LRUCache<string, MediatedQuadSource>;\n  public readonly httpInvalidator: ActorHttpInvalidateListenable;\n\n  public constructor(args: IActorRdfResolveQuadPatternHypermediaArgs) {\n    super(args);\n    this.cache = this.cacheSize ? new LRUCache<string, any>({ max: this.cacheSize }) : undefined;\n    const cache = this.cache;\n    if (cache) {\n      this.httpInvalidator.addInvalidateListener(\n        ({ url }: IActionHttpInvalidate) => url ? cache.del(url) : cache.reset(),\n      );\n    }\n  }\n\n  public async test(action: IActionRdfResolveQuadPattern): Promise<IActorTest> {\n    const sources = this.hasContextSingleSource(action.context);\n    if (!sources) {\n      throw new Error(`Actor ${this.name} can only resolve quad pattern queries against a single source.`);\n    }\n    return true;\n  }\n\n  protected getSource(context: ActionContext, operation: Algebra.Pattern): Promise<IQuadSource> {\n    const contextSource = <IDataSource> this.getContextSource(context);\n    const url = <string> this.getContextSourceUrl(contextSource);\n    let source: MediatedQuadSource;\n\n    // Try to read from cache\n    if (this.cache && this.cache.has(url)) {\n      source = <MediatedQuadSource> this.cache.get(url);\n    } else {\n      // If not in cache, create a new source\n      source = new MediatedQuadSource(this.cacheSize, context, url, getDataSourceType(contextSource), {\n        mediatorMetadata: this.mediatorMetadata,\n        mediatorMetadataExtract: this.mediatorMetadataExtract,\n        mediatorRdfDereference: this.mediatorRdfDereference,\n        mediatorRdfResolveHypermedia: this.mediatorRdfResolveHypermedia,\n        mediatorRdfResolveHypermediaLinks: this.mediatorRdfResolveHypermediaLinks,\n      });\n\n      // Set in cache\n      if (this.cache) {\n        this.cache.set(url, source);\n      }\n    }\n\n    return Promise.resolve(source);\n  }\n}\n\nexport interface IActorRdfResolveQuadPatternHypermediaArgs extends\n  IActorArgs<IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput> {\n  cacheSize: number;\n  httpInvalidator: ActorHttpInvalidateListenable;\n  mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest,\n  IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;\n  mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>,\n  IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>;\n  mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest,\n  IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>;\n  mediatorRdfResolveHypermedia: Mediator<Actor<IActionRdfResolveHypermedia, IActorTest,\n  IActorRdfResolveHypermediaOutput>, IActionRdfResolveHypermedia, IActorTest, IActorRdfResolveHypermediaOutput>;\n  mediatorRdfResolveHypermediaLinks: Mediator<Actor<IActionRdfResolveHypermediaLinks, IActorTest,\n  IActorRdfResolveHypermediaLinksOutput>, IActionRdfResolveHypermediaLinks, IActorTest,\n  IActorRdfResolveHypermediaLinksOutput>;\n}\n"]}