{"version":3,"file":"LinkedRdfSourcesAsyncRdfIterator.js","sourceRoot":"","sources":["LinkedRdfSourcesAsyncRdfIterator.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILink } from '@comunica/bus-rdf-resolve-hypermedia-links';\nimport type { IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { AsyncIterator } from 'asynciterator';\nimport { BufferedIterator } from 'asynciterator';\nimport LRUCache from 'lru-cache';\nimport type * as RDF from 'rdf-js';\n\n/**\n * An abstract quad iterator that can iterate over consecutive RDF sources.\n *\n * This iterator stores a queue of sources that need to be iterated over.\n * For each source, its collected metadata is maintained.\n */\nexport abstract class LinkedRdfSourcesAsyncRdfIterator extends BufferedIterator<RDF.Quad> implements RDF.Stream {\n  public sourcesState?: ISourcesState;\n\n  protected readonly subject: RDF.Term;\n  protected readonly predicate: RDF.Term;\n  protected readonly object: RDF.Term;\n  protected readonly graph: RDF.Term;\n  protected nextSource: ISourceState | undefined;\n  protected readonly linkQueue: ILink[];\n\n  private readonly cacheSize: number;\n  private readonly firstUrl: string;\n\n  private started = false;\n  private currentIterator: AsyncIterator<RDF.Quad> | undefined;\n\n  public constructor(cacheSize: number, subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term,\n    firstUrl: string) {\n    super({ autoStart: true });\n    this.cacheSize = cacheSize;\n    this.subject = subject;\n    this.predicate = predicate;\n    this.object = object;\n    this.graph = graph;\n    this.linkQueue = [];\n    this.firstUrl = firstUrl;\n  }\n\n  /**\n   * This method can optionally called after constructing an instance\n   * for allowing the sources state to be cached.\n   *\n   * When calling without args, then the default logic will be followed to determine the sources state.\n   * When calling with an arg, then the given sources state will be set instead of following the default logic.\n   *\n   * After calling this method, the `sourcesState` field can be retrieved and optionally cached.\n   *\n   * This sources state also contains a hash of all handled datasets that will be copied upon first use.\n   *\n   * @param {ISourcesState} sourcesState An optional sources state.\n   */\n  public setSourcesState(sourcesState?: ISourcesState): void {\n    if (sourcesState) {\n      this.sourcesState = sourcesState;\n    } else {\n      this.sourcesState = {\n        sources: new LRUCache<string, Promise<ISourceState>>({ max: this.cacheSize }),\n      };\n      // Ignore the response, we just want the promise to be cached\n      this.getSourceCached({ url: this.firstUrl }, {})\n        .catch(error => this.destroy(error));\n    }\n  }\n\n  /**\n   * Determine the links to be followed from the current source given its metadata.\n   * @param metadata The metadata of a source.\n   */\n  protected abstract getSourceLinks(metadata: Record<string, any>): Promise<ILink[]>;\n\n  /**\n   * Resolve a source for the given URL.\n   * @param link A source link.\n   * @param handledDatasets A hash of dataset identifiers that have already been handled.\n   */\n  protected abstract getSource(link: ILink, handledDatasets: Record<string, boolean>): Promise<ISourceState>;\n\n  /**\n   * Resolve a source for the given URL.\n   * This will first try to retrieve the source from cache.\n   * @param link A source ILink.\n   * @param handledDatasets A hash of dataset identifiers that have already been handled.\n   */\n  protected getSourceCached(link: ILink, handledDatasets: Record<string, boolean>): Promise<ISourceState> {\n    let source = (<ISourcesState> this.sourcesState).sources.get(link.url);\n    if (source) {\n      return source;\n    }\n    source = this.getSource(link, handledDatasets);\n    (<ISourcesState> this.sourcesState).sources.set(link.url, source);\n    return source;\n  }\n\n  public _read(count: number, done: () => void): void {\n    if (!this.started) {\n      // The first time this is called, prepare the first source\n      this.started = true;\n\n      // Create a sources state if needed (can be defined if set from actor cache)\n      if (!this.sourcesState) {\n        this.setSourcesState();\n      }\n\n      // Await the source to be set, and start the source iterator\n      this.getSourceCached({ url: this.firstUrl }, {})\n        .then(sourceState => {\n          this.setCurrentIterator(sourceState, true);\n          done();\n        })\n        .catch(error => {\n          // We can safely ignore this error, since it handled in setSourcesState\n          done();\n        });\n    } else if (this.currentIterator) {\n      // If an iterator has been set, read from it.\n      while (count > 0) {\n        const read = this.currentIterator.read();\n        if (read !== null) {\n          count--;\n          this._push(read);\n        } else {\n          break;\n        }\n      }\n      done();\n    } else {\n      // This can occur during source loading.\n      done();\n    }\n  }\n\n  /**\n   * Start a new iterator for the given source.\n   * Once the iterator is done, it will either determine a new source, or it will close the linked iterator.\n   * @param {ISourceState} startSource The start source state.\n   * @param {boolean} emitMetadata If the metadata event should be emitted.\n   */\n  protected setCurrentIterator(startSource: ISourceState, emitMetadata: boolean): void {\n    // Delegate the quad pattern query to the given source\n    this.currentIterator = (<IQuadSource> startSource.source)\n      .match(this.subject, this.predicate, this.object, this.graph);\n    let receivedMetadata = false;\n\n    // Attach readers to the newly created iterator\n    (<any> this.currentIterator)._destination = this;\n    this.currentIterator.on('error', (error: Error) => this.destroy(error));\n    this.currentIterator.on('readable', () => this._fillBuffer());\n    this.currentIterator.on('end', () => {\n      this.currentIterator = undefined;\n\n      // If the metadata was already received, handle the next URL in the queue\n      if (receivedMetadata) {\n        this.handleNextUrl(startSource);\n      }\n    });\n\n    // Listen for the metadata of the source\n    // The metadata property is guaranteed to be set\n    this.currentIterator.getProperty('metadata', (metadata: Record<string, any>) => {\n      startSource.metadata = { ...startSource.metadata, ...metadata };\n\n      // Emit metadata if needed\n      if (emitMetadata) {\n        this.setProperty('metadata', startSource.metadata);\n      }\n\n      // Determine next urls, which will eventually become a next-next source.\n      this.getSourceLinks(startSource.metadata)\n        .then((nextUrls: ILink[]) => Promise.all(nextUrls))\n        .then(async(nextUrls: ILink[]) => {\n          // Append all next URLs to our queue\n          for (const nextUrl of nextUrls) {\n            this.linkQueue.push(nextUrl);\n          }\n\n          // Handle the next queued URL if we don't have an active iterator (in which case it will be called later)\n          receivedMetadata = true;\n          if (!this.currentIterator) {\n            this.handleNextUrl(startSource);\n          }\n        }).catch(error => this.destroy(error));\n    });\n  }\n\n  /**\n   * Check if a next URL is in the queue.\n   * If yes, start a new iterator.\n   * If no, close this iterator.\n   * @param startSource\n   */\n  protected handleNextUrl(startSource: ISourceState): void {\n    if (this.linkQueue.length === 0) {\n      this.close();\n    } else {\n      this.getSourceCached(this.linkQueue[0], startSource.handledDatasets)\n        .then(nextSourceState => this.setCurrentIterator(nextSourceState, false))\n        .catch(error => this.destroy(error));\n      this.linkQueue.shift();\n    }\n  }\n}\n\n/**\n * A reusable sources state,\n * containing a cache of all source states.\n */\nexport interface ISourcesState {\n  /**\n   * A cache for source URLs to source states.\n   */\n  sources: LRUCache<string, Promise<ISourceState>>;\n}\n\n/**\n * The current state of a source.\n * This is needed for following links within a source.\n */\nexport interface ISourceState {\n  /**\n   * A source.\n   */\n  source?: IQuadSource;\n  /**\n   * The source's initial metadata.\n   */\n  metadata: Record<string, any>;\n  /**\n   * All dataset identifiers that have been passed for this source.\n   */\n  handledDatasets: Record<string, boolean>;\n}\n"]}