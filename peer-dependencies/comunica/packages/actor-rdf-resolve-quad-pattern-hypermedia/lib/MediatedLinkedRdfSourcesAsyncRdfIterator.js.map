{"version":3,"file":"MediatedLinkedRdfSourcesAsyncRdfIterator.js","sourceRoot":"","sources":["MediatedLinkedRdfSourcesAsyncRdfIterator.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionRdfDereference, IActorRdfDereferenceOutput } from '@comunica/bus-rdf-dereference';\nimport type { IActionRdfMetadata, IActorRdfMetadataOutput } from '@comunica/bus-rdf-metadata';\nimport type { IActionRdfMetadataExtract, IActorRdfMetadataExtractOutput } from '@comunica/bus-rdf-metadata-extract';\nimport type { IActionRdfResolveHypermedia,\n  IActorRdfResolveHypermediaOutput } from '@comunica/bus-rdf-resolve-hypermedia';\nimport type {\n  IActionRdfResolveHypermediaLinks,\n  IActorRdfResolveHypermediaLinksOutput, ILink,\n} from '@comunica/bus-rdf-resolve-hypermedia-links';\nimport type { ActionContext, Actor, IActorTest, Mediator } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\nimport type { ISourceState } from './LinkedRdfSourcesAsyncRdfIterator';\nimport { LinkedRdfSourcesAsyncRdfIterator } from './LinkedRdfSourcesAsyncRdfIterator';\n\n/**\n * An quad iterator that can iterate over consecutive RDF sources\n * that are determined using the rdf-resolve-hypermedia-links bus.\n *\n * @see LinkedRdfSourcesAsyncRdfIterator\n */\nexport class MediatedLinkedRdfSourcesAsyncRdfIterator extends LinkedRdfSourcesAsyncRdfIterator {\n  private readonly mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest,\n  IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;\n\n  private readonly mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>,\n  IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>;\n\n  private readonly mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest,\n  IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>;\n\n  private readonly mediatorRdfResolveHypermedia: Mediator<Actor<IActionRdfResolveHypermedia, IActorTest,\n  IActorRdfResolveHypermediaOutput>, IActionRdfResolveHypermedia, IActorTest, IActorRdfResolveHypermediaOutput>;\n\n  private readonly mediatorRdfResolveHypermediaLinks: Mediator<Actor<IActionRdfResolveHypermediaLinks, IActorTest,\n  IActorRdfResolveHypermediaLinksOutput>, IActionRdfResolveHypermediaLinks, IActorTest,\n  IActorRdfResolveHypermediaLinksOutput>;\n\n  private readonly context: ActionContext;\n  private readonly forceSourceType?: string;\n  private readonly handledUrls: Record<string, boolean>;\n\n  public constructor(cacheSize: number, context: ActionContext, forceSourceType: string | undefined,\n    subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term,\n    firstUrl: string, mediators: IMediatorArgs) {\n    super(cacheSize, subject, predicate, object, graph, firstUrl);\n    this.context = context;\n    this.forceSourceType = forceSourceType;\n    this.mediatorRdfDereference = mediators.mediatorRdfDereference;\n    this.mediatorMetadata = mediators.mediatorMetadata;\n    this.mediatorMetadataExtract = mediators.mediatorMetadataExtract;\n    this.mediatorRdfResolveHypermedia = mediators.mediatorRdfResolveHypermedia;\n    this.mediatorRdfResolveHypermediaLinks = mediators.mediatorRdfResolveHypermediaLinks;\n    this.handledUrls = {};\n  }\n\n  protected async getSourceLinks(metadata: Record<string, any>): Promise<ILink[]> {\n    try {\n      const { urls } = await this.mediatorRdfResolveHypermediaLinks.mediate({ context: this.context, metadata });\n      const links: ILink[] = urls.map(url => typeof url === 'string' ? { url } : url);\n\n      // Filter URLs to avoid cyclic next-page loops\n      return links.filter(link => {\n        if (this.handledUrls[link.url]) {\n          return false;\n        }\n        this.handledUrls[link.url] = true;\n        return true;\n      });\n    } catch {\n      // No next URLs may be available, for example when we've reached the end of a Hydra next-page sequence.\n      return [];\n    }\n  }\n\n  protected async getSource(link: ILink, handledDatasets: Record<string, boolean>): Promise<ISourceState> {\n    // Include context entries from link\n    let context = this.context;\n    if (link.context) {\n      context = context.merge(link.context);\n    }\n\n    // Get the RDF representation of the given document\n    let url = link.url;\n    const rdfDereferenceOutput: IActorRdfDereferenceOutput = await this.mediatorRdfDereference\n      .mediate({ context, url });\n    url = rdfDereferenceOutput.url;\n\n    // Determine the metadata\n    const rdfMetadataOuput: IActorRdfMetadataOutput = await this.mediatorMetadata.mediate(\n      { context, url, quads: rdfDereferenceOutput.quads, triples: rdfDereferenceOutput.triples },\n    );\n    const { metadata } = await this.mediatorMetadataExtract\n      .mediate({ context, url, metadata: rdfMetadataOuput.metadata });\n\n    // Optionally filter the resulting data\n    if (link.transform) {\n      rdfMetadataOuput.data = await link.transform(rdfMetadataOuput.data);\n    }\n\n    // Determine the source\n    const { source, dataset } = await this.mediatorRdfResolveHypermedia.mediate({\n      context,\n      forceSourceType: this.forceSourceType,\n      handledDatasets,\n      metadata,\n      quads: rdfMetadataOuput.data,\n      url,\n    });\n\n    if (dataset) {\n      // Mark the dataset as applied\n      // This is needed to make sure that things like QPF search forms are only applied once,\n      // and next page links are followed after that.\n      handledDatasets[dataset] = true;\n    }\n\n    return { source, metadata, handledDatasets };\n  }\n}\n\nexport interface IMediatorArgs {\n  mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest,\n  IActorRdfDereferenceOutput>, IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;\n  mediatorMetadata: Mediator<Actor<IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>,\n  IActionRdfMetadata, IActorTest, IActorRdfMetadataOutput>;\n  mediatorMetadataExtract: Mediator<Actor<IActionRdfMetadataExtract, IActorTest,\n  IActorRdfMetadataExtractOutput>, IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>;\n  mediatorRdfResolveHypermedia: Mediator<Actor<IActionRdfResolveHypermedia, IActorTest,\n  IActorRdfResolveHypermediaOutput>, IActionRdfResolveHypermedia, IActorTest, IActorRdfResolveHypermediaOutput>;\n  mediatorRdfResolveHypermediaLinks: Mediator<Actor<IActionRdfResolveHypermediaLinks, IActorTest,\n  IActorRdfResolveHypermediaLinksOutput>, IActionRdfResolveHypermediaLinks, IActorTest,\n  IActorRdfResolveHypermediaLinksOutput>;\n}\n"]}