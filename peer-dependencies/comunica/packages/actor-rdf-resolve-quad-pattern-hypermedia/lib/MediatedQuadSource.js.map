{"version":3,"file":"MediatedQuadSource.js","sourceRoot":"","sources":["MediatedQuadSource.ts"],"names":[],"mappings":";;;AAMA,yGAAsG;AAEtG;;;;GAIG;AACH,MAAa,kBAAkB;IAU7B,YAAmB,SAAiB,EAAE,OAAsB,EAAE,QAAgB,EAC5E,eAAmC,EAAE,SAAwB;QAC7D,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,OAAiB,EAAE,SAAmB,EAAE,MAAgB,EAAE,KAAe;QACpF,MAAM,EAAE,GAAG,IAAI,mFAAwC,CACrD,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,eAAe,EACpB,OAAO,EACP,SAAS,EACT,MAAM,EACN,KAAK,EACL,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,SAAS,CACf,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,EAAE,CAAC,eAAe,EAAE,CAAC;YACrB,IAAI,CAAC,YAAY,GAAmB,EAAE,CAAC,YAAY,CAAC;SACrD;aAAM;YACL,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACvC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AAvCD,gDAuCC","sourcesContent":["import type { IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { ActionContext } from '@comunica/core';\nimport type { AsyncIterator } from 'asynciterator';\nimport type * as RDF from 'rdf-js';\nimport type { ISourcesState } from './LinkedRdfSourcesAsyncRdfIterator';\nimport type { IMediatorArgs } from './MediatedLinkedRdfSourcesAsyncRdfIterator';\nimport { MediatedLinkedRdfSourcesAsyncRdfIterator } from './MediatedLinkedRdfSourcesAsyncRdfIterator';\n\n/**\n * A lazy quad source that creates {@link MediatedLinkedRdfSourcesAsyncRdfIterator} instances when matching quads.\n *\n * @see MediatedLinkedRdfSourcesAsyncRdfIterator\n */\nexport class MediatedQuadSource implements IQuadSource {\n  public readonly context: ActionContext;\n  public readonly firstUrl: string;\n  public readonly forceSourceType?: string;\n  public readonly mediators: IMediatorArgs;\n\n  public sourcesState: ISourcesState;\n\n  private readonly cacheSize: number;\n\n  public constructor(cacheSize: number, context: ActionContext, firstUrl: string,\n    forceSourceType: string | undefined, mediators: IMediatorArgs) {\n    this.cacheSize = cacheSize;\n    this.context = context;\n    this.firstUrl = firstUrl;\n    this.forceSourceType = forceSourceType;\n    this.mediators = mediators;\n  }\n\n  public match(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term): AsyncIterator<RDF.Quad> {\n    const it = new MediatedLinkedRdfSourcesAsyncRdfIterator(\n      this.cacheSize,\n      this.context,\n      this.forceSourceType,\n      subject,\n      predicate,\n      object,\n      graph,\n      this.firstUrl,\n      this.mediators,\n    );\n    if (!this.sourcesState) {\n      it.setSourcesState();\n      this.sourcesState = <ISourcesState> it.sourcesState;\n    } else {\n      it.setSourcesState(this.sourcesState);\n    }\n    return it;\n  }\n}\n"]}