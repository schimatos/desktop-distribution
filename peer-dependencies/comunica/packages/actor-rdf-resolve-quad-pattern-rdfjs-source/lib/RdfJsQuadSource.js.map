{"version":3,"file":"RdfJsQuadSource.js","sourceRoot":"","sources":["RdfJsQuadSource.ts"],"names":[],"mappings":";;;AAEA,iDAA0D;AAI1D;;GAEG;AACH,MAAa,eAAe;IAG1B,YAAmB,MAA4B;QAC7C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAAC,IAAe;QAC5C,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;IAClE,CAAC;IAEM,KAAK,CAAC,OAAiB,EAAE,SAAmB,EAAE,MAAgB,EAAE,KAAe;QACpF,wDAAwD;QACxD,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CACjC,eAAe,CAAC,gBAAgB,CAAC,OAAO,CAAC,EACzC,eAAe,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAC3C,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,EACxC,eAAe,CAAC,gBAAgB,CAAC,KAAK,CAAC,CACxC,CAAC;QACF,MAAM,EAAE,GAAG,oBAAiB,CAAW,SAAS,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAExE,qBAAqB;QACrB,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC;aACpD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QAErC,OAAO,EAAE,CAAC;IACZ,CAAC;IAES,KAAK,CAAC,WAAW,CACzB,EAA2B,EAC3B,OAAiB,EACjB,SAAmB,EACnB,MAAgB,EAChB,KAAe;QAEf,IAAI,UAAkB,CAAC;QACvB,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;YAC1B,mFAAmF;YACnF,UAAU,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CACvC,eAAe,CAAC,gBAAgB,CAAC,OAAO,CAAC,EACzC,eAAe,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAC3C,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,EACxC,eAAe,CAAC,gBAAgB,CAAC,KAAK,CAAC,CACxC,CAAC;SACH;aAAM;YACL,sGAAsG;YACtG,2DAA2D;YAC3D,oEAAoE;YACpE,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,UAAU,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACjD,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAC/B,eAAe,CAAC,gBAAgB,CAAC,OAAO,CAAC,EACzC,eAAe,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAC3C,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,EACxC,eAAe,CAAC,gBAAgB,CAAC,KAAK,CAAC,CACxC,CAAC;gBACF,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC5B,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;SACJ;QACD,EAAE,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;IAC7C,CAAC;CACF;AA/DD,0CA+DC","sourcesContent":["import type { IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { AsyncIterator } from 'asynciterator';\nimport { wrap as wrapAsyncIterator } from 'asynciterator';\nimport type * as RDF from 'rdf-js';\nimport type { IRdfJsSourceExtended } from './IRdfJsSourceExtended';\n\n/**\n * A quad source that wraps over an {@link RDF.Source}.\n */\nexport class RdfJsQuadSource implements IQuadSource {\n  private readonly source: IRdfJsSourceExtended;\n\n  public constructor(source: IRdfJsSourceExtended) {\n    this.source = source;\n  }\n\n  public static nullifyVariables(term?: RDF.Term): RDF.Term | undefined {\n    return !term || term.termType === 'Variable' ? undefined : term;\n  }\n\n  public match(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term): AsyncIterator<RDF.Quad> {\n    // Create an async iterator from the matched quad stream\n    const rawStream = this.source.match(\n      RdfJsQuadSource.nullifyVariables(subject),\n      RdfJsQuadSource.nullifyVariables(predicate),\n      RdfJsQuadSource.nullifyVariables(object),\n      RdfJsQuadSource.nullifyVariables(graph),\n    );\n    const it = wrapAsyncIterator<RDF.Quad>(rawStream, { autoStart: false });\n\n    // Determine metadata\n    this.setMetadata(it, subject, predicate, object, graph)\n      .catch(error => it.destroy(error));\n\n    return it;\n  }\n\n  protected async setMetadata(\n    it: AsyncIterator<RDF.Quad>,\n    subject: RDF.Term,\n    predicate: RDF.Term,\n    object: RDF.Term,\n    graph: RDF.Term,\n  ): Promise<void> {\n    let totalItems: number;\n    if (this.source.countQuads) {\n      // If the source provides a dedicated method for determining cardinality, use that.\n      totalItems = await this.source.countQuads(\n        RdfJsQuadSource.nullifyVariables(subject),\n        RdfJsQuadSource.nullifyVariables(predicate),\n        RdfJsQuadSource.nullifyVariables(object),\n        RdfJsQuadSource.nullifyVariables(graph),\n      );\n    } else {\n      // Otherwise, fallback to a sub-optimal alternative where we just call match again to count the quads.\n      // WARNING: we can NOT reuse the original data stream here,\n      // because we may loose data elements due to things happening async.\n      let i = 0;\n      totalItems = await new Promise((resolve, reject) => {\n        const matches = this.source.match(\n          RdfJsQuadSource.nullifyVariables(subject),\n          RdfJsQuadSource.nullifyVariables(predicate),\n          RdfJsQuadSource.nullifyVariables(object),\n          RdfJsQuadSource.nullifyVariables(graph),\n        );\n        matches.on('error', reject);\n        matches.on('end', () => resolve(i));\n        matches.on('data', () => i++);\n      });\n    }\n    it.setProperty('metadata', { totalItems });\n  }\n}\n"]}