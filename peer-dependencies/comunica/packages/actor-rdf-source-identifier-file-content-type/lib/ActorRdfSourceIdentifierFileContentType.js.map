{"version":3,"file":"ActorRdfSourceIdentifierFileContentType.js","sourceRoot":"","sources":["ActorRdfSourceIdentifierFileContentType.ts"],"names":[],"mappings":";;;AAGA,mFAE6C;AAI7C;;GAEG;AACH,MAAa,uCAAwC,SAAQ,oDAAwB;IAKnF,YAAmB,IAAkD;QACnE,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAkC;QAClD,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAY,IAAI,OAAO,EAAE,CAAC;QACvC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3D,MAAM,UAAU,GAAgB,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO;YACvD,IAAI,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE;YACjC,KAAK,EAAE,SAAS,EAAE,CAAC;QACrB,MAAM,YAAY,GAAqB,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACnF,IAAI,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;YAC/D,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,SAAiB,EAAE,EAAE;gBACjD,MAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBAC7D,OAAO,WAAW,IAAI,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC,EAAE;YACL,MAAM,IAAI,KAAK,CAAC,GAAG,SAAS,KAAK,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;4CACnC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;SACjE;QACD,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAkC;QACjD,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;IAChC,CAAC;CACF;AA/BD,0FA+BC","sourcesContent":["import type { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport type { IActionRdfSourceIdentifier, IActorRdfSourceIdentifierArgs,\n  IActorRdfSourceIdentifierOutput } from '@comunica/bus-rdf-source-identifier';\nimport {\n  ActorRdfSourceIdentifier,\n} from '@comunica/bus-rdf-source-identifier';\nimport type { Actor, IActorTest, Mediator } from '@comunica/core';\nimport type { IMediatorTypePriority } from '@comunica/mediatortype-priority';\n\n/**\n * A comunica File Content Type RDF Source Identifier Actor.\n */\nexport class ActorRdfSourceIdentifierFileContentType extends ActorRdfSourceIdentifier {\n  public readonly allowedMediaTypes: string[];\n  public readonly mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>;\n\n  public constructor(args: IActorRdfSourceIdentifierFileContentTypeArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfSourceIdentifier): Promise<IMediatorTypePriority> {\n    const sourceUrl = this.getSourceUrl(action);\n    const headers: Headers = new Headers();\n    headers.append('Accept', this.allowedMediaTypes.join(','));\n    const httpAction: IActionHttp = { context: action.context,\n      init: { headers, method: 'HEAD' },\n      input: sourceUrl };\n    const httpResponse: IActorHttpOutput = await this.mediatorHttp.mediate(httpAction);\n    if (!httpResponse.ok || (httpResponse.headers.has('Content-Type') &&\n      !this.allowedMediaTypes.find((mediaType: string) => {\n        const contentType = httpResponse.headers.get('Content-Type');\n        return contentType && contentType.includes(mediaType);\n      }))) {\n      throw new Error(`${sourceUrl} (${httpResponse.headers.get('Content-Type')}) \\\nis not an RDF file of valid content type: ${this.allowedMediaTypes}`);\n    }\n    return { priority: this.priority };\n  }\n\n  public async run(action: IActionRdfSourceIdentifier): Promise<IActorRdfSourceIdentifierOutput> {\n    return { sourceType: 'file' };\n  }\n}\n\nexport interface IActorRdfSourceIdentifierFileContentTypeArgs\n  extends IActorRdfSourceIdentifierArgs {\n  allowedMediaTypes: string[];\n  mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>;\n}\n"]}