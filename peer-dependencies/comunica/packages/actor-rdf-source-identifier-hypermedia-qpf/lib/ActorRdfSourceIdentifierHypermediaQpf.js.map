{"version":3,"file":"ActorRdfSourceIdentifierHypermediaQpf.js","sourceRoot":"","sources":["ActorRdfSourceIdentifierHypermediaQpf.ts"],"names":[],"mappings":";;;AACA,iDAA+C;AAG/C,mFAE6C;AAG7C,gCAA8B;AAE9B;;GAEG;AACH,MAAa,qCAAsC,SAAQ,oDAAwB;IAOjF,YAAmB,IAAgD;QACjE,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAkC;QAClD,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAY,IAAI,OAAO,EAAE,CAAC;QACvC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAE5C,MAAM,UAAU,GAAgB,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,EAAC,CAAC;QAChG,MAAM,YAAY,GAAqB,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACnF,IAAI,YAAY,CAAC,EAAE,IAAI,YAAY,CAAC,IAAI,EAAE;YACxC,MAAM,MAAM,GAAG,oBAAS,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC3D,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,kBAAkB,CAAC,CAAC,MAAM,CAAC,CAAC;YAEvD,6CAA6C;YAC7C,IAAI,KAAK,GAAG,IAAI,CAAC;YACjB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,SAAS,EAAE;gBACjC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;oBACxB,KAAK,GAAG,KAAK,CAAC;oBACd,MAAM;iBACP;aACF;YACD,IAAI,KAAK,EAAE;gBACT,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aACpC;SACF;QAED,qBAAqB;QACrB,IAAI,YAAY,CAAC,IAAI,EAAE;YACrB,MAAM,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;SAClC;QAED,MAAM,IAAI,KAAK,CAAC,GAAG,SAAS,sCAAsC,CAAC,CAAC;IACtE,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAkC;QACjD,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC;IACtC,CAAC;CACF;AA9CD,sFA8CC","sourcesContent":["import type { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport { ActorHttp } from '@comunica/bus-http';\nimport type { IActionRdfSourceIdentifier, IActorRdfSourceIdentifierArgs,\n  IActorRdfSourceIdentifierOutput } from '@comunica/bus-rdf-source-identifier';\nimport {\n  ActorRdfSourceIdentifier,\n} from '@comunica/bus-rdf-source-identifier';\nimport type { Actor, IActorTest, Mediator } from '@comunica/core';\nimport type { IMediatorTypePriority } from '@comunica/mediatortype-priority';\nimport 'cross-fetch/polyfill';\n\n/**\n * A comunica Hypermedia Qpf RDF Source Identifier Actor.\n */\nexport class ActorRdfSourceIdentifierHypermediaQpf extends ActorRdfSourceIdentifier {\n  public readonly mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>;\n\n  public readonly acceptHeader: string;\n  public readonly toContain: string[];\n\n  public constructor(args: IActorRdfSourceIdentifierHypermediaQpfArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfSourceIdentifier): Promise<IMediatorTypePriority> {\n    const sourceUrl = this.getSourceUrl(action);\n    const headers: Headers = new Headers();\n    headers.append('Accept', this.acceptHeader);\n\n    const httpAction: IActionHttp = { context: action.context, input: sourceUrl, init: { headers }};\n    const httpResponse: IActorHttpOutput = await this.mediatorHttp.mediate(httpAction);\n    if (httpResponse.ok && httpResponse.body) {\n      const stream = ActorHttp.toNodeReadable(httpResponse.body);\n      const body = await require('stream-to-string')(stream);\n\n      // Check if body contains all required things\n      let valid = true;\n      for (const line of this.toContain) {\n        if (!body.includes(line)) {\n          valid = false;\n          break;\n        }\n      }\n      if (valid) {\n        return { priority: this.priority };\n      }\n    }\n\n    // Avoid memory leaks\n    if (httpResponse.body) {\n      await httpResponse.body.cancel();\n    }\n\n    throw new Error(`${sourceUrl} is not a (QPF) hypermedia interface`);\n  }\n\n  public async run(action: IActionRdfSourceIdentifier): Promise<IActorRdfSourceIdentifierOutput> {\n    return { sourceType: 'hypermedia' };\n  }\n}\n\nexport interface IActorRdfSourceIdentifierHypermediaQpfArgs\n  extends IActorRdfSourceIdentifierArgs {\n  mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>;\n  acceptHeader: string;\n  toContain: string[];\n}\n"]}