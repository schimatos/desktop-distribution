{"version":3,"file":"ActorRdfSourceIdentifierSparql.js","sourceRoot":"","sources":["ActorRdfSourceIdentifierSparql.ts"],"names":[],"mappings":";;;AAGA,mFAE6C;AAI7C;;GAEG;AACH,MAAa,8BAA+B,SAAQ,oDAAwB;IAI1E,YAAmB,IAAyC;QAC1D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAkC;QAClD,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,GAAG,GAAG,GAAG,SAAS,UAAU,kBAAkB,CAAC,iBAAiB,CAAC,EAAE,CAAC;QAC1E,MAAM,OAAO,GAAY,IAAI,OAAO,EAAE,CAAC;QACvC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,iCAAiC,CAAC,CAAC;QAC5D,MAAM,UAAU,GAAgB,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,EAAC,CAAC;QACzG,MAAM,YAAY,GAAqB,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEnF,8GAA8G;QAC9G,IAAI,YAAY,CAAC,IAAI,EAAE;YACrB,MAAM,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;SAClC;QAED,MAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC7D,IAAI,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,iCAAiC,CAAC,EAAE;YAChG,MAAM,IAAI,KAAK,CAAC,GAAG,SAAS,2BAA2B,CAAC,CAAC;SAC1D;QACD,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAkC;QACjD,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC;IAClC,CAAC;CACF;AA/BD,wEA+BC","sourcesContent":["import type { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport type { IActionRdfSourceIdentifier, IActorRdfSourceIdentifierArgs,\n  IActorRdfSourceIdentifierOutput } from '@comunica/bus-rdf-source-identifier';\nimport {\n  ActorRdfSourceIdentifier,\n} from '@comunica/bus-rdf-source-identifier';\nimport type { Actor, IActorTest, Mediator } from '@comunica/core';\nimport type { IMediatorTypePriority } from '@comunica/mediatortype-priority';\n\n/**\n * A comunica SPARQL RDF Source Identifier Actor.\n */\nexport class ActorRdfSourceIdentifierSparql extends ActorRdfSourceIdentifier {\n  public readonly mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>;\n\n  public constructor(args: IActorRdfSourceIdentifierSparqlArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfSourceIdentifier): Promise<IMediatorTypePriority> {\n    const sourceUrl = this.getSourceUrl(action);\n    const url = `${sourceUrl}?query=${encodeURIComponent('ASK { ?s a ?o }')}`;\n    const headers: Headers = new Headers();\n    headers.append('Accept', 'application/sparql-results+json');\n    const httpAction: IActionHttp = { context: action.context, input: url, init: { headers, method: 'GET' }};\n    const httpResponse: IActorHttpOutput = await this.mediatorHttp.mediate(httpAction);\n\n    // No need to process the body. (HEAD requests would be better, but not all endpoints implement that properly)\n    if (httpResponse.body) {\n      await httpResponse.body.cancel();\n    }\n\n    const contentType = httpResponse.headers.get('Content-Type');\n    if (!httpResponse.ok || !contentType || !contentType.includes('application/sparql-results+json')) {\n      throw new Error(`${sourceUrl} is not a SPARQL endpoint`);\n    }\n    return { priority: this.priority };\n  }\n\n  public async run(action: IActionRdfSourceIdentifier): Promise<IActorRdfSourceIdentifierOutput> {\n    return { sourceType: 'sparql' };\n  }\n}\n\nexport interface IActorRdfSourceIdentifierSparqlArgs\n  extends IActorRdfSourceIdentifierArgs {\n  mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n  IActionHttp, IActorTest, IActorHttpOutput>;\n}\n"]}