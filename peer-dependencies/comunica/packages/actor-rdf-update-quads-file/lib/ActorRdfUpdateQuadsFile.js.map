{"version":3,"file":"ActorRdfUpdateQuadsFile.js","sourceRoot":"","sources":["ActorRdfUpdateQuadsFile.ts"],"names":[],"mappings":"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","sourcesContent":["import { QuadStream } from '@comunica/bus-query-operation';\nimport { IActionRdfCombineQuads, IActorRdfCombineQuadsOutput, IQuadStreamUpdate } from '@comunica/bus-rdf-combine-quads';\nimport { IActionRdfDereference, IActorRdfDereferenceOutput } from '@comunica/bus-rdf-dereference';\nimport { IActionRdfSerialize, IActorRdfSerializeOutput } from '@comunica/bus-rdf-serialize';\nimport { IActionRdfUpdateQuadStream, IActorRdfUpdateQuadStreamOutput } from '@comunica/bus-rdf-update-quad-stream';\nimport { ActorRdfUpdateQuads, IActionRdfUpdateQuads, IActorRdfUpdateQuadsOutput } from '@comunica/bus-rdf-update-quads';\nimport { IActionRdfWrite, IActorRdfWriteOutput } from '@comunica/bus-rdf-write';\nimport { Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport { DataSourceUtils } from '@comunica/utils-datasource';\nimport { AsyncIterator } from 'asynciterator';\nimport * as RDF from 'rdf-js';\nconst streamToArray = require('arrayify-stream')\nimport * as N3 from 'n3'\nimport { sha1 } from 'hash.js';\n// import toQuad from 'rdf-quad';\nimport { quadToStringQuad } from 'rdf-string';\nimport { ActorRdfWriteFile } from '@comunica/actor-rdf-write-file'\nimport * as fs from 'fs'\n/**\n * A comunica File RDF Update Quads Actor.\n */\nexport class ActorRdfUpdateQuadsFile extends ActorRdfUpdateQuads {\n  mediatorRdfDereference: Mediator<Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>, \n  IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>;\n  mediatorRdfWrite: Mediator<Actor<IActionRdfWrite, IActorTest, IActorRdfWriteOutput>, \n  IActionRdfWrite, IActorTest, IActorRdfWriteOutput>;\n  mediatorCombineQuads: Mediator<Actor<IActionRdfCombineQuads, IActorTest, IActorRdfCombineQuadsOutput>, \n  IActionRdfCombineQuads, IActorTest, IActorRdfCombineQuadsOutput>;\n\n  public constructor(args: IActorArgs<IActionRdfUpdateQuads, IActorTest, IActorRdfUpdateQuadsOutput>) {\n    super(args);\n  }\n\n  public async testOperation(action: IActionRdfUpdateQuads): Promise<IActorTest> {\n    // TODO: Forward test results\n    console.log('test quads file')\n    return true; // TODO implement\n  }\n\n  hash(quad: RDF.Quad): string {\n    return sha1()\n      .update(require('canonicalize')(quadToStringQuad(quad)))\n      .digest('hex');\n  }\n\n  public async runOperation(action: IActionRdfUpdateQuads): Promise<IActorRdfUpdateQuadsOutput> {\n    // TODO: FIX\n    console.log(\"run quads file\");\n    const source = await DataSourceUtils.getSingleSource(action.context);\n    console.log(source)\n    const dereferenced =  await this.mediatorRdfDereference.mediate({\n      // @ts-ignore\n      url: source?.value,\n      context: action.context\n    });\n    console.log(dereferenced)\n    const { quads: dereferencedQuads, url } = dereferenced;\n    // const parser = new N3.StreamParser();\n    // parser.write()\n    // // @ts-ignore\n    // const quadStream: QuadStream = new AsyncIterator<RDF.Quad>();\n    // console.log('looking at derefffed', await streamToArray(dereferencedQuads))\n    // console.log('looking at derefffed', await streamToArray(action.quadStreamInsert))\n    \n    let quads = [...await streamToArray(dereferencedQuads), ...(action.quadStreamInsert ? await streamToArray(action.quadStreamInsert) : [])]\n    const hashes: Record<string, boolean> = {};\n\n    if (action.quadStreamDelete) {\n      const deleted = await streamToArray(action.quadStreamDelete);\n      for (const x of deleted) {\n        hashes[this.hash(x)] = true;\n      }\n    }\n\n    quads = quads.filter(quad => {\n      const hash = this.hash(quad);\n      return !(hash in hashes) && (hashes[hash] = true);\n    })\n    \n    \n    // dereferencedQuads.on('data', (quad: RDF.Quad) => {\n    //   console.log('quad', quad)\n    //   // quadStream.append([ quad ]);\n    // })\n    // console.log('after dereffed')\n\n\n    // dereferencedQuads.on('end', () => {\n    //   quadStream.close();\n    // })\n\n    // let quadStreamUpdates: IQuadStreamUpdate[] = [];\n\n    // if (action.quadStreamInsert) {\n    //   quadStreamUpdates.push({\n    //     type: 'insert', quadStream: action.quadStreamInsert\n    //   })\n    // }\n\n    // if (action.quadStreamDelete) {\n    //   quadStreamUpdates.push({\n    //     type: 'insert', quadStream: action.quadStreamDelete\n    //   })\n    // }\n    // console.log(this.mediatorCombineQuads, 'combine')\n    // console.log('before combine')\n    // const { quads, quadStreamInserted, quadStreamDeleted } = await this.mediatorCombineQuads.mediate({\n    //   quads: quadStream,\n    //   quadStreamUpdates\n    //   // quadStreamInsert: action.quadStreamInsert,\n    //   // quadStreamDelete: action.quadStreamDelete,\n    // });\n    console.log('after combine')\n    // console.log(quads)\n    // quads.on('data', quad => {\n    //   console.log(quad);\n    // })\n    // await new Promise((res, rej) => {\n    //   quads.on('end', () => {\n    //     res(undefined);\n    //   })\n    // });\n    console.log('after promise')\n    // new Promise((res, rej) => {\n    //   setTimeout(() => {\n    //     res(void);\n    //   }, 10000);\n    // })\n\n    // const myTestQuads = new AsyncIterator<RDF.Quad>();\n    // myTestQuads.append([\n    //   // toQuad('http://example,org/1','http://example,org/2','http://example,org/3')\n    //   // {\n    //   //   subject: new namedNode(''),\n    //   //   predicate: new namedNode(''),\n    //   //   object: new namedNode('')\n    //   // }\n    // ])\n\n    // TODO: Handle rejection of this operation and\n    // remove quads that could not be serialized from quadStreamInserted\n    // @ts-ignore\n    // console.log(this)\n    const writer = new N3.Writer();\n    // writer.addQuads(quads);\n    await new Promise((res, rej) => {\n      const s = writer.quadsToString(quads);\n      console.log('file string')\n      fs.writeFile(url, s, () => {res(undefined)});\n    })\n    console.log('after writer')\n    // writer.quadsToString(quads)\n\n\n    // const writeStream = new StreamWriter({ format: mediaType }).import(new AsyncIterator<RDF.Quad>().append(quads));\n    // fs.wr(writeStream)\n\n    // await this.mediatorRdfWrite.mediate({\n    //   url,\n    //   quads: new AsyncIterator<RDF.Quad>().append(quads),\n    // })\n    \n    \n    // await (new ActorRdfWriteFile).run({\n    //   url,\n    //   quads\n    // });\n\n    // TODO: Fix based on above ammendments\n    return {\n      quadStreamInserted: new AsyncIterator<RDF.Quad>(),\n      quadStreamDeleted: new AsyncIterator<RDF.Quad>()\n    }\n\n    // this.mediatorParse.mediate({\n\n    // })\n    \n    // return true; // TODO implement\n  }\n}\n"]}