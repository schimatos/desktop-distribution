{"version":3,"file":"ActorRdfUpdateQuadsSparqlEndpoint.js","sourceRoot":"","sources":["ActorRdfUpdateQuadsSparqlEndpoint.ts"],"names":[],"mappings":"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","sourcesContent":["import { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport { ActorRdfUpdateQuads, IActionRdfUpdateQuads, IActorRdfUpdateQuadsOutput } from '@comunica/bus-rdf-update-quads';\nimport { ActionContext, Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport { DataSourceUtils } from '@comunica/utils-datasource';\nimport { Factory, toSparql } from 'sparqlalgebrajs';\nimport { SparqlEndpointFetcher } from 'fetch-sparql-endpoint';\nimport { getDataSourceType, getDataSourceValue } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport * as RDF from 'rdf-js';\nimport { Pattern } from 'sparqlalgebrajs/lib/algebra';\n// import { QuadStream } from '@comunica/bus-query-operation';\n// import { AsyncIterator } from 'asynciterator';\n// import arrayifyStream from 'arrayify-stream'\n\n/**\n * A comunica Sparql Endpoint RDF Update Quads Actor.\n */\nexport class ActorRdfUpdateQuadsSparqlEndpoint extends ActorRdfUpdateQuads {\n  protected static readonly FACTORY: Factory = new Factory();\n\n  public readonly mediatorHttp: Mediator<Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n    IActionHttp, IActorTest, IActorHttpOutput>;\n\n  public readonly endpointFetcher: SparqlEndpointFetcher;\n\n  protected lastContext?: ActionContext;\n\n  public constructor(args: IActorArgs<IActionRdfUpdateQuads, IActorTest, IActorRdfUpdateQuadsOutput>) {\n    super(args);\n    // TODO: Make sure endpoint fetcher is selecting and endpoint that allows updates\n    this.endpointFetcher = new SparqlEndpointFetcher({\n      fetch: (input: Request | string, init?: RequestInit) => this.mediatorHttp.mediate(\n        { input, init, context: this.lastContext },\n      ),\n      prefixVariableQuestionMark: true,\n    });\n  }\n\n  // TODO: Add test to ensure update requests are allowed.\n  public async testOperation(action: IActionRdfUpdateQuads): Promise<IActorTest> {\n    console.log(\"test sparql operation\")\n    const source = await DataSourceUtils.getSingleSource(action.context);\n    if (!source) {\n      console.log(\"a\");\n      throw new Error('Illegal state: undefined sparql endpoint source.');\n    }\n    // @ts-ignore AFTER `||` is hacky workaround - do not use in production\n    if (source && getDataSourceType(source) === 'sparql'\n      // @ts-ignore\n      || (getDataSourceType(source) === undefined && /\\/sparql$/.test(source?.value ?? ''))\n      // This is for the default apache jena fuseki config\n      // @ts-ignore\n      || (getDataSourceType(source) === undefined && /\\/update$/.test(source?.value ?? ''))\n    ) {\n      return { httpRequests: 1 };\n    }\n    console.log(this)\n    console.log(\"Throwing error for sparql endpoint\")\n    throw new Error(`${this.name} requires a single source with a 'sparql' endpoint to be present in the context.`);\n  }\n\n  public async runOperation(action: IActionRdfUpdateQuads): Promise<IActorRdfUpdateQuadsOutput> {\n    console.log(\"Run sparql operation\")\n    const source = await DataSourceUtils.getSingleSource(action.context);\n    if (!source) {\n      throw new Error('Illegal state: undefined sparql endpoint source.');\n    }\n    const endpoint: string = <string>getDataSourceValue(source);\n    this.lastContext = action.context;\n\n    const insertions: Pattern[] | undefined = await action.quadStreamInsert\n      ? await require('arrayify-stream')(action.quadStreamInsert)\n        .then((array: RDF.Quad[]) => {\n          console.log(\"inside then\", array);\n          if (array.length === 0) {\n            return undefined;\n          } else {\n            return array.map(quad => ActorRdfUpdateQuadsSparqlEndpoint.FACTORY.createPattern(\n              quad.subject,\n              quad.predicate,\n              quad.object,\n              quad.graph\n            ))\n          }\n        }).catch((e: Error) => {\n          console.log(e)\n        })\n      : undefined;\n    \n    console.log(insertions)\n\n    const deletions: Pattern[] | undefined = action.quadStreamDelete\n      ? await require('arrayify-stream')(action.quadStreamDelete)\n        .then((array: RDF.Quad[]) => {\n          if (array.length === 0) {\n            return undefined;\n          } else {\n            return array.map(quad => ActorRdfUpdateQuadsSparqlEndpoint.FACTORY.createPattern(\n              quad.subject,\n              quad.predicate,\n              quad.object,\n              quad.graph\n            ))\n          }\n        })\n      : undefined;\n\n    const query = toSparql(ActorRdfUpdateQuadsSparqlEndpoint.FACTORY.createDeleteInsert(deletions, insertions));\n    try {\n      await this.endpointFetcher.fetchUpdate(endpoint, query);\n    } catch (e) {\n      return {};\n    };\n    return {\n      quadStreamInserted : action.quadStreamInsert,\n      quadStreamDeleted: action.quadStreamDelete\n    }\n  }\n}\n"]}