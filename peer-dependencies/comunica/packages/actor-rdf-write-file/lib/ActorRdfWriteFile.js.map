{"version":3,"file":"ActorRdfWriteFile.js","sourceRoot":"","sources":["ActorRdfWriteFile.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport { URL } from 'url';\nimport { IActionRdfSerialize, IActorRdfSerializeOutput } from '@comunica/bus-rdf-serialize';\nimport { ActorRdfWrite, IActionRdfWrite, IActorRdfWriteOutput } from '@comunica/bus-rdf-write';\nimport { Actor, IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport { promisify } from 'util';\nimport { StreamWriter } from 'n3';\n\n/**\n * A comunica File RDF Write Actor.\n */\nexport class ActorRdfWriteFile extends ActorRdfWrite {\n  public readonly mediatorRdfSerialize: Mediator<\n  Actor<IActionRdfSerialize, IActorTest, IActorRdfSerializeOutput>,\n  IActionRdfSerialize, IActorTest, IActorRdfSerializeOutput>;\n  \n  public constructor(args: IActorArgs<IActionRdfWrite, IActorTest, IActorRdfWriteOutput>) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfWrite): Promise<IActorTest> {\n    console.log(\"Test file write\")\n    try {\n      await promisify(fs.access)(\n        action.url.startsWith('file://') ? new URL(action.url) : action.url, fs.constants.W_OK\n      );\n    } catch (error: unknown) {\n      throw new Error(\n        `This actor only works on existing local files. (${error})`,\n      );\n    }\n    return true;\n  }\n\n  public async run(action: IActionRdfWrite): Promise<IActorRdfWriteOutput> {\n    console.log(\"run file write\", action.url)\n    let { mediaType } = action;\n    console.log(1)\n    // Deduce media type from file extension if possible\n    if (!mediaType) {\n      mediaType = this.getMediaTypeFromExtension(action.url);\n    }\n    console.log(2)\n    // TODO: Emit quads that were not serialized.\n    console.log(this);\n    const serializedStream = await this.mediatorRdfSerialize.mediate({\n      quadStream: action.quads,\n      context: action.context,\n      mediaType,\n      // @ts-ignore\n      mediaTypes: ['text/turtle'],\n      ...action\n      // @ts-ignore\n      // mediaType: 'text/turtle'\n    });\n    console.log(3)\n    // TODO: Handle this promise properly.\n    console.log(serializedStream)\n    console.log(3.5)\n    const writer: NodeJS.ReadableStream = <any> new StreamWriter({ format: 'text/turtle' }).import(action.quads);\n    \n    \n    \n    const file = fs.createWriteStream(action.url.startsWith('file://') ? new URL(action.url) : action.url)\n\n    writer.on('data', data => {\n      file.write(data);\n    });\n\n    await new Promise((res, rej) => {\n      writer.on('end', data => {\n        file.end();\n        res(undefined);\n      });\n    })\n  \n    \n    \n    \n    // await promisify(fs.writeFile)(action.url.startsWith('file://') ? new URL(action.url) : action.url, writer);\n    // console.log(4)\n    // TODO: Add the correct parameters here.\n    return {\n      url: action.url\n    }\n  }\n\n  //   const parseAction: IActionHandleRdfParse = {\n  //     context: action.context,\n  //     handle: {\n  //       baseIRI: action.url,\n  //       input: fs.createWriteStream(action.url.startsWith('file://') ? new URL(action.url) : action.url),\n  //     },\n  //   };\n  //   if (mediaType) {\n  //     parseAction.handleMediaType = mediaType;\n  //   }\n\n  //   let parseOutput: IActorRdfParseOutput;\n  //   try {\n  //     parseOutput = (await this.mediatorRdfParse.mediate(parseAction)).handle;\n  //   } catch (error: unknown) {\n  //     return this.handleDereferenceError(action, error);\n  //   }\n\n  //   return {\n  //     headers: {},\n  //     quads: this.handleDereferenceStreamErrors(action, parseOutput.quads),\n  //     triples: parseOutput.triples,\n  //     url: action.url,\n  //   };\n  // }\n}\n\n\n// /**\n//  * A comunica File RDF Dereference Actor.\n//  */\n// export class ActorRdfDereferenceFile extends ActorRdfDereferenceMediaMappings {\n//   public readonly mediatorRdfParse: Mediator<\n//   Actor<IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>,\n//   IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>;\n\n//   public constructor(args: IActorRdfDereferenceFileArgs) {\n//     super(args);\n//   }\n\n//   public async test(action: IActionRdfDereference): Promise<IActorTest> {\n//     try {\n//       await promisify(fs.access)(\n//         action.url.startsWith('file://') ? new URL(action.url) : action.url, fs.constants.F_OK,\n//       );\n//     } catch (error: unknown) {\n//       throw new Error(\n//         `This actor only works on existing local files. (${error})`,\n//       );\n//     }\n//     return true;\n//   }\n\n//   public async run(action: IActionRdfDereference): Promise<IActorRdfDereferenceOutput> {\n//     let { mediaType } = action;\n\n//     // Deduce media type from file extension if possible\n//     if (!mediaType) {\n//       mediaType = this.getMediaTypeFromExtension(action.url);\n//     }\n\n//     const parseAction: IActionHandleRdfParse = {\n//       context: action.context,\n//       handle: {\n//         baseIRI: action.url,\n//         input: fs.createReadStream(action.url.startsWith('file://') ? new URL(action.url) : action.url),\n//       },\n//     };\n//     if (mediaType) {\n//       parseAction.handleMediaType = mediaType;\n//     }\n\n//     let parseOutput: IActorRdfParseOutput;\n//     try {\n//       parseOutput = (await this.mediatorRdfParse.mediate(parseAction)).handle;\n//     } catch (error: unknown) {\n//       return this.handleDereferenceError(action, error);\n//     }\n\n//     return {\n//       headers: {},\n//       quads: this.handleDereferenceStreamErrors(action, parseOutput.quads),\n//       triples: parseOutput.triples,\n//       url: action.url,\n//     };\n//   }\n// }\n\n// export interface IActorRdfDereferenceFileArgs extends IActorRdfDereferenceMediaMappingsArgs {\n//   /**\n//    * Mediator used for parsing the file contents.\n//    */\n//   mediatorRdfParse: Mediator<\n//   Actor<IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>,\n//   IActionHandleRdfParse, IActorTestHandleRdfParse, IActorOutputHandleRdfParse>;\n// }\n"]}