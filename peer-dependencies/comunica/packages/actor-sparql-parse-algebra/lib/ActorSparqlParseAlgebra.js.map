{"version":3,"file":"ActorSparqlParseAlgebra.js","sourceRoot":"","sources":["ActorSparqlParseAlgebra.ts"],"names":[],"mappings":";;;AACA,iEAA8D;AAE9D,qDAA4C;AAC5C,uCAAkD;AAElD;;GAEG;AACH,MAAa,uBAAwB,SAAQ,mCAAgB;IAG3D,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA0B;QAC1C,IAAI,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,WAAW,KAAK,QAAQ,EAAE;YACzD,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;SAC7D;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA0B;QACzC,MAAM,MAAM,GAAG,IAAI,iBAAY,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;QACtF,qDAAqD;QACrD,wEAAwE;QACjE,MAAO,CAAC,YAAY,EAAE,CAAC;QAC9B,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,OAAO,GAAG,YAAY,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;QAC9E,OAAO;YACL,OAAO;YACP,SAAS,EAAE,2BAAS,CAAC,YAAY,EAC/B,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,eAAe,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC;SAC5F,CAAC;IACJ,CAAC;CACF;AA5BD,0DA4BC","sourcesContent":["import type { IActionSparqlParse, IActorSparqlParseOutput } from '@comunica/bus-sparql-parse';\nimport { ActorSparqlParse } from '@comunica/bus-sparql-parse';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\nimport { translate } from 'sparqlalgebrajs';\nimport { Parser as SparqlParser } from 'sparqljs';\n\n/**\n * A comunica Algebra SPARQL Parse Actor.\n */\nexport class ActorSparqlParseAlgebra extends ActorSparqlParse {\n  public readonly prefixes: Record<string, string>;\n\n  public constructor(args: IActorSparqlParseAlgebraArgs) {\n    super(args);\n    this.prefixes = Object.freeze(this.prefixes);\n  }\n\n  public async test(action: IActionSparqlParse): Promise<IActorTest> {\n    if (action.queryFormat && action.queryFormat !== 'sparql') {\n      throw new Error('This actor can only parse SPARQL queries');\n    }\n    return true;\n  }\n\n  public async run(action: IActionSparqlParse): Promise<IActorSparqlParseOutput> {\n    const parser = new SparqlParser({ prefixes: this.prefixes, baseIRI: action.baseIRI });\n    // Resets the identifier counter used for blank nodes\n    // provides nicer and more consistent output if there are multiple calls\n    (<any> parser)._resetBlanks();\n    const parsedSyntax = parser.parse(action.query);\n    const baseIRI = parsedSyntax.type === 'query' ? parsedSyntax.base : undefined;\n    return {\n      baseIRI,\n      operation: translate(parsedSyntax,\n        { quads: true, prefixes: this.prefixes, blankToVariable: true, baseIRI: action.baseIRI }),\n    };\n  }\n}\n\nexport interface IActorSparqlParseAlgebraArgs\n  extends IActorArgs<IActionSparqlParse, IActorTest, IActorSparqlParseOutput> {\n  /**\n   * Default prefixes to use\n   */\n  prefixes?: Record<string, string>;\n}\n"]}