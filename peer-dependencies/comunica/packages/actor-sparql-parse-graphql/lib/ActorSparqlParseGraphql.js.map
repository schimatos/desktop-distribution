{"version":3,"file":"ActorSparqlParseGraphql.js","sourceRoot":"","sources":["ActorSparqlParseGraphql.ts"],"names":[],"mappings":";;;AACA,iEAA8D;AAE9D,yDAA8C;AAE9C;;GAEG;AACH,MAAa,uBAAwB,SAAQ,mCAAgB;IAG3D,YAAmB,IAAyE;QAC1F,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,eAAe,GAAG,IAAI,6BAAS,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;IACjE,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA0B;QAC1C,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE;YACpC,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;SAC9D;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA0B;QACzC,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACvG,MAAM,OAAO,GAAG;YACd,oBAAoB,EAAE,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC;SAC/G,CAAC;QACF,OAAO,EAAE,SAAS,EAAE,MAAM,IAAI,CAAC,eAAe,CAAC,sBAAsB,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC;IAC1G,CAAC;CACF;AAtBD,0DAsBC","sourcesContent":["import type { IActionSparqlParse, IActorSparqlParseOutput } from '@comunica/bus-sparql-parse';\nimport { ActorSparqlParse } from '@comunica/bus-sparql-parse';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\nimport { Converter } from 'graphql-to-sparql';\n\n/**\n * A comunica GraphQL SPARQL Parse Actor.\n */\nexport class ActorSparqlParseGraphql extends ActorSparqlParse {\n  private readonly graphqlToSparql: Converter;\n\n  public constructor(args: IActorArgs<IActionSparqlParse, IActorTest, IActorSparqlParseOutput>) {\n    super(args);\n    this.graphqlToSparql = new Converter({ requireContext: true });\n  }\n\n  public async test(action: IActionSparqlParse): Promise<IActorTest> {\n    if (action.queryFormat !== 'graphql') {\n      throw new Error('This actor can only parse GraphQL queries');\n    }\n    return true;\n  }\n\n  public async run(action: IActionSparqlParse): Promise<IActorSparqlParseOutput> {\n    const context = action.context && action.context.has('@context') ? action.context.get('@context') : {};\n    const options = {\n      singularizeVariables: action.context && action.context.get('@comunica/actor-init-sparql:singularizeVariables'),\n    };\n    return { operation: await this.graphqlToSparql.graphqlToSparqlAlgebra(action.query, context, options) };\n  }\n}\n"]}