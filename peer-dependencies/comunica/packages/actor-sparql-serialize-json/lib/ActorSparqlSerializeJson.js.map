{"version":3,"file":"ActorSparqlSerializeJson.js","sourceRoot":"","sources":["ActorSparqlSerializeJson.ts"],"names":[],"mappings":"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","sourcesContent":["import { Readable } from 'stream';\nimport type { IActorQueryOperationOutputBindings, IActorQueryOperationOutputBoolean,\n  IActorQueryOperationOutputQuads } from '@comunica/bus-query-operation';\nimport type { IActionSparqlSerialize,\n  IActorSparqlSerializeFixedMediaTypesArgs, IActorSparqlSerializeOutput } from '@comunica/bus-sparql-serialize';\nimport { ActorSparqlSerializeFixedMediaTypes } from '@comunica/bus-sparql-serialize';\nimport type { ActionContext } from '@comunica/core';\nimport * as RdfString from 'rdf-string';\n\n/**\n * A comunica JSON SPARQL Serialize Actor.\n */\nexport class ActorSparqlSerializeJson extends ActorSparqlSerializeFixedMediaTypes {\n  public constructor(args: IActorSparqlSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize, context: ActionContext): Promise<boolean> {\n    if (![ 'bindings', 'quads', 'boolean' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings or quad streams.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string, context: ActionContext):\n  Promise<IActorSparqlSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    let empty = true;\n    if (action.type === 'bindings') {\n      const resultStream = (<IActorQueryOperationOutputBindings> action).bindingsStream;\n      data.push('[');\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', element => {\n        data.push(empty ? '\\n' : ',\\n');\n        data.push(JSON.stringify(element.map(RdfString.termToString)));\n        empty = false;\n      });\n      resultStream.on('end', () => {\n        data.push(empty ? ']\\n' : '\\n]\\n');\n        data.push(null);\n      });\n    } else if (action.type === 'quads') {\n      const resultStream = (<IActorQueryOperationOutputQuads> action).quadStream;\n      data.push('[');\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', element => {\n        data.push(empty ? '\\n' : ',\\n');\n        data.push(JSON.stringify(RdfString.quadToStringQuad(element)));\n        empty = false;\n      });\n      resultStream.on('end', () => {\n        data.push(empty ? ']\\n' : '\\n]\\n');\n        data.push(null);\n      });\n    } else {\n      try {\n        data.push(`${JSON.stringify(await (<IActorQueryOperationOutputBoolean> action).booleanResult)}\\n`);\n        data.push(null);\n      } catch (error: unknown) {\n        setImmediate(() => data.emit('error', error));\n      }\n    }\n\n    return { data };\n  }\n}\n"]}