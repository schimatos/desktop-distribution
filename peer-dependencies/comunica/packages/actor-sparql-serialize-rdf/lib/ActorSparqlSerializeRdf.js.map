{"version":3,"file":"ActorSparqlSerializeRdf.js","sourceRoot":"","sources":["ActorSparqlSerializeRdf.ts"],"names":[],"mappings":";;;AAUA,yEAEwC;AAGxC;;;;;GAKG;AACH,MAAa,uBAAwB,SAAQ,2CAAoB;IAe/D,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,MAAkC,EAAE,SAAiB,EAAE,OAAuB;QAEpG,8CAA8C;QAC9C,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,+BAA+B,CAAC,CAAC;SACpE;QAED,+CAA+C;QAC/C,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,CACjE,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAC9B,CAAC;QACF,IAAI,CAAC,CAAC,SAAS,IAAI,UAAU,CAAC,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,8BAA8B,SAAS,0BACvE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;SAC9B;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAAkC,EAAE,SAAiB,EAAE,OAAuB;QAEnG,oCAAoC;QACpC,OAAO,CAAC,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;YAC9C,OAAO;YACP,MAAM,EAAoC,MAAM;YAChD,eAAe,EAAE,SAAS;SAC3B,CAAC,CAAC,CAAC,MAAM,CAAC;IACb,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAsB;QAC/C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,OAAuB;QAChD,OAAO,CAAC,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;IAClG,CAAC;IAEM,KAAK,CAAC,oBAAoB,CAAC,OAAsB;QACtD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,mBAAmB,CAAC,OAAuB;QACtD,OAAO,CAAC,MAAM,IAAI,CAAC,+BAA+B,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;IACpH,CAAC;CACF;AA9DD,0DA8DC","sourcesContent":["import type { IActorArgsMediaTyped } from '@comunica/actor-abstract-mediatyped';\nimport type { IActorQueryOperationOutput, IActorQueryOperationOutputQuads } from '@comunica/bus-query-operation';\n\nimport type { IActionSparqlSerialize, IActionSparqlSerializeHandle, IActionSparqlSerializeMediaTypeFormats,\n  IActionSparqlSerializeMediaTypes, IActorOutputSparqlSerializeHandle,\n  IActorOutputSparqlSerializeMediaTypeFormats,\n  IActorOutputSparqlSerializeMediaTypes,\n  IActorSparqlSerializeOutput, IActorTestSparqlSerializeHandle,\n  IActorTestSparqlSerializeMediaTypeFormats,\n  IActorTestSparqlSerializeMediaTypes } from '@comunica/bus-sparql-serialize';\nimport {\n  ActorSparqlSerialize,\n} from '@comunica/bus-sparql-serialize';\nimport type { ActionContext, Actor, IActorTest, Mediator } from '@comunica/core';\n\n/**\n * A comunica RDF SPARQL Serialize Actor.\n *\n * It serializes quad streams (for example resulting from a CONSTRUCT query)\n * to an RDF syntax.\n */\nexport class ActorSparqlSerializeRdf extends ActorSparqlSerialize implements IActorSparqlSerializeRdfArgs {\n  public readonly mediatorRdfSerialize: Mediator<\n  Actor<IActionSparqlSerializeHandle, IActorTestSparqlSerializeHandle, IActorOutputSparqlSerializeHandle>,\n  IActionSparqlSerializeHandle, IActorTestSparqlSerializeHandle, IActorOutputSparqlSerializeHandle>;\n\n  public readonly mediatorMediaTypeCombiner: Mediator<\n  Actor<IActionSparqlSerializeMediaTypes, IActorTestSparqlSerializeMediaTypes, IActorOutputSparqlSerializeMediaTypes>,\n  IActionSparqlSerializeMediaTypes, IActorTestSparqlSerializeMediaTypes, IActorOutputSparqlSerializeMediaTypes>;\n\n  public readonly mediatorMediaTypeFormatCombiner: Mediator<\n  Actor<IActionSparqlSerializeMediaTypeFormats, IActorTestSparqlSerializeMediaTypeFormats,\n  IActorOutputSparqlSerializeMediaTypeFormats>,\n  IActionSparqlSerializeMediaTypeFormats, IActorTestSparqlSerializeMediaTypeFormats,\n  IActorOutputSparqlSerializeMediaTypeFormats>;\n\n  public constructor(args: IActorSparqlSerializeRdfArgs) {\n    super(args);\n  }\n\n  public async testHandle(action: IActorQueryOperationOutput, mediaType: string, context?: ActionContext):\n  Promise<IActorTest> {\n    // Check if we are provided with a quad stream\n    if (action.type !== 'quads') {\n      throw new Error(`Actor ${this.name} can only handle quad streams`);\n    }\n\n    // Check if the given media type can be handled\n    const { mediaTypes } = await this.mediatorMediaTypeCombiner.mediate(\n      { context, mediaTypes: true },\n    );\n    if (!(mediaType in mediaTypes)) {\n      throw new Error(`Actor ${this.name} can not handle media type ${mediaType}. All available types: ${\n        Object.keys(mediaTypes)}`);\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActorQueryOperationOutput, mediaType: string, context?: ActionContext):\n  Promise<IActorSparqlSerializeOutput> {\n    // Delegate handling to the mediator\n    return (await this.mediatorRdfSerialize.mediate({\n      context,\n      handle: <IActorQueryOperationOutputQuads> action,\n      handleMediaType: mediaType,\n    })).handle;\n  }\n\n  public async testMediaType(context: ActionContext): Promise<boolean> {\n    return true;\n  }\n\n  public async getMediaTypes(context?: ActionContext): Promise<Record<string, number>> {\n    return (await this.mediatorMediaTypeCombiner.mediate({ context, mediaTypes: true })).mediaTypes;\n  }\n\n  public async testMediaTypeFormats(context: ActionContext): Promise<boolean> {\n    return true;\n  }\n\n  public async getMediaTypeFormats(context?: ActionContext): Promise<Record<string, string>> {\n    return (await this.mediatorMediaTypeFormatCombiner.mediate({ context, mediaTypeFormats: true })).mediaTypeFormats;\n  }\n}\n\nexport interface IActorSparqlSerializeRdfArgs\n  extends IActorArgsMediaTyped<IActionSparqlSerialize, IActorTest, IActorSparqlSerializeOutput> {\n  mediatorRdfSerialize: Mediator<\n  Actor<IActionSparqlSerializeHandle, IActorTestSparqlSerializeHandle, IActorOutputSparqlSerializeHandle>,\n  IActionSparqlSerializeHandle, IActorTestSparqlSerializeHandle, IActorOutputSparqlSerializeHandle>;\n  mediatorMediaTypeCombiner: Mediator<\n  Actor<IActionSparqlSerializeMediaTypes, IActorTestSparqlSerializeMediaTypes, IActorOutputSparqlSerializeMediaTypes>,\n  IActionSparqlSerializeMediaTypes, IActorTestSparqlSerializeMediaTypes, IActorOutputSparqlSerializeMediaTypes>;\n  mediatorMediaTypeFormatCombiner: Mediator<\n  Actor<IActionSparqlSerializeMediaTypeFormats, IActorTestSparqlSerializeMediaTypeFormats,\n  IActorOutputSparqlSerializeMediaTypeFormats>,\n  IActionSparqlSerializeMediaTypeFormats, IActorTestSparqlSerializeMediaTypeFormats,\n  IActorOutputSparqlSerializeMediaTypeFormats>;\n}\n"]}