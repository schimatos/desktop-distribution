{"version":3,"file":"ActorSparqlSerializeSimple.js","sourceRoot":"","sources":["ActorSparqlSerializeSimple.ts"],"names":[],"mappings":";;;AAAA,mCAAkC;AAKlC,yEAAqF;AAIrF;;GAEG;AACH,MAAa,0BAA2B,SAAQ,0DAAmC;IACjF,YAAmB,IAA8C;QAC/D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,MAA8B,EAAE,OAAsB;QACnF,IAAI,CAAC,CAAE,UAAU,EAAE,OAAO,EAAE,SAAS,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAC7D,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;SAC3F;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA8B,EAAE,SAAiB,EAAE,OAAsB;QAE9F,MAAM,IAAI,GAAG,IAAI,iBAAQ,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE;YAChB,aAAa;QACf,CAAC,CAAC;QAEF,IAAI,YAAiC,CAAC;QACtC,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;YAC9B,YAAY,GAAyC,MAAO,CAAC,cAAc,CAAC;YAC5E,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;YAC7D,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,GAAG,CAC3D,CAAC,KAAe,EAAE,GAAW,EAAE,EAAE,CAAC,GAAG,GAAG,KAAK,KAAK,CAAC,KAAK,EAAE,CAC3D,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACrB,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC/C;aAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;YAClC,YAAY,GAAsC,MAAO,CAAC,UAAU,CAAC;YACrE,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;YAC7D,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CACvC,YAAY,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI;gBAClC,cAAc,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI;gBACtC,WAAW,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI;gBAChC,UAAU,IAAI,CAAC,KAAK,CAAC,KAAK,MAAM,CACjC,CAAC,CAAC;YACH,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC/C;aAAM;YACL,IAAI;gBACF,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAA2C,MAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACnG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACjB;YAAC,OAAO,KAAc,EAAE;gBACvB,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;aAC/C;SACF;QAED,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;CACF;AAhDD,gEAgDC","sourcesContent":["import { Readable } from 'stream';\nimport type { IActorQueryOperationOutputBindings, IActorQueryOperationOutputBoolean,\n  IActorQueryOperationOutputQuads } from '@comunica/bus-query-operation';\nimport type { IActionSparqlSerialize,\n  IActorSparqlSerializeFixedMediaTypesArgs, IActorSparqlSerializeOutput } from '@comunica/bus-sparql-serialize';\nimport { ActorSparqlSerializeFixedMediaTypes } from '@comunica/bus-sparql-serialize';\nimport type { ActionContext } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\n\n/**\n * A comunica Simple Sparql Serialize Actor.\n */\nexport class ActorSparqlSerializeSimple extends ActorSparqlSerializeFixedMediaTypes {\n  public constructor(args: IActorSparqlSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize, context: ActionContext): Promise<boolean> {\n    if (![ 'bindings', 'quads', 'boolean' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams, quad streams or booleans.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string, context: ActionContext):\n  Promise<IActorSparqlSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    let resultStream: NodeJS.EventEmitter;\n    if (action.type === 'bindings') {\n      resultStream = (<IActorQueryOperationOutputBindings> action).bindingsStream;\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', bindings => data.push(`${bindings.map(\n        (value: RDF.Term, key: string) => `${key}: ${value.value}`,\n      ).join('\\n')}\\n\\n`));\n      resultStream.on('end', () => data.push(null));\n    } else if (action.type === 'quads') {\n      resultStream = (<IActorQueryOperationOutputQuads> action).quadStream;\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', quad => data.push(\n        `subject: ${quad.subject.value}\\n` +\n        `predicate: ${quad.predicate.value}\\n` +\n        `object: ${quad.object.value}\\n` +\n        `graph: ${quad.graph.value}\\n\\n`,\n      ));\n      resultStream.on('end', () => data.push(null));\n    } else {\n      try {\n        data.push(`${JSON.stringify(await (<IActorQueryOperationOutputBoolean> action).booleanResult)}\\n`);\n        data.push(null);\n      } catch (error: unknown) {\n        setImmediate(() => data.emit('error', error));\n      }\n    }\n\n    return { data };\n  }\n}\n"]}