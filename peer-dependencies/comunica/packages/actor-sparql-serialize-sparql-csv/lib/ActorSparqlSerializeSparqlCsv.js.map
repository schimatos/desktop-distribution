{"version":3,"file":"ActorSparqlSerializeSparqlCsv.js","sourceRoot":"","sources":["ActorSparqlSerializeSparqlCsv.ts"],"names":[],"mappings":";;;AAAA,mCAAkC;AAIlC,yEAEwC;AAIxC;;GAEG;AACH,MAAa,6BAA8B,SAAQ,0DAAmC;IACpF,YAAmB,IAA8C;QAC/D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,oBAAoB,CAAC,KAAgB;QACjD,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,EAAE,CAAC;SACX;QAED,IAAI,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC;QAE9B,IAAI,KAAK,CAAC,QAAQ,KAAK,SAAS,EAAE;YAChC,uFAAuF;YACvF,WAAW,GAAG,GAAG,WAAW,EAAE,CAAC;SAChC;aAAM,IAAI,KAAK,CAAC,QAAQ,KAAK,WAAW,EAAE;YACzC,WAAW,GAAG,KAAK,WAAW,EAAE,CAAC;SAClC;aAAM;YACL,WAAW,GAAG,IAAI,WAAW,GAAG,CAAC;SAClC;QAED,uEAAuE;QACvE,IAAI,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACjC,yEAAyE;YACzE,WAAW,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC;SACvD;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,MAA8B,EAAE,OAAsB;QACnF,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA8B,EAAE,SAAkB,EAAE,OAAuB;QAEhG,MAAM,cAAc,GAAwC,MAAM,CAAC;QAEnE,MAAM,IAAI,GAAG,IAAI,iBAAQ,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE;YAChB,aAAa;QACf,CAAC,CAAC;QAEF,aAAa;QACb,IAAI,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,QAAgB,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEpG,iBAAiB;QACjB,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAY,EAAE,EAAE;YACzD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QACH,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,QAAkB,EAAE,EAAE;YAC9D,IAAI,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,SAAS;iBAClC,GAAG,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,6BAA6B;iBAChD,oBAAoB,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC1C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;YAC3C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;CACF;AAtED,sEAsEC","sourcesContent":["import { Readable } from 'stream';\nimport type { Bindings, IActorQueryOperationOutputBindings } from '@comunica/bus-query-operation';\nimport type { IActionSparqlSerialize, IActorSparqlSerializeFixedMediaTypesArgs,\n  IActorSparqlSerializeOutput } from '@comunica/bus-sparql-serialize';\nimport {\n  ActorSparqlSerializeFixedMediaTypes,\n} from '@comunica/bus-sparql-serialize';\nimport type { ActionContext } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\n\n/**\n * A comunica SPARQL CSV SPARQL Serialize Actor.\n */\nexport class ActorSparqlSerializeSparqlCsv extends ActorSparqlSerializeFixedMediaTypes {\n  public constructor(args: IActorSparqlSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  /**\n   * Converts an RDF term to its CSV representation.\n   * @param {RDF.Term} value An RDF term.\n   * @return {string} A string representation of the given value.\n   */\n  public static bindingToCsvBindings(value?: RDF.Term): string {\n    if (!value) {\n      return '';\n    }\n\n    let stringValue = value.value;\n\n    if (value.termType === 'Literal') {\n      // This is a lossy representation, since language and datatype are not encoded in here.\n      stringValue = `${stringValue}`;\n    } else if (value.termType === 'BlankNode') {\n      stringValue = `_:${stringValue}`;\n    } else {\n      stringValue = `<${stringValue}>`;\n    }\n\n    // If a value contains certain characters, put it between double quotes\n    if (/[\",\\n\\r]/u.exec(stringValue)) {\n      // Within quote strings, \" is written using a pair of quotation marks \"\".\n      stringValue = `\"${stringValue.replace(/\"/gu, '\"\"')}\"`;\n    }\n\n    return stringValue;\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize, context: ActionContext): Promise<boolean> {\n    if (action.type !== 'bindings') {\n      throw new Error('This actor can only handle bindings streams.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType?: string, context?: ActionContext):\n  Promise<IActorSparqlSerializeOutput> {\n    const bindingsAction = <IActorQueryOperationOutputBindings> action;\n\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    // Write head\n    data.push(`${bindingsAction.variables.map((variable: string) => variable.slice(1)).join(',')}\\r\\n`);\n\n    // Write bindings\n    bindingsAction.bindingsStream.on('error', (error: Error) => {\n      data.emit('error', error);\n    });\n    bindingsAction.bindingsStream.on('data', (bindings: Bindings) => {\n      data.push(`${bindingsAction.variables\n        .map((key: string) => ActorSparqlSerializeSparqlCsv\n          .bindingToCsvBindings(bindings.get(key)))\n        .join(',')}\\r\\n`);\n    });\n    bindingsAction.bindingsStream.on('end', () => {\n      data.push(null);\n    });\n\n    return { data };\n  }\n}\n"]}