{"version":3,"file":"ActorSparqlSerializeSparqlXml.js","sourceRoot":"","sources":["ActorSparqlSerializeSparqlXml.ts"],"names":[],"mappings":"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","sourcesContent":["import { Readable } from 'stream';\nimport type { Bindings, IActorQueryOperationOutputBindings,\n  IActorQueryOperationOutputBoolean } from '@comunica/bus-query-operation';\nimport type { IActionSparqlSerialize,\n  IActorSparqlSerializeFixedMediaTypesArgs, IActorSparqlSerializeOutput } from '@comunica/bus-sparql-serialize';\nimport { ActorSparqlSerializeFixedMediaTypes } from '@comunica/bus-sparql-serialize';\nimport type { ActionContext } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\nimport xml from 'xml';\n\n/**\n * A comunica sparql-results+xml Serialize Actor.\n */\nexport class ActorSparqlSerializeSparqlXml extends ActorSparqlSerializeFixedMediaTypes {\n  public constructor(args: IActorSparqlSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  /**\n   * Converts an RDF term to its object-based XML representation.\n   * @param {RDF.Term} value An RDF term.\n   * @param {string} key A variable name, '?' must be included as a prefix.\n   * @return {any} An object-based XML tag.\n   */\n  public static bindingToXmlBindings(value: RDF.Term, key: string): any {\n    let xmlValue: any;\n    if (value.termType === 'Literal') {\n      const literal: RDF.Literal = value;\n      xmlValue = { literal: literal.value };\n      const { language } = literal;\n      const { datatype } = literal;\n      if (language) {\n        xmlValue.literal = [{ _attr: { 'xml:lang': language }}, xmlValue.literal ];\n      } else if (datatype && datatype.value !== 'http://www.w3.org/2001/XMLSchema#string') {\n        xmlValue.literal = [{ _attr: { datatype: datatype.value }}, xmlValue.literal ];\n      }\n    } else if (value.termType === 'BlankNode') {\n      xmlValue = { bnode: value.value };\n    } else {\n      xmlValue = { uri: value.value };\n    }\n    return { binding: [{ _attr: { name: key.slice(1) }}, xmlValue ]};\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize, context: ActionContext): Promise<boolean> {\n    if (![ 'bindings', 'boolean' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams or booleans.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string, context: ActionContext):\n  Promise<IActorSparqlSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    // Write head\n    const root = xml.element({ _attr: { xlmns: 'http://www.w3.org/2005/sparql-results#' }});\n    (<NodeJS.ReadableStream> <any> xml({ sparql: root }, { stream: true, indent: '  ', declaration: true }))\n      .on('data', chunk => data.push(`${chunk}\\n`));\n    if (action.type === 'bindings' && (<IActorQueryOperationOutputBindings> action).variables.length > 0) {\n      root.push({ head: (<IActorQueryOperationOutputBindings> action).variables\n        .map(variable => ({ variable: { _attr: { name: variable.slice(1) }}})) });\n    }\n\n    if (action.type === 'bindings') {\n      const results = xml.element({});\n      root.push({ results });\n      const resultStream: NodeJS.EventEmitter = (<IActorQueryOperationOutputBindings> action).bindingsStream;\n\n      // Write bindings\n      resultStream.on('error', (error: Error) => {\n        data.emit('error', error);\n      });\n      resultStream.on('data', (bindings: Bindings) => {\n        // XML SPARQL results spec does not allow unbound variables and blank node bindings\n        const realBindings = bindings.filter((value: RDF.Term, key: string) => Boolean(value) && key.startsWith('?'));\n        results.push({ result: realBindings.map(ActorSparqlSerializeSparqlXml.bindingToXmlBindings) });\n      });\n\n      // Close streams\n      resultStream.on('end', () => {\n        results.close();\n        root.close();\n        setImmediate(() => data.push(null));\n      });\n    } else {\n      try {\n        root.push({ boolean: await (<IActorQueryOperationOutputBoolean> action).booleanResult });\n        root.close();\n        setImmediate(() => data.push(null));\n      } catch (error: unknown) {\n        setImmediate(() => data.emit('error', error));\n      }\n    }\n\n    return { data };\n  }\n}\n"]}