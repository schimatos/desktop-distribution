{"version":3,"file":"ActionObserverHttp.js","sourceRoot":"","sources":["ActionObserverHttp.ts"],"names":[],"mappings":";;;AAEA,yCAAgD;AAEhD;;GAEG;AACH,MAAa,kBAAmB,SAAQ,qBAA6C;IAGnF,YAAmB,IAAwD;QACzE,KAAK,CAAC,IAAI,CAAC,CAAC;QAHP,aAAQ,GAAG,CAAC,CAAC;QAIlB,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,KAAuD,EAClE,MAAmB,EAAE,MAAiC;QACtD,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;CACF;AAZD,gDAYC","sourcesContent":["import type { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport type { Actor, IActionObserverArgs, IActorTest } from '@comunica/core';\nimport { ActionObserver } from '@comunica/core';\n\n/**\n * Observes HTTP actions, and maintains a counter of the number of requests.\n */\nexport class ActionObserverHttp extends ActionObserver<IActionHttp, IActorHttpOutput> {\n  public requests = 0;\n\n  public constructor(args: IActionObserverArgs<IActionHttp, IActorHttpOutput>) {\n    super(args);\n    this.bus.subscribeObserver(this);\n  }\n\n  public onRun(actor: Actor<IActionHttp, IActorTest, IActorHttpOutput>,\n    action: IActionHttp, output: Promise<IActorHttpOutput>): void {\n    this.requests++;\n  }\n}\n"]}