{"version":3,"file":"ActorSparqlSerializeStats.js","sourceRoot":"","sources":["ActorSparqlSerializeStats.ts"],"names":[],"mappings":";;;AAAA,mCAAkC;AAKlC,yEAAqF;AAIrF;;GAEG;AACH,MAAa,yBAA0B,SAAQ,0DAAmC;IAGhF,YAAmB,IAAoC;QACrD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,MAA8B,EAAE,OAAsB;QACnF,IAAI,CAAC,CAAE,UAAU,EAAE,OAAO,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAClD,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;SACjF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,UAAU,CAAC,IAAc;QAC9B,MAAM,MAAM,GAAW,CAAE,QAAQ,EAAE,YAAY,EAAE,eAAe;SAC/D,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACZ,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC;IAC3B,CAAC;IAEM,QAAQ,CAAC,IAAc,EAAE,SAA2B,EAAE,MAAc;QACzE,MAAM,GAAG,GAAW,CAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ;SAC9E,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACZ,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;IACxB,CAAC;IAEM,UAAU,CAAC,IAAc,EAAE,SAA2B;QAC3D,MAAM,MAAM,GAAW,CAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ;SAClF,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACZ,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA8B,EAAE,SAAiB,EAAE,OAAsB;QAE9F,MAAM,IAAI,GAAG,IAAI,iBAAQ,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE;YAChB,aAAa;QACf,CAAC,CAAC;QAEF,MAAM,YAAY,GAAwB,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC;YAC9B,MAAO,CAAC,cAAc,CAAC,CAAC;YAC3B,MAAO,CAAC,UAAU,CAAC;QAExD,2CAA2C;QAC3C,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QACnC,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACtB,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAC7D,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;QACxE,YAAY,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;QAE/D,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;IAEM,KAAK,CAAC,SAA2B;QACtC,MAAM,IAAI,GAAqB,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC;IAC9C,CAAC;CACF;AA5DD,8DA4DC","sourcesContent":["import { Readable } from 'stream';\nimport type { IActorQueryOperationOutputBindings,\n  IActorQueryOperationOutputQuads } from '@comunica/bus-query-operation';\nimport type { IActionSparqlSerialize,\n  IActorSparqlSerializeFixedMediaTypesArgs, IActorSparqlSerializeOutput } from '@comunica/bus-sparql-serialize';\nimport { ActorSparqlSerializeFixedMediaTypes } from '@comunica/bus-sparql-serialize';\nimport type { ActionContext } from '@comunica/core';\nimport type { ActionObserverHttp } from './ActionObserverHttp';\n\n/**\n * Serializes SPARQL results for testing and debugging.\n */\nexport class ActorSparqlSerializeStats extends ActorSparqlSerializeFixedMediaTypes {\n  public readonly httpObserver: ActionObserverHttp;\n\n  public constructor(args: IActorSparqlSerializeStatsArgs) {\n    super(args);\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize, context: ActionContext): Promise<boolean> {\n    if (![ 'bindings', 'quads' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings streams or quad streams.');\n    }\n    return true;\n  }\n\n  public pushHeader(data: Readable): void {\n    const header: string = [ 'Result', 'Delay (ms)', 'HTTP requests',\n    ].join(',');\n    data.push(`${header}\\n`);\n  }\n\n  public pushStat(data: Readable, startTime: [number, number], result: number): void {\n    const row: string = [ result, this.delay(startTime), this.httpObserver.requests,\n    ].join(',');\n    data.push(`${row}\\n`);\n  }\n\n  public pushFooter(data: Readable, startTime: [number, number]): void {\n    const footer: string = [ 'TOTAL', this.delay(startTime), this.httpObserver.requests,\n    ].join(',');\n    data.push(`${footer}\\n`);\n    data.push(null);\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string, context: ActionContext):\n  Promise<IActorSparqlSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    const resultStream: NodeJS.EventEmitter = action.type === 'bindings' ?\n      (<IActorQueryOperationOutputBindings> action).bindingsStream :\n      (<IActorQueryOperationOutputQuads> action).quadStream;\n\n    // TODO: Make initiation timer configurable\n    const startTime = process.hrtime();\n    let result = 1;\n\n    this.pushHeader(data);\n    resultStream.on('error', error => data.emit('error', error));\n    resultStream.on('data', () => this.pushStat(data, startTime, result++));\n    resultStream.on('end', () => this.pushFooter(data, startTime));\n\n    return { data };\n  }\n\n  public delay(startTime: [number, number]): number {\n    const time: [number, number] = process.hrtime(startTime);\n    return time[0] * 1000 + (time[1] / 1000000);\n  }\n}\n\nexport interface IActorSparqlSerializeStatsArgs extends IActorSparqlSerializeFixedMediaTypesArgs {\n  httpObserver: ActionObserverHttp;\n}\n"]}