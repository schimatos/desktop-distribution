{"version":3,"file":"ActorSparqlSerializeTable.js","sourceRoot":"","sources":["ActorSparqlSerializeTable.ts"],"names":[],"mappings":"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","sourcesContent":["import { Readable } from 'stream';\nimport type {\n  Bindings,\n  IActorQueryOperationOutputBindings,\n  IActorQueryOperationOutputQuads,\n} from '@comunica/bus-query-operation';\nimport type { IActionSparqlSerialize,\n  IActorSparqlSerializeFixedMediaTypesArgs, IActorSparqlSerializeOutput } from '@comunica/bus-sparql-serialize';\nimport { ActorSparqlSerializeFixedMediaTypes } from '@comunica/bus-sparql-serialize';\nimport type { ActionContext } from '@comunica/core';\n\nimport { getTerms, QUAD_TERM_NAMES } from 'rdf-terms';\n\n/**\n * A comunica Table Sparql Serialize Actor.\n */\nexport class ActorSparqlSerializeTable extends ActorSparqlSerializeFixedMediaTypes\n  implements IActorSparqlSerializeTableArgs {\n  public readonly columnWidth: number;\n  public readonly padding: string;\n\n  public constructor(args: IActorSparqlSerializeTableArgs) {\n    super(args);\n    this.padding = ActorSparqlSerializeTable.repeat(' ', this.columnWidth);\n  }\n\n  public static repeat(str: string, count: number): string {\n    return new Array(count + 1).join(str);\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize, context: ActionContext): Promise<boolean> {\n    if (![ 'bindings', 'quads' ].includes(action.type)) {\n      throw new Error('This actor can only handle bindings or quad streams.');\n    }\n    return true;\n  }\n\n  public pad(str: string): string {\n    if (str.length <= this.columnWidth) {\n      return str + this.padding.slice(str.length);\n    }\n    return `${str.slice(0, this.columnWidth - 1)}â€¦`;\n  }\n\n  public pushHeader(data: Readable, labels: string[]): void {\n    const header: string = labels.map(label => this.pad(label)).join(' ');\n    data.push(`${header}\\n${ActorSparqlSerializeTable.repeat('-', header.length)}\\n`);\n  }\n\n  public pushRow(data: Readable, labels: string[], bindings: Bindings): void {\n    data.push(`${labels\n      .map(label => bindings.has(label) ? bindings.get(label).value : '')\n      .map(label => this.pad(label))\n      .join(' ')}\\n`);\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string, context: ActionContext):\n  Promise<IActorSparqlSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    let resultStream: NodeJS.EventEmitter;\n    if (action.type === 'bindings') {\n      resultStream = (<IActorQueryOperationOutputBindings> action).bindingsStream;\n      const labels = (<IActorQueryOperationOutputBindings> action).variables;\n      this.pushHeader(data, labels);\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', bindings => this.pushRow(data, labels, bindings));\n    } else {\n      resultStream = (<IActorQueryOperationOutputQuads> action).quadStream;\n      this.pushHeader(data, QUAD_TERM_NAMES);\n      resultStream.on('error', error => data.emit('error', error));\n      resultStream.on('data', quad => data.push(\n        `${getTerms(quad).map(term => this.pad(term.value)).join(' ')}\\n`,\n      ));\n    }\n    resultStream.on('end', () => data.push(null));\n\n    return { data };\n  }\n}\n\nexport interface IActorSparqlSerializeTableArgs extends IActorSparqlSerializeFixedMediaTypesArgs {\n  columnWidth: number;\n}\n"]}