{"version":3,"file":"ActorSparqlSerializeTree.js","sourceRoot":"","sources":["ActorSparqlSerializeTree.ts"],"names":[],"mappings":";;;AAAA,mCAAkC;AAIlC,yEAAqF;AAErF,yCAAqD;AAGrD,2DAA+C;AAE/C;;GAEG;AACH,MAAa,wBAAyB,SAAQ,0DAAmC;IAE/E,YAAmB,IAA8C;QAC/D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,uBAAuB,CAAC,cAA8B,EAClE,OAAwD,EACxD,iBAAsC;QACtC,MAAM,aAAa,GAAkB,0BAAmB,CAAC,OAAO,CAAC,CAAC;QAClE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,aAAa,GAA+B,EAAE,CAAC;YACrD,MAAM,SAAS,GAAc,IAAI,8BAAS,CAAC,iBAAiB,CAAC,CAAC;YAE9D,MAAM,MAAM,GAAY;gBACtB,oBAAoB,EAAE,aAAa,CAAC,GAAG,CAAC,kDAAkD,CAAC,IAAI,EAAE;aAClG,CAAC;YAEF,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACnC,cAAc,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE;gBACnC,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACpC,MAAM,eAAe,GAA6B,EAAE,CAAC;gBACrD,yBAAyB;gBACzB,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE;oBAC7B,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;iBAClD;gBACD,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;YACH,cAAc,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBAC5B,OAAO,CAAC,SAAS,CAAC,cAAc,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,CAAC;YAC3D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,MAA8B;QAC3D,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA8B,EAAE,SAAiB;QACtE,MAAM,IAAI,GAAG,IAAI,iBAAQ,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE;YAChB,aAAa;QACf,CAAC,CAAC;QAEF,MAAM,YAAY,GAAyD,MAAO,CAAC,cAAc,CAAC;QAClG,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAC7D,wBAAwB,CAAC,uBAAuB,CAAC,YAAY,EAAE,MAAM,CAAC,OAAO,EAAE,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC;aAC5G,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC;aACD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAE7C,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;CACF;AAjED,4DAiEC","sourcesContent":["import { Readable } from 'stream';\nimport type { IActorQueryOperationOutputBindings, BindingsStream } from '@comunica/bus-query-operation';\nimport type { IActionSparqlSerialize,\n  IActorSparqlSerializeFixedMediaTypesArgs, IActorSparqlSerializeOutput } from '@comunica/bus-sparql-serialize';\nimport { ActorSparqlSerializeFixedMediaTypes } from '@comunica/bus-sparql-serialize';\nimport type { ActionContext } from '@comunica/core';\nimport { ensureActionContext } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\nimport type { IConverterSettings, ISchema } from 'sparqljson-to-tree';\nimport { Converter } from 'sparqljson-to-tree';\n\n/**\n * A comunica Tree SPARQL Serialize Actor.\n */\nexport class ActorSparqlSerializeTree extends ActorSparqlSerializeFixedMediaTypes\n  implements IActorSparqlSerializeFixedMediaTypesArgs {\n  public constructor(args: IActorSparqlSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  /**\n   *\n   * @param {BindingsStream} bindingsStream\n   * @param context\n   * @param {IConverterSettings} converterSettings\n   * @return {Promise<string>}\n   */\n  public static bindingsStreamToGraphQl(bindingsStream: BindingsStream,\n    context: ActionContext | Record<string, any> | undefined,\n    converterSettings?: IConverterSettings): Promise<string> {\n    const actionContext: ActionContext = ensureActionContext(context);\n    return new Promise((resolve, reject) => {\n      const bindingsArray: Record<string, RDF.Term>[] = [];\n      const converter: Converter = new Converter(converterSettings);\n\n      const schema: ISchema = {\n        singularizeVariables: actionContext.get('@comunica/actor-init-sparql:singularizeVariables') || {},\n      };\n\n      bindingsStream.on('error', reject);\n      bindingsStream.on('data', bindings => {\n        const rawBindings = bindings.toJS();\n        const reKeyedBindings: Record<string, RDF.Term> = {};\n        // Removes the '?' prefix\n        for (const key in rawBindings) {\n          reKeyedBindings[key.slice(1)] = rawBindings[key];\n        }\n        bindingsArray.push(reKeyedBindings);\n      });\n      bindingsStream.on('end', () => {\n        resolve(converter.bindingsToTree(bindingsArray, schema));\n      });\n    });\n  }\n\n  public async testHandleChecked(action: IActionSparqlSerialize): Promise<boolean> {\n    if (action.type !== 'bindings') {\n      throw new Error('This actor can only handle bindings streams.');\n    }\n    return true;\n  }\n\n  public async runHandle(action: IActionSparqlSerialize, mediaType: string): Promise<IActorSparqlSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    const resultStream: BindingsStream = (<IActorQueryOperationOutputBindings> action).bindingsStream;\n    resultStream.on('error', error => data.emit('error', error));\n    ActorSparqlSerializeTree.bindingsStreamToGraphQl(resultStream, action.context, { materializeRdfJsTerms: true })\n      .then((result: any) => {\n        data.push(JSON.stringify(result, null, '  '));\n        data.push(null);\n      })\n      .catch(error => data.emit('error', error));\n\n    return { data };\n  }\n}\n"]}