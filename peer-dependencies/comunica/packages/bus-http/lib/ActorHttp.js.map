{"version":3,"file":"ActorHttp.js","sourceRoot":"","sources":["ActorHttp.ts"],"names":[],"mappings":";;;AACA,yCAAuC;AAEvC;;;;;;;;;;;GAWG;AACH,MAAsB,SAAU,SAAQ,YAAgD;IACtF,YAAmB,IAA2D;QAC5E,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,cAAc,CAAC,IAA2B;QACtD,OAAO,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAC9F,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,aAAa,CAAC,OAAgB;QAC1C,MAAM,IAAI,GAA2B,EAAE,CAAC;QACxC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AA1BD,8BA0BC;AAiBD;;GAEG;AACU,QAAA,+BAA+B,GAAG,wCAAwC,CAAC;AAExF;;;GAGG;AACU,QAAA,gBAAgB,GAAG,yBAAyB,CAAC","sourcesContent":["import type { IAction, IActorArgs, IActorOutput, IActorTest } from '@comunica/core';\nimport { Actor } from '@comunica/core';\n\n/**\n * A base actor for listening to HTTP events.\n *\n * Actor types:\n * * Input:  IActionHttp:      The HTTP request.\n * * Test:   IActorHttpTest:   An estimate for the response time.\n * * Output: IActorHttpOutput: The HTTP response.\n *\n * @see IActionHttp\n * @see IActorHttpTest\n * @see IActorHttpOutput\n */\nexport abstract class ActorHttp extends Actor<IActionHttp, IActorTest, IActorHttpOutput> {\n  public constructor(args: IActorArgs<IActionHttp, IActorTest, IActorHttpOutput>) {\n    super(args);\n  }\n\n  /**\n   * Converts a WhatWG streams to Node streams if required.\n   * Returns the input in case the stream already is a Node stream.\n   * @param {ReadableStream} body\n   * @returns {NodeJS.ReadableStream}\n   */\n  public static toNodeReadable(body: ReadableStream | null): NodeJS.ReadableStream {\n    return require('is-stream')(body) ? body : require('web-streams-node').toNodeReadable(body);\n  }\n\n  /**\n   * Convert the given headers object into a raw hash.\n   * @param headers A headers object.\n   */\n  public static headersToHash(headers: Headers): Record<string, string> {\n    const hash: Record<string, string> = {};\n    headers.forEach((value, key) => {\n      hash[key] = value;\n    });\n    return hash;\n  }\n}\n\n/**\n * The HTTP input, which contains the HTTP request.\n */\nexport interface IActionHttp extends IAction {\n  input: RequestInfo;\n  init?: RequestInit;\n}\n\n/**\n * The HTTP output, which contains the HTTP response.\n */\nexport interface IActorHttpOutput extends IActorOutput, Response {\n\n}\n\n/**\n * @type {string} Context entry for the include credentials glags.\n */\nexport const KEY_CONTEXT_INCLUDE_CREDENTIALS = '@comunica/bus-http:include-credentials';\n\n/**\n * @type {string} Context entry for the authentication for a source.\n * @value {string} \"username:password\"-pair.\n */\nexport const KEY_CONTEXT_AUTH = '@comunica/bus-http:auth';\n"]}