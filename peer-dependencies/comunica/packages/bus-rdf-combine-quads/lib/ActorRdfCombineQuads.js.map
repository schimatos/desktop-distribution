{"version":3,"file":"ActorRdfCombineQuads.js","sourceRoot":"","sources":["ActorRdfCombineQuads.ts"],"names":[],"mappings":"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","sourcesContent":["import type { QuadStream } from '@comunica/bus-query-operation';\nimport type { IAction, IActorArgs, IActorOutput, IActorTest } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type { IMediatorTypeIterations } from '@comunica/mediatortype-iterations';\nimport { AsyncIterator } from 'asynciterator';\nimport type * as RDF from 'rdf-js';\n\n// TODO: Determine if in general the first insert stream should be made\n// the base (currently doing this in simplify need to confirm)\n\n/**\n * A comunica actor for rdf-combine-quads events including joining and diffing quad streams\n *\n * Actor types:\n * * Input:  IActionRdfCombineQuads:      The streams to be inserted/deleted and (optionally) a base stream\n * * Test:   <none>\n * * Output: IActorRdfCombineQuadsOutput: The resultant quad stream of the combine operation and (optionally)\n *                                        the insertions/deletions with respect to the base stream\n *\n * @see IActionRdfCombineQuads\n * @see IActorRdfCombineQuadsOutput\n */\nexport abstract class ActorRdfCombineQuads\n  extends Actor<IActionRdfCombineQuads, IActorTest, IActorRdfCombineQuadsOutput> {\n  public constructor(args: IActorArgs<IActionRdfCombineQuads, IActorTest, IActorRdfCombineQuadsOutput>) {\n    super(args);\n  }\n\n  /**\n   * If this actor can track and return changes\n   * with respect to a primary stream\n   */\n  protected canTrackChanges: boolean;\n  /**\n   * If this actor can ensure that the order in\n   * which insertions and deletions are applied\n   * will be respected\n   */\n  protected canMaintainOrder: boolean;\n  /**\n   * If this actor ensures that insertions will\n   * not cause duplicate\n   */\n  protected canAvoidDuplicates: boolean;\n  /**\n   * The max/min number of insertion/deletion\n   * streams that an actor can handle.\n   *\n   * Note that the quads parameter - if defined\n   * is considered an insert stream\n   */\n  protected limitInsertsMin = 0;\n  protected limitInsertsMax = Infinity;\n  protected limitDeletesMin = 0;\n  protected limitDeletesMax = Infinity;\n\n  /**\n   * If there is no 'base stream' to compare to, we can search remove all 'delete'\n   * streams before the first update stream.\n   */\n  private simplify(action: IActionRdfCombineQuads): IActionRdfCombineQuads {\n    if (action.quads) {\n      return action;\n    } else {\n      let count = 0;\n      for (const quads of action.quadStreamUpdates) {\n        if (quads.type === 'delete') {\n          count++;\n        } else {\n          return {\n            trackChanges: action.trackChanges,\n            maintainOrder: action.maintainOrder,\n            avoidDuplicates: action.avoidDuplicates,\n            quads: quads.quadStream,\n            // TODO: See if we need to specify the end element\n            quadStreamUpdates: action.quadStreamUpdates.slice(count + 1)\n          }\n        }\n      }\n      // This means that there are no insert operations whatsoever\n      return {\n        trackChanges: action.trackChanges,\n        maintainOrder: action.maintainOrder,\n        avoidDuplicates: action.avoidDuplicates,\n        quadStreamUpdates: []\n      }\n    }\n  };\n\n  // TODO: Use estimated quad stream lengths in context (if present) to produce better estimates\n  /**\n   * Counts the number of streams that insert quads and the number of streams that delete\n   * quads. Note that base stream is counted as an *insertion* stream.\n   */\n  private counters(action: IActionRdfCombineQuads): { inserts: number; deletes: number } {\n    let inserts = action.quads ? 1 : 0;\n    let deletes = 0;\n    for (const { type } of action.quadStreamUpdates) {\n      if (type === 'insert') {\n        inserts++;\n      } else if (type === 'delete') {\n        deletes++;\n      }\n    }\n    return { inserts, deletes };\n  }\n\n  /**\n   * Returns default input for 0 input entries, or 1 input entry with no deletions.\n   * Calls the getOutput function otherwise\n   * @param {IActionRdfCombineQuads} action\n   * @returns {Promise<IActorRdfCombineQuadsOutput>}\n   */\n  public async run(action: IActionRdfCombineQuads): Promise<IActorRdfCombineQuadsOutput> {\n    action = this.simplify(action);\n    const { inserts, deletes } = this.counters(action);\n    if (inserts === 0) {\n      return { quads: new AsyncIterator<RDF.Quad>() };\n    }\n    if (deletes === 0 && inserts === 1) {\n      if (action.quads) {\n        return { quads: action.quads };\n      }\n      const quads: QuadStream = action.quadStreamUpdates.find(stream => stream.type === 'insert')?.quadStream ??\n      new AsyncIterator<RDF.Quad>();\n      // This ^^ is not strictly necessary since inserts === 1 - just here for type safety.\n      return {\n        quads,\n        quadStreamInserted: quads,\n      };\n    }\n    return await this.getOutput(action.quads ?? new AsyncIterator<RDF.Quad>(), action.quadStreamUpdates);\n  }\n\n  /**\n   * Returns the result of combining quad streams\n   */\n  protected abstract getOutput(quads: QuadStream, quadStreamUpdates: IQuadStreamUpdate[]):\n  Promise<IActorRdfCombineQuadsOutput>;\n\n  /**\n   * Returns the number of 'combine' operations required to complete\n   * the operation\n   * @param inserts The number of streams to be inserted\n   * @param deletes The number of streams use for deletion\n   * @param hasBase True if there is a base stream to compare to\n   */\n  abstract getIterations(inserts: number, deletes: number, hasBase?: boolean): Promise<number>;\n\n  /**\n   * Default test function for combine actors.\n   */\n  public async test(action: IActionRdfCombineQuads): Promise<IMediatorTypeIterations> {\n    action = this.simplify(action);\n    const { inserts, deletes } = this.counters(action);\n    /**\n     * If there are no insertions we can just return an empty\n     * stream - if there are no deletions and only one insertion\n     * stream we can just return the insertion stream.\n     */\n    if (inserts === 0 || (deletes === 0 && inserts === 1)) {\n      return { iterations: 0 };\n    }\n    if (inserts < this.limitInsertsMin) {\n      throw new Error(`${this.name} requires at least ${this.limitInsertsMin} insert operations`);\n    }\n    if (inserts > this.limitInsertsMax) {\n      throw new Error(`${this.name} handles at most ${this.limitInsertsMax} insert operations`);\n    }\n    if (deletes < this.limitDeletesMin) {\n      throw new Error(`${this.name} requires at least ${this.limitDeletesMin} delete operations`);\n    }\n    if (deletes > this.limitDeletesMax) {\n      throw new Error(`${this.name} handles at most ${this.limitDeletesMax} delete operations`);\n    }\n    if ((action.trackChanges ?? true) && !this.canTrackChanges) {\n      throw new Error(`${this.name} cannot track changes`);\n    }\n    // Order doesn't matter if we only have insertions or only have deletions\n    if (inserts > 0 && deletes > 0 && (action.maintainOrder ?? true) && !this.canMaintainOrder) {\n      throw new Error(`${this.name} cannot maintain order of insertions/deletions`);\n    }\n    // Duplicates are only an issue if we have 1 or more insertion streams\n    if (inserts > 1 && (action.avoidDuplicates ?? true) && !this.canAvoidDuplicates) {\n      throw new Error(`${this.name} cannot avoid duplicates`);\n    }\n    return { iterations: await this.getIterations(inserts, deletes, Boolean(action.quads)) };\n  }\n}\n\n/**\n * A quad stream and annotation of whether it is to be\n * used to insert or delete Quads\n */\nexport interface IQuadStreamUpdate {\n  /**\n   * Whether the quads are to be inserted into\n   * or deleted from the main stream\n   */\n  type: 'insert' | 'delete';\n  /**\n   * Stream of Quads\n   */\n  quadStream: QuadStream;\n}\n\nexport interface IActionRdfCombineQuads extends IAction {\n  /**\n   * Return changes with respect to a primary stream\n   * Default: true\n   */\n  trackChanges?: boolean;\n  /**\n   * Ensure that having multiple insertion streams will\n   * not cause duplication of quads\n   * Default: true\n   */\n  maintainOrder?: boolean;\n  /**\n   * If this actor can ensure that the order in\n   * which insertions and deletions are applied\n   * is respected\n   * Default: true\n   */\n  avoidDuplicates?: boolean;\n  /**\n   * Base quad stream (if applicable)\n   */\n  quads?: QuadStream;\n  /**\n   * Updates to apply to the base quad stream\n   * or new stream if no base stream is supplied\n   */\n  quadStreamUpdates: IQuadStreamUpdate[];\n}\n\n// TODO: Make it so that the output quad stream is empty if there are\n// no updates\n// Should this name be Iaction?\nexport interface IActorRdfCombineQuadsOutput extends IActorOutput {\n  /**\n   * The resultant quad stream of the combine operation\n   */\n  quads: QuadStream;\n  /**\n   * The quads inserted with respect to the primary stream\n   * (if applicable)\n   */\n  quadStreamInserted?: QuadStream;\n  /**\n   * The quads deleted with respect to the primary stream\n   * (if applicable)\n   */\n  quadStreamDeleted?: QuadStream;\n}\n"]}