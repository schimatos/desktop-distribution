{"version":3,"file":"ActorRdfDereferencePaged.js","sourceRoot":"","sources":["ActorRdfDereferencePaged.ts"],"names":[],"mappings":";;;AACA,yCAAuC;AAIvC;;;;;;;;;;GAUG;AACH,MAAsB,wBACpB,SAAQ,YAA8E;IACtF,YAAmB,IAAyF;QAC1G,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;CACF;AALD,4DAKC","sourcesContent":["import type { IAction, IActorArgs, IActorOutput, IActorTest } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type { AsyncIterator } from 'asynciterator';\nimport type * as RDF from 'rdf-js';\n\n/**\n * A base actor for dereferencing URLs to quad streams and following pages.\n *\n * Actor types:\n * * Input:  IActionRdfDereferencePaged:      A URL.\n * * Test:   <none>\n * * Output: IActorRdfDereferencePagedOutput: A quad data and optional metadata stream\n *\n * @see IActionRdfDereference\n * @see IActorRdfDereferenceOutput\n */\nexport abstract class ActorRdfDereferencePaged\n  extends Actor<IActionRdfDereferencePaged, IActorTest, IActorRdfDereferencePagedOutput> {\n  public constructor(args: IActorArgs<IActionRdfDereferencePaged, IActorTest, IActorRdfDereferencePagedOutput>) {\n    super(args);\n  }\n}\n\nexport interface IActionRdfDereferencePaged extends IAction {\n  /**\n   * The URL to dereference\n   */\n  url: string;\n}\n\nexport interface IActorRdfDereferencePagedOutput extends IActorOutput {\n  /**\n   * The page on which the output was found.\n   *\n   * This is not necessarily the same as the original input url,\n   * as this may have changed due to redirects.\n   */\n  firstPageUrl: string;\n  /**\n   * The resulting quad data stream over all pages.\n   */\n  data: AsyncIterator<RDF.Quad> & RDF.Stream;\n  /**\n   * A callback returning a promise resolving to the extracted metadata key-value mapping of the first page.\n   * This callback can be invoked multiple times.\n   * The actors that return this metadata will make sure that multiple calls properly cache this promise.\n   * Metadata will not be collected until this callback is invoked.\n   */\n  firstPageMetadata: () => Promise<Record<string, any>>;\n  /**\n   * An optional field indicating if the given quad stream originates from a triple-based serialization,\n   * in which everything is serialized in the default graph.\n   * If falsy, the quad stream contain actual quads, otherwise they should be interpreted as triples.\n   */\n  triples?: boolean;\n}\n"]}