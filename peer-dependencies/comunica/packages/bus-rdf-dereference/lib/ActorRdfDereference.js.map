{"version":3,"file":"ActorRdfDereference.js","sourceRoot":"","sources":["ActorRdfDereference.ts"],"names":[],"mappings":";;;AAAA,mCAA+C;AAE/C,yCAAuC;AAG1B,QAAA,mBAAmB,GAAG,qCAAqC,CAAC;AAEzE;;;;;;;;;;GAUG;AACH,MAAsB,mBAAoB,SAAQ,YAAoE;IACpH,YAAmB,IAA+E;QAChG,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;OAIG;IACO,WAAW,CAAC,MAA6B;QACjD,OAAO,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,2BAAmB,CAAC,CAAC;IACrE,CAAC;IAED;;;;;OAKG;IACO,6BAA6B,CAAC,MAA6B,EAAE,KAAiB;QACtF,oGAAoG;QACpG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;YAC7B,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;gBACxB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC1E,yCAAyC;gBAClC,KAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;YACH,KAAK,GAAU,KAAM,CAAC,IAAI,CAAC,IAAI,oBAAW,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;SACnE;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;;OAMG;IACO,KAAK,CAAC,sBAAsB,CAAC,MAA6B,EAAE,KAAc;QAElF,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;YAC5B,MAAM,KAAK,CAAC;SACb;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAW,KAAM,CAAC,OAAO,CAAC,CAAC;YACvD,MAAM,KAAK,GAAG,IAAI,iBAAQ,EAAE,CAAC;YAC7B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjB,OAAO,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC;SACnC;IACH,CAAC;CACF;AAnDD,kDAmDC","sourcesContent":["import { PassThrough, Readable } from 'stream';\nimport type { IAction, IActorArgs, IActorOutput, IActorTest } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\n\nexport const KEY_CONTEXT_LENIENT = '@comunica/actor-init-sparql:lenient';\n\n/**\n * A base actor for dereferencing URLs to quad streams.\n *\n * Actor types:\n * * Input:  IActionRdfDereference:      A URL.\n * * Test:   <none>\n * * Output: IActorRdfDereferenceOutput: A quad stream.\n *\n * @see IActionRdfDereference\n * @see IActorRdfDereferenceOutput\n */\nexport abstract class ActorRdfDereference extends Actor<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput> {\n  public constructor(args: IActorArgs<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput>) {\n    super(args);\n  }\n\n  /**\n   * Check if hard errors should occur on HTTP or parse errors.\n   * @param {IActionRdfDereference} action An RDF dereference action.\n   * @return {boolean} If hard errors are enabled.\n   */\n  protected isHardError(action: IActionRdfDereference): boolean {\n    return !action.context || !action.context.get(KEY_CONTEXT_LENIENT);\n  }\n\n  /**\n   * If hard errors are disabled, modify the given stream so that errors are delegated to the logger.\n   * @param {IActionRdfDereference} action An RDF dereference action.\n   * @param {Stream} quads A quad stream.\n   * @return {Stream} The resulting quad stream.\n   */\n  protected handleDereferenceStreamErrors(action: IActionRdfDereference, quads: RDF.Stream): RDF.Stream {\n    // If we don't emit hard errors, make parsing error events log instead, and silence them downstream.\n    if (!this.isHardError(action)) {\n      quads.on('error', error => {\n        this.logError(action.context, error.message, () => ({ url: action.url }));\n        // Make sure the errored stream is ended.\n        (<any> quads).push(null);\n      });\n      quads = (<any> quads).pipe(new PassThrough({ objectMode: true }));\n    }\n    return quads;\n  }\n\n  /**\n   * Handle the given error as a rejection or delegate it to the logger,\n   * depending on whether or not hard errors are enabled.\n   * @param {IActionRdfDereference} action An RDF dereference action.\n   * @param {Error} error An error that has occured.\n   * @return {Promise<IActorRdfDereferenceOutput>} A promise that rejects or resolves to an empty output.\n   */\n  protected async handleDereferenceError(action: IActionRdfDereference, error: unknown):\n  Promise<IActorRdfDereferenceOutput> {\n    if (this.isHardError(action)) {\n      throw error;\n    } else {\n      this.logError(action.context, (<Error> error).message);\n      const quads = new Readable();\n      quads.push(null);\n      return { url: action.url, quads };\n    }\n  }\n}\n\nexport interface IActionRdfDereference extends IAction {\n  /**\n   * The URL to dereference\n   */\n  url: string;\n\n  /**\n   * The mediatype of the source (if it can't be inferred from the source)\n   */\n  mediaType?: string;\n  /**\n   * Optional HTTP method to use.\n   * Defaults to GET.\n   */\n  method?: string;\n  /**\n   * Optional HTTP headers to pass.\n   */\n  headers?: Record<string, string>;\n}\n\nexport interface IActorRdfDereferenceOutput extends IActorOutput {\n  /**\n   * The page on which the output was found.\n   *\n   * This is not necessarily the same as the original input url,\n   * as this may have changed due to redirects.\n   */\n  url: string;\n  /**\n   * The resulting quad stream.\n   */\n  quads: RDF.Stream;\n  /**\n   * An optional field indicating if the given quad stream originates from a triple-based serialization,\n   * in which everything is serialized in the default graph.\n   * If falsy, the quad stream contains actual quads, otherwise they should be interpreted as triples.\n   */\n  triples?: boolean;\n  /**\n   * The returned headers of the final URL.\n   */\n  headers?: Record<string, string>;\n}\n"]}