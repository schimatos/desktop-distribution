{"version":3,"file":"ActorRdfDereferenceMediaMappings.js","sourceRoot":"","sources":["ActorRdfDereferenceMediaMappings.ts"],"names":[],"mappings":";;;AAEA,+DAA4D;AAE5D;;;;;;;;;;GAUG;AACH,MAAsB,gCAAiC,SAAQ,yCAAmB;IAGhF,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,yBAAyB,CAAC,IAAY;QAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,QAAQ,IAAI,CAAC,EAAE;YACjB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACjC,aAAa;YACb,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;SAC/C;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AAtBD,4EAsBC","sourcesContent":["import type { IActorArgs, IActorTest } from '@comunica/core';\nimport type { IActionRdfDereference, IActorRdfDereferenceOutput } from './ActorRdfDereference';\nimport { ActorRdfDereference } from './ActorRdfDereference';\n\n/**\n * A base actor for dereferencing URLs to quad streams.\n *\n * Actor types:\n * * Input:  IActionRdfDereference:      A URL.\n * * Test:   <none>\n * * Output: IActorRdfDereferenceOutput: A quad stream.\n *\n * @see IActionRdfDereference\n * @see IActorRdfDereferenceOutput\n */\nexport abstract class ActorRdfDereferenceMediaMappings extends ActorRdfDereference {\n  public readonly mediaMappings: Record<string, string>;\n\n  public constructor(args: IActorRdfDereferenceMediaMappingsArgs) {\n    super(args);\n  }\n\n  /**\n   * Get the media type based on the extension of the given path,\n   * which can be an URL or file path.\n   * @param {string} path A path.\n   * @return {string} A media type or the empty string.\n   */\n  public getMediaTypeFromExtension(path: string): string {\n    const dotIndex = path.lastIndexOf('.');\n    if (dotIndex >= 0) {\n      const ext = path.slice(dotIndex);\n      // Ignore dot\n      return this.mediaMappings[ext.slice(1)] || '';\n    }\n    return '';\n  }\n}\n\nexport interface IActorRdfDereferenceMediaMappingsArgs\n  extends IActorArgs<IActionRdfDereference, IActorTest, IActorRdfDereferenceOutput> {\n  /**\n   * A collection of mappings, mapping file extensions to their corresponding media type.\n   */\n  mediaMappings: Record<string, string>;\n}\n"]}