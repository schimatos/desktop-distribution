{"version":3,"file":"ActorRdfMetadataExtractQuery.js","sourceRoot":"","sources":["ActorRdfMetadataExtractQuery.ts"],"names":[],"mappings":";;;AAGA,2CAAqD;AAErD,uDAA+C;AAG/C,uEAEmC;AACnC,6DAA0D;AAE1D;;;;;;;;GAQG;AACH,MAAsB,4BAA6B,SAAQ,iDAAuB;IAKhF,YAAmB,OAAY,EAAE,KAAa,EAC5C,IAAuF;QACvF,KAAK,CAAC,IAAI,CAAC,CAAC;QAEZ,6BAA6B;QAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,mBAAa,CAAC;YACrC,OAAO;YACP,WAAW,EAAE,IAAI,uCAAkB,CAAC,IAAI,CAAC,WAAW,CAAC;SACtD,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IACvE,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,SAAS,CAAC,UAAsB,EAAE,eAAqB;QAClE,iCAAiC;QACjC,MAAM,KAAK,GAAG,MAAM,8BAAW,CAAC,UAAU,CAAC,CAAC;QAE5C,4CAA4C;QAC5C,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,iCAC1C,MAAM,IAAI,CAAC,eAAe,KAC7B,kBAAkB,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,eAAe,EAAE,IACtF,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAlCD,oEAkCC","sourcesContent":["import type { ActorInitSparql } from '@comunica/actor-init-sparql';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\nimport type { IGraphQlToSparqlResult } from 'graphql-ld';\nimport { Client as GraphQlClient } from 'graphql-ld';\nimport type * as RDF from 'rdf-js';\nimport { storeStream } from 'rdf-store-stream';\nimport type { IActionRdfMetadataExtract,\n  IActorRdfMetadataExtractOutput } from './ActorRdfMetadataExtract';\nimport {\n  ActorRdfMetadataExtract,\n} from './ActorRdfMetadataExtract';\nimport { GraphQlQueryEngine } from './GraphQlQueryEngine';\n\n/**\n * An {@link ActorRdfMetadataExtract} that extracts metadata based on a GraphQL-LD query.\n *\n * It exposes the {@link #queryData} method using which a query can be applied over the metadata stream.\n * For efficiency reasons, the query (and JSON-LD context) must be passed via the actor constructor\n * so that these can be pre-compiled.\n *\n * @see ActorRdfMetadataExtract\n */\nexport abstract class ActorRdfMetadataExtractQuery extends ActorRdfMetadataExtract {\n  private readonly queryEngine: ActorInitSparql;\n  private readonly graphqlClient: GraphQlClient;\n  private readonly sparqlOperation: Promise<IGraphQlToSparqlResult>;\n\n  public constructor(context: any, query: string,\n    args: IActorArgs<IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput>) {\n    super(args);\n\n    // Pre-parse GraphQL-LD query\n    this.graphqlClient = new GraphQlClient({\n      context,\n      queryEngine: new GraphQlQueryEngine(this.queryEngine),\n    });\n    this.sparqlOperation = this.graphqlClient.graphQlToSparql({ query });\n  }\n\n  /**\n   * Execute the configured query on the given metadata stream.\n   * @param {RDF.Stream} dataStream A quad stream to query on.\n   * @return The GraphQL query results.\n   */\n  public async queryData(dataStream: RDF.Stream, initialBindings?: any): Promise<any> {\n    // Load metadata quads into store\n    const store = await storeStream(dataStream);\n\n    // Execute query against out in-memory store\n    const { data } = await this.graphqlClient.query({\n      ...await this.sparqlOperation,\n      queryEngineOptions: { source: { type: 'rdfjsSource', value: store }, initialBindings },\n    });\n\n    return data;\n  }\n}\n\nexport interface IActorRdfMetadataExtractQueryArgs\n  extends IActorArgs<IActionRdfMetadataExtract, IActorTest, IActorRdfMetadataExtractOutput> {\n  queryEngine: ActorInitSparql;\n}\n"]}