{"version":3,"file":"GraphQlQueryEngine.js","sourceRoot":"","sources":["GraphQlQueryEngine.ts"],"names":[],"mappings":";;;;;;AAGA,wEAA+C;AAE/C;;GAEG;AACH,MAAa,kBAAkB;IAG7B,YAAmB,cAA+B;QAChD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,KAAK,CAAC,KAAwB,EAAE,OAAa;QACxD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CACvD,MAAM,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,iCAAiC,CACnF,CAAC;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,0BAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IACjD,CAAC;CACF;AAbD,gDAaC","sourcesContent":["import type { ActorInitSparql } from '@comunica/actor-init-sparql';\nimport type { IQueryEngine } from 'graphql-ld';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport stringifyStream from 'stream-to-string';\n\n/**\n * A comunica-based GraphQL-LD query engine.\n */\nexport class GraphQlQueryEngine implements IQueryEngine {\n  private readonly comunicaEngine: ActorInitSparql;\n\n  public constructor(comunicaEngine: ActorInitSparql) {\n    this.comunicaEngine = comunicaEngine;\n  }\n\n  public async query(query: Algebra.Operation, options?: any): Promise<any> {\n    const { data } = await this.comunicaEngine.resultToString(\n      await this.comunicaEngine.query(query, options), 'application/sparql-results+json',\n    );\n    return JSON.parse(await stringifyStream(data));\n  }\n}\n"]}