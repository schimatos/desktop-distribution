{"version":3,"file":"ActorRdfParse.js","sourceRoot":"","sources":["ActorRdfParse.ts"],"names":[],"mappings":";;;AAQA,mFAE6C;AAI7C;;;;;;;;;GASG;AACH,MAAsB,aAAc,SAClC,mDAA0E;IAC1E,YAAmB,IAA6E;QAC9F,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;CACF;AALD,sCAKC","sourcesContent":["import type { IActionAbstractMediaTyped,\n  IActionAbstractMediaTypedHandle, IActionAbstractMediaTypedMediaTypes,\n  IActorArgsMediaTyped,\n  IActorOutputAbstractMediaTyped,\n  IActorOutputAbstractMediaTypedHandle, IActorOutputAbstractMediaTypedMediaTypes,\n  IActorTestAbstractMediaTyped,\n  IActorTestAbstractMediaTypedHandle,\n  IActorTestAbstractMediaTypedMediaTypes } from '@comunica/actor-abstract-mediatyped';\nimport {\n  ActorAbstractMediaTyped,\n} from '@comunica/actor-abstract-mediatyped';\nimport type { IAction, IActorOutput, IActorTest } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\n\n/**\n * A base actor for listening to RDF parse events.\n *\n * Actor types:\n * * Input:  IActionRdfParseOrMediaType:      A parse input or a media type input.\n * * Test:   <none>\n * * Output: IActorOutputRdfParseOrMediaType: The parsed quads.\n *\n * @see IActionInit\n */\nexport abstract class ActorRdfParse extends\n  ActorAbstractMediaTyped<IActionRdfParse, IActorTest, IActorRdfParseOutput> {\n  public constructor(args: IActorArgsMediaTyped<IActionRdfParse, IActorTest, IActorRdfParseOutput>) {\n    super(args);\n  }\n}\n\nexport type IActionRootRdfParse = IActionAbstractMediaTyped<IActionRdfParse>;\nexport type IActorTestRootRdfParse = IActorTestAbstractMediaTyped<IActorTest>;\nexport type IActorOutputRootRdfParse = IActorOutputAbstractMediaTyped<IActorRdfParseOutput>;\n\nexport type IActionHandleRdfParse = IActionAbstractMediaTypedHandle<IActionRdfParse>;\nexport type IActorTestHandleRdfParse = IActorTestAbstractMediaTypedHandle<IActorTest>;\nexport type IActorOutputHandleRdfParse = IActorOutputAbstractMediaTypedHandle<IActorRdfParseOutput>;\n\nexport type IActionMediaTypesRdfParse = IActionAbstractMediaTypedMediaTypes;\nexport type IActorTestMediaTypesRdfParse = IActorTestAbstractMediaTypedMediaTypes;\nexport type IActorOutputMediaTypesRdfParse = IActorOutputAbstractMediaTypedMediaTypes;\n\n/**\n * The RDF parse input, which contains the input stream in the given media type.\n * One of the fields MUST be truthy.\n */\nexport interface IActionRdfParse extends IAction {\n  /**\n   * A readable string stream in a certain RDF serialization that needs to be parsed.\n   */\n  input: NodeJS.ReadableStream;\n  /**\n   * The base IRI for parsed quads.\n   */\n  baseIRI: string;\n  /**\n   * The headers with which the RDF document should be parsed.\n   */\n  headers?: Headers;\n}\n\nexport interface IActorRdfParseOutput extends IActorOutput {\n  /**\n   * The resulting quad stream.\n   */\n  quads: RDF.Stream;\n  /**\n   * An optional field indicating if the given quad stream originates from a triple-based serialization,\n   * in which everything is serialized in the default graph.\n   * If falsy, the quad stream contain actual quads, otherwise they should be interpreted as triples.\n   */\n  triples?: boolean;\n}\n"]}