{"version":3,"file":"ActorRdfResolveHypermediaLinks.js","sourceRoot":"","sources":["ActorRdfResolveHypermediaLinks.ts"],"names":[],"mappings":";;;AACA,yCAAuC;AAGvC;;;;;;;;;;GAUG;AACH,MAAsB,8BACpB,SAAQ,YAA0F;IAClG,YAAmB,IAC4E;QAC7F,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;CACF;AAND,wEAMC","sourcesContent":["import type { IAction, IActorArgs, IActorOutput, IActorTest, ActionContext } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\n\n/**\n * A comunica actor for rdf-resolve-hypermedia-links events.\n *\n * Actor types:\n * * Input:  IActionRdfResolveHypermediaLinks:      The metadata from which the links should be extracted.\n * * Test:   <none>\n * * Output: IActorRdfResolveHypermediaLinksOutput: The URLs that were detected.\n *\n * @see IActionRdfResolveHypermediaLinks\n * @see IActorRdfResolveHypermediaLinksOutput\n */\nexport abstract class ActorRdfResolveHypermediaLinks\n  extends Actor<IActionRdfResolveHypermediaLinks, IActorTest, IActorRdfResolveHypermediaLinksOutput> {\n  public constructor(args:\n  IActorArgs<IActionRdfResolveHypermediaLinks, IActorTest, IActorRdfResolveHypermediaLinksOutput>) {\n    super(args);\n  }\n}\n\nexport interface IActionRdfResolveHypermediaLinks extends IAction {\n  /**\n   * The metadata from which the links should be extracted.\n   */\n  metadata: Record<string, any>;\n}\n\nexport interface IActorRdfResolveHypermediaLinksOutput extends IActorOutput {\n  /**\n   * An array of links to follow.\n   */\n  urls: (string | ILink)[];\n}\n\n/**\n * A link holder that can expose additional properties.\n */\nexport interface ILink {\n  /**\n   * The URL identifying this link.\n   */\n  url: string;\n  /**\n   * An optional stream modifier.\n   * This transformation will be applied on the stream of data quads that is obtained from dereferencing the given URL.\n   * @param input The stream of data quads on the given URL.\n   * @returns The stream of data quads to be used for this link instead of the given stream.\n   */\n  transform?: (input: RDF.Stream) => Promise<RDF.Stream>;\n  /**\n   * Optional context to apply onto mediators when handling this link as source.\n   * All entries of this context will be added (or overwritten) into the existing context.\n   */\n  context?: ActionContext;\n}\n"]}