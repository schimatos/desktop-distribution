{"version":3,"file":"ActorRdfResolveQuadPattern.js","sourceRoot":"","sources":["ActorRdfResolveQuadPattern.ts"],"names":[],"mappings":";;;AACA,yCAAuC;AAKvC;;;GAGG;AACU,QAAA,mBAAmB,GAAG,gDAAgD,CAAC;AACpF;;;GAGG;AACU,QAAA,kBAAkB,GAAG,+CAA+C,CAAC;AAElF,SAAgB,mBAAmB,CAAC,UAAuB;IACzD,OAAO,OAAO,UAAU,KAAK,QAAQ,IAAI,OAAO,IAAI,UAAU,CAAC;AACjE,CAAC;AAFD,kDAEC;AACD,SAAgB,iBAAiB,CAAC,UAAuB;IACvD,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;QAClC,OAAO,EAAE,CAAC;KACX;IACD,OAAO,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC;AACjE,CAAC;AALD,8CAKC;AACD,SAAgB,kBAAkB,CAAC,UAAuB;IACxD,OAAO,mBAAmB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC;AACzE,CAAC;AAFD,gDAEC;AACD,SAAgB,oBAAoB,CAAC,UAAuB,EAAE,OAAsB;IAClF,IAAI,OAAO,UAAU,KAAK,QAAQ,IAAI,OAAO,IAAI,UAAU,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;QAClF,OAAO,OAAO,CAAC;KAChB;IACD,OAAO,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC3C,CAAC;AALD,oDAKC;AAED;;;;;;;;;;GAUG;AACH,MAAsB,0BAA2B,SAAQ,YACvB;IAChC,YAAmB,IAA6F;QAC9G,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;OAIG;IACO,iBAAiB,CAAC,OAAuB;QACjD,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,2BAAmB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAChE,CAAC;IAED;;;;OAIG;IACO,gBAAgB,CAAC,OAAuB;QAChD,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,0BAAkB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC/D,CAAC;IAED;;;;OAIG;IACO,mBAAmB,CAAC,MAAoB;QAChD,IAAI,MAAM,EAAE;YACV,IAAI,OAAO,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;YACzC,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;gBAC/B,4BAA4B;gBAC5B,MAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAC1C,IAAI,YAAY,IAAI,CAAC,EAAE;oBACrB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;iBAC1C;gBAED,OAAO,OAAO,CAAC;aAChB;SACF;IACH,CAAC;IAED;;;;OAIG;IACO,sBAAsB,CAAC,OAAuB;QACtD,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAC9C,OAAO,OAAO,CAAC,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1E,CAAC;IAED;;;;;OAKG;IACO,4BAA4B,CAAC,YAAoB,EAAE,OAAuB;QAClF,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAC9C,OAAO,OAAO,CAAC,MAAM,IAAI,iBAAiB,CAAC,MAAM,CAAC,KAAK,YAAY,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;IACrG,CAAC;CACF;AAhED,gEAgEC","sourcesContent":["import type { ActionContext, IAction, IActorArgs, IActorOutput, IActorTest } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type { AsyncIterator } from 'asynciterator';\nimport type * as RDF from 'rdf-js';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * @type {string} Context entry for data sources.\n * @value {DataSources} An array of sources.\n */\nexport const KEY_CONTEXT_SOURCES = '@comunica/bus-rdf-resolve-quad-pattern:sources';\n/**\n * @type {string} Context entry for a data source.\n * @value {IDataSource} A source.\n */\nexport const KEY_CONTEXT_SOURCE = '@comunica/bus-rdf-resolve-quad-pattern:source';\n\nexport function isDataSourceRawType(dataSource: IDataSource): dataSource is string | RDF.Source {\n  return typeof dataSource === 'string' || 'match' in dataSource;\n}\nexport function getDataSourceType(dataSource: IDataSource): string | undefined {\n  if (typeof dataSource === 'string') {\n    return '';\n  }\n  return 'match' in dataSource ? 'rdfjsSource' : dataSource.type;\n}\nexport function getDataSourceValue(dataSource: IDataSource): string | RDF.Source {\n  return isDataSourceRawType(dataSource) ? dataSource : dataSource.value;\n}\nexport function getDataSourceContext(dataSource: IDataSource, context: ActionContext): ActionContext {\n  if (typeof dataSource === 'string' || 'match' in dataSource || !dataSource.context) {\n    return context;\n  }\n  return context.merge(dataSource.context);\n}\n\n/**\n * A comunica actor for rdf-resolve-quad-pattern events.\n *\n * Actor types:\n * * Input:  IActionRdfResolveQuadPattern:      A quad pattern and an optional context.\n * * Test:   <none>\n * * Output: IActorRdfResolveQuadPatternOutput: The resulting quad stream and optional metadata.\n *\n * @see IActionRdfResolveQuadPattern\n * @see IActorRdfResolveQuadPatternOutput\n */\nexport abstract class ActorRdfResolveQuadPattern extends Actor<IActionRdfResolveQuadPattern, IActorTest,\nIActorRdfResolveQuadPatternOutput> {\n  public constructor(args: IActorArgs<IActionRdfResolveQuadPattern, IActorTest, IActorRdfResolveQuadPatternOutput>) {\n    super(args);\n  }\n\n  /**\n   * Get the sources from the given context.\n   * @param {ActionContext} context An optional context.\n   * @return {IDataSource[]} The array of sources or undefined.\n   */\n  protected getContextSources(context?: ActionContext): DataSources | undefined {\n    return context ? context.get(KEY_CONTEXT_SOURCES) : undefined;\n  }\n\n  /**\n   * Get the source from the given context.\n   * @param {ActionContext} context An optional context.\n   * @return {IDataSource} The source or undefined.\n   */\n  protected getContextSource(context?: ActionContext): IDataSource | undefined {\n    return context ? context.get(KEY_CONTEXT_SOURCE) : undefined;\n  }\n\n  /**\n   * Get the source's raw URL value from the given context.\n   * @param {IDataSource} source A source.\n   * @return {string} The URL or null.\n   */\n  protected getContextSourceUrl(source?: IDataSource): string | undefined {\n    if (source) {\n      let fileUrl = getDataSourceValue(source);\n      if (typeof fileUrl === 'string') {\n        // Remove hashes from source\n        const hashPosition = fileUrl.indexOf('#');\n        if (hashPosition >= 0) {\n          fileUrl = fileUrl.slice(0, hashPosition);\n        }\n\n        return fileUrl;\n      }\n    }\n  }\n\n  /**\n   * Check if the given context has a single source.\n   * @param {ActionContext} context An optional context.\n   * @return {boolean} If the given context has a single source of the given type.\n   */\n  protected hasContextSingleSource(context?: ActionContext): boolean {\n    const source = this.getContextSource(context);\n    return Boolean(source && (isDataSourceRawType(source) || source.value));\n  }\n\n  /**\n   * Check if the given context has a single source of the given type.\n   * @param {string} requiredType The required source type name.\n   * @param {ActionContext} context An optional context.\n   * @return {boolean} If the given context has a single source of the given type.\n   */\n  protected hasContextSingleSourceOfType(requiredType: string, context?: ActionContext): boolean {\n    const source = this.getContextSource(context);\n    return Boolean(source && getDataSourceType(source) === requiredType && getDataSourceValue(source));\n  }\n}\n\nexport type IDataSource = string | RDF.Source | {\n  type?: string;\n  value: string | RDF.Source;\n  context?: ActionContext;\n};\nexport type DataSources = IDataSource[];\n\nexport interface IActionRdfResolveQuadPattern extends IAction {\n  /**\n   * The quad pattern to resolve.\n   */\n  pattern: Algebra.Pattern;\n}\n\nexport interface IActorRdfResolveQuadPatternOutput extends IActorOutput {\n  /**\n   * The resulting quad data stream.\n   *\n   * The returned stream MUST expose the property 'metadata'.\n   * The implementor is reponsible for handling cases where 'metadata'\n   * is being called without the stream being in flow-mode.\n   * This metadata object MUST be a hash, and MAY be empty.\n   * It is recommended to contain at least totalItems as an estimate of the number of quads that will be in the stream.\n   */\n  data: AsyncIterator<RDF.Quad>;\n}\n"]}