{"version":3,"file":"ActorRdfSerialize.js","sourceRoot":"","sources":["ActorRdfSerialize.ts"],"names":[],"mappings":";;;AAEA,mFAA8E;AAI9E;;;;;;;;;;GAUG;AACH,MAAsB,iBAAkB,SACtC,mDAAkF;IAClF,YAAmB,IAAqF;QACtG,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;CACF;AALD,8CAKC","sourcesContent":["import type { IActionAbstractMediaTyped, IActorArgsMediaTyped,\n  IActorOutputAbstractMediaTyped, IActorTestAbstractMediaTyped } from '@comunica/actor-abstract-mediatyped';\nimport { ActorAbstractMediaTyped } from '@comunica/actor-abstract-mediatyped';\nimport type { IAction, IActorOutput, IActorTest } from '@comunica/core';\nimport type * as RDF from 'rdf-js';\n\n/**\n * A comunica actor for RDF parse events.\n *\n * Actor types:\n * * Input:  IActionRdfSerialize:      A serialize input or a media type input.\n * * Test:   <none>\n * * Output: IActorRdfSerializeOutput: The serialized quads.\n *\n * @see IActionRdfSerialize\n * @see IActorRdfSerializeOutput\n */\nexport abstract class ActorRdfSerialize extends\n  ActorAbstractMediaTyped<IActionRdfSerialize, IActorTest, IActorRdfSerializeOutput> {\n  public constructor(args: IActorArgsMediaTyped<IActionRdfSerialize, IActorTest, IActorRdfSerializeOutput>) {\n    super(args);\n  }\n}\n\nexport type IActionRootRdfSerialize = IActionAbstractMediaTyped<IActionRdfSerialize>;\nexport type IActorTestRootRdfSerialize = IActorTestAbstractMediaTyped<IActorTest>;\nexport type IActorOutputRootRdfSerialize = IActorOutputAbstractMediaTyped<IActorRdfSerializeOutput>;\n\nexport interface IActionRdfSerialize extends IAction {\n  /**\n   * The stream of quads.\n   */\n  quadStream: RDF.Stream;\n}\n\nexport interface IActorRdfSerializeOutput extends IActorOutput {\n  /**\n   * A readable string stream in a certain RDF serialization that was serialized.\n   */\n  data: NodeJS.ReadableStream;\n  /**\n   * An optional field indicating if the given output stream uses a triple-based serialization,\n   * in which everything is serialized in the default graph.\n   * If falsy, the quad stream contain actual quads, otherwise they should be interpreted as triples.\n   */\n  triples?: boolean;\n}\n"]}