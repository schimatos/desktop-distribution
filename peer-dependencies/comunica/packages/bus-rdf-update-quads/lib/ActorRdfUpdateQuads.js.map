{"version":3,"file":"ActorRdfUpdateQuads.js","sourceRoot":"","sources":["ActorRdfUpdateQuads.ts"],"names":[],"mappings":";;;AAEA,yCAA+G;AAE/G;;;;;;;;;;GAUG;AACH,MAAsB,mBAAoB,SAAQ,YAAoE;IAGpH,YAAmB,IAA+E;QAChG,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAKD;;OAEG;IACI,KAAK,CAAC,IAAI,CAAC,MAA6B;QAC7C,qEAAqE;QACrE,IAAI,CAAC,MAAM,CAAC,gBAAgB,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YACxD,OAAO,IAAI,CAAC;SACb;QACD,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,GAAG,CAAC,MAA6B;QAC5C,mCAAmC;QACnC,IAAI,CAAC,MAAM,CAAC,gBAAgB,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YACxD,OAAO,EAAE,CAAC;SACX;QACD,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;CACF;AA/BD,kDA+BC","sourcesContent":["import { QuadStream } from '@comunica/bus-query-operation';\nimport { IActionRdfUpdateQuadStream, IActorRdfUpdateQuadStreamOutput } from '@comunica/bus-rdf-update-quad-stream';\nimport { ActionContext, Actor, IAction, IActorArgs, IActorOutput, IActorTest, Mediator } from '@comunica/core';\n\n/**\n * A comunica actor for rdf-update-quads events.\n *\n * Actor types:\n * * Input:  IActionRdfUpdateQuads:      Streams of quads to be inserted and deleted.\n * * Test:   <none>\n * * Output: IActorRdfUpdateQuadsOutput: Streams of quads that were inserted and deleted.\n *\n * @see IActionRdfUpdateQuads\n * @see IActorRdfUpdateQuadsOutput\n */\nexport abstract class ActorRdfUpdateQuads extends Actor<IActionRdfUpdateQuads, IActorTest, IActorRdfUpdateQuadsOutput> {\n  public readonly mediatorUpdateQuadStream: Mediator<Actor<IActionRdfUpdateQuadStream, IActorTest, IActorRdfUpdateQuadStreamOutput>,\n  IActionRdfUpdateQuadStream, IActorTest, IActorRdfUpdateQuadStreamOutput>;\n  public constructor(args: IActorArgs<IActionRdfUpdateQuads, IActorTest, IActorRdfUpdateQuadsOutput>) {\n    super(args);\n  }\n\n  public abstract runOperation(action: IActionRdfUpdateQuads): Promise<IActorRdfUpdateQuadsOutput>;\n  public abstract testOperation(action: IActionRdfUpdateQuads): Promise<IActorTest>;\n  \n  /**\n   * Test function for update quad stream actors.\n   */\n  public async test(action: IActionRdfUpdateQuads): Promise<IActorTest> {\n    // If there are no updates to be made then this can be run trivially.\n    if (!action.quadStreamInsert && !action.quadStreamDelete) {\n      return true;\n    }\n    return await this.testOperation(action);\n  }\n\n  /**\n   * Run function for update quad stream actors.\n   */\n  public async run(action: IActionRdfUpdateQuads): Promise<IActorRdfUpdateQuadsOutput> {\n    // There are no updates to be made.\n    if (!action.quadStreamInsert && !action.quadStreamDelete) {\n      return {};\n    }\n    return await this.runOperation(action);\n  }\n}\n\nexport interface IActionRdfUpdateQuads extends IAction {\n  /**\n   * The stream of quads that have been inserted into the main stream\n   */\n  quadStreamInsert?: QuadStream;\n  /**\n   * The stream of quads that have been deleted from the main stream\n   */\n  quadStreamDelete?: QuadStream;\n  /**\n   * A convenience constructor for {@link ActionContext} based on a given hash.\n   * @param {{[p: string]: any}} hash A hash that maps keys to values.\n   * @return {ActionContext} The immutable action context from the hash.\n   * @constructor\n   */\n  context?: ActionContext;\n}\n\nexport interface IActorRdfUpdateQuadsOutput extends IActorOutput {\n  /**\n   * The stream of quads that were inserted.\n   * Undefined if the operation did not have to insert anything.\n   */\n  quadStreamInserted?: QuadStream;\n  /**\n   * The stream of quads that were deleted.\n   * Undefined if the operation did not have to delete anything.\n   */\n  quadStreamDeleted?: QuadStream;\n}\n"]}