{"version":3,"file":"ActorRdfWrite.js","sourceRoot":"","sources":["ActorRdfWrite.ts"],"names":[],"mappings":";;;AAAA,yCAAsF;AAGtF,sEAAsE;AACtE;;;;;;;;;;GAUG;AACH,MAAsB,aAAc,SAAQ,YAAwD;IAGlG,YAAmB,IAAmE;QACpF,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED,mGAAmG;IACnG;;;;;OAKG;IACI,yBAAyB,CAAC,IAAY;;QAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,QAAQ,IAAI,CAAC,EAAE;YACjB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACjC,aAAa;YACb,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;YAC/B,OAAO,OAAC,IAAI,CAAC,aAAa,mCAAI,EAAE,GAAG,EAAE,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;SAC3E;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AAxBD,sCAwBC","sourcesContent":["import { Actor, IAction, IActorArgs, IActorOutput, IActorTest } from '@comunica/core';\nimport * as RDF from 'rdf-js';\n\n// TODO: Steal other necessary components from the dereference module.\n/**\n * A comunica actor for rdf-write events.\n *\n * Actor types:\n * * Input:  IActionRdfWrite:      TODO: fill in.\n * * Test:   <none>\n * * Output: IActorRdfWriteOutput: TODO: fill in.\n *\n * @see IActionRdfWrite\n * @see IActorRdfWriteOutput\n */\nexport abstract class ActorRdfWrite extends Actor<IActionRdfWrite, IActorTest, IActorRdfWriteOutput> {\n  public readonly mediaMappings: Record<string, string>;\n\n  public constructor(args: IActorArgs<IActionRdfWrite, IActorTest, IActorRdfWriteOutput>) {\n    super(args);\n  }\n  \n  // TODO: This is taken from the dereference bus - refactor so they can just share the same function\n  /**\n   * Get the media type based on the extension of the given path,\n   * which can be an URL or file path.\n   * @param {string} path A path.\n   * @return {string} A media type or the empty string.\n   */\n  public getMediaTypeFromExtension(path: string): string {\n    const dotIndex = path.lastIndexOf('.');\n    if (dotIndex >= 0) {\n      const ext = path.slice(dotIndex);\n      // Ignore dot\n      console.log(this.mediaMappings)\n      return (this.mediaMappings ?? { ttl: 'text/turtle' })[ext.slice(1)] || '';\n    }\n    return '';\n  }\n}\n// TODO: Again - this is stolen from the dereference bus.\nexport interface IActorRdfDereferenceMediaMappingsArgs\n  extends IActorArgs<IActionRdfWrite, IActorTest, IActorRdfWriteOutput> {\n  /**\n   * A collection of mappings, mapping file extensions to their corresponding media type.\n   */\n  mediaMappings: Record<string, string>;\n}\n\nexport interface IActionRdfWrite extends IAction {\n  /**\n   * The URL to dereference\n   */\n  url: string;\n\n  /**\n   * The mediatype of the source (if it can't be inferred from the source)\n   */\n  mediaType?: string;\n  /**\n   * Optional HTTP method to use.\n   * Defaults to GET.\n   */\n  method?: string;\n  /**\n   * Optional HTTP headers to pass.\n   */\n  headers?: Record<string, string>;\n  /**\n   * The stream of quads to write to the source\n   */\n  quads: RDF.Stream;\n}\n\nexport interface IActorRdfWriteOutput extends IActorOutput {\n  /**\n   * The page on which the output was written to.\n   *\n   * This is not necessarily the same as the original input url,\n   * as this may have changed due to redirects.\n   */\n  url: string;\n  /**\n   * An optional field indicating if the given quad stream originates from a triple-based serialization,\n   * in which everything is serialized in the default graph.\n   * If falsy, the quad stream contains actual quads, otherwise they should be interpreted as triples.\n   */\n  triples?: boolean;\n  /**\n   * The returned headers of the final URL.\n   */\n  headers?: Record<string, string>;\n  /**\n   * The stream of quads that were not written to the source.\n   */\n  rejectedQuads?: RDF.Stream;\n}\n"]}