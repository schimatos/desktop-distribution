{"version":3,"file":"MediatorCombinePipeline.js","sourceRoot":"","sources":["MediatorCombinePipeline.ts"],"names":[],"mappings":";;;AACA,yCAA0C;AAE1C;;;GAGG;AACH,MAAa,uBACX,SAAQ,eAAoB;IAC5B,YAAmB,IAA+B;QAChD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,MAAS;QAC5B,IAAI,WAAsC,CAAC;QAC3C,IAAI;YACF,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SACpC;QAAC,WAAM;YACN,8DAA8D;YAC9D,OAAO,MAAM,CAAC;SACf;QAED,wBAAwB;QACxB,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QAEzD,8BAA8B;QAC9B,yDAAyD;QACzD,IAAI,MAAM,GAAM,MAAM,CAAC;QACvB,KAAK,MAAM,KAAK,IAAI,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC3D,MAAM,GAAG,MAAM,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;SAC5C;QAED,gCAAgC;QAChC,OAAO,MAAM,CAAC;IAChB,CAAC;IAES,iBAAiB;QACzB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC3C,CAAC;CACF;AAhCD,0DAgCC","sourcesContent":["import type { Actor, IAction, IActorOutput, IActorReply, IActorTest, IMediatorArgs } from '@comunica/core';\nimport { Mediator } from '@comunica/core';\n\n/**\n * A comunica mediator that goes over all actors in sequence and forwards I/O.\n * This required the action input and the actor output to be of the same type.\n */\nexport class MediatorCombinePipeline<A extends Actor<H, T, H>, H extends IAction | IActorOutput, T extends IActorTest>\n  extends Mediator<A, H, T, H> {\n  public constructor(args: IMediatorArgs<A, H, T, H>) {\n    super(args);\n  }\n\n  public async mediate(action: H): Promise<H> {\n    let testResults: IActorReply<A, H, T, H>[];\n    try {\n      testResults = this.publish(action);\n    } catch {\n      // If no actors are available, just return the input as output\n      return action;\n    }\n\n    // Delegate test errors.\n    await Promise.all(testResults.map(({ reply }) => reply));\n\n    // Pass action to first actor,\n    // and each actor output as input to the following actor.\n    let handle: H = action;\n    for (const actor of testResults.map(result => result.actor)) {\n      handle = await actor.runObservable(handle);\n    }\n\n    // Return the final actor output\n    return handle;\n  }\n\n  protected mediateWithResult(): Promise<IActorReply<A, H, T, H>> {\n    throw new Error('Method not supported.');\n  }\n}\n"]}