{"version":3,"file":"MediatorNumber.js","sourceRoot":"","sources":["MediatorNumber.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Actor, IAction, IActorOutput, IActorReply, IActorTest, IMediatorArgs } from '@comunica/core';\nimport { Mediator } from '@comunica/core';\n\n/**\n * A mediator that can mediate over a single number field.\n *\n * It takes the required 'field' and 'type' parameters.\n * The 'field' parameter represents the field name of the test result field over which must be mediated.\n * The 'type' parameter\n */\nexport class MediatorNumber<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput>\n  extends Mediator<A, I, T, O> implements IMediatorNumberArgs<A, I, T, O> {\n  public static MIN: string = 'https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-number/' +\n    'Mediator/Number/type/TypeMin';\n\n  public static MAX: string = 'https://linkedsoftwaredependencies.org/bundles/npm/@comunica/mediator-number/' +\n    'Mediator/Number/type/TypeMax';\n\n  public readonly field: string;\n  public readonly type: string;\n  public readonly ignoreErrors: boolean;\n  public readonly indexPicker: (tests: T[]) => number;\n\n  public constructor(args: IMediatorNumberArgs<A, I, T, O>) {\n    super(args);\n    this.indexPicker = this.createIndexPicker();\n  }\n\n  /**\n   * @return {(tests: T[]) => number} A function that returns the index of the test result\n   *                                  that has been chosen by this mediator.\n   */\n  protected createIndexPicker(): (tests: (T | undefined)[]) => number {\n    switch (this.type) {\n      case MediatorNumber.MIN:\n        return (tests: (T | undefined)[]): number => tests.reduce((prev, curr, i) => {\n          const val: number = this.getOrDefault((<any> curr)[this.field], Infinity);\n          return val !== null && (Number.isNaN(prev[0]) || prev[0] > val) ? [ val, i ] : prev;\n        }, [ Number.NaN, -1 ])[1];\n      case MediatorNumber.MAX:\n        return (tests: (T | undefined)[]): number => tests.reduce((prev, curr, i) => {\n          const val: number = this.getOrDefault((<any> curr)[this.field], -Infinity);\n          return val !== null && (Number.isNaN(prev[0]) || prev[0] < val) ? [ val, i ] : prev;\n        }, [ Number.NaN, -1 ])[1];\n      default:\n        throw new Error(`No valid \"type\" value was given, must be either ${\n          MediatorNumber.MIN} or ${MediatorNumber.MAX}, but got: ${this.type}`);\n    }\n  }\n\n  protected getOrDefault(value: number | undefined, defaultValue: number): number {\n    return value === undefined ? defaultValue : value;\n  }\n\n  protected async mediateWithResult(action: I, testResults: IActorReply<A, I, T, O>[]): Promise<IActorReply<A, I, T, O>> {\n    let promises = testResults.map(({ reply }) => reply);\n    const errors: Error[] = [];\n    if (this.ignoreErrors) {\n      const dummy: any = {};\n      dummy[this.field] = null;\n      promises = promises.map(promise => promise.catch(error => {\n        errors.push(error);\n        return dummy;\n      }));\n    }\n    const results = await Promise.all(promises);\n    const index = this.indexPicker(results);\n    if (index < 0) {\n      throw new Error(`All actors rejected their test in ${this.name}\\n${\n        errors.map(error => error.message).join('\\n')}`);\n    }\n    return testResults[index];\n  }\n}\n\nexport interface IMediatorNumberArgs<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest,\n  O extends IActorOutput> extends IMediatorArgs<A, I, T, O> {\n  /**\n   * The field name of the test result field over which must be mediated.\n   */\n  field: string;\n  /**\n   * The way how the index should be selected.\n   * For choosing the minimum value: {@link MediatorNumber#MIN}\n   * For choosing the maximum value: {@link MediatorNumber#MAX}\n   */\n  type: string;\n\n  /**\n   * If actors that throw test errors should be ignored\n   */\n  ignoreErrors?: boolean;\n}\n"]}