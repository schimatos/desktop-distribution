{"version":3,"file":"ArgsRunner.js","sourceRoot":"","sources":["ArgsRunner.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-process-env */\nimport type { IActorOutputInit } from '@comunica/bus-init';\nimport type { ISetupProperties } from '@comunica/runner';\nimport { run } from '@comunica/runner';\n\nexport function runArgs(configResourceUrl: string, argv: string[], stdin: NodeJS.ReadStream,\n  stdout: NodeJS.WriteStream, stderr: NodeJS.WriteStream, env: NodeJS.ProcessEnv,\n  runnerUri?: string, properties?: ISetupProperties): void {\n  run(configResourceUrl, { argv, env, stdin }, runnerUri, properties)\n    .then((results: IActorOutputInit[]) => {\n      results.forEach((result: IActorOutputInit) => {\n        if (result.stdout) {\n          result.stdout.on('error', error => process.stderr.write(`${error.message}\\n`));\n          result.stdout.pipe(stdout);\n        }\n        if (result.stderr) {\n          result.stderr.on('error', error => process.stderr.write(`${error.message}\\n`));\n          result.stderr.pipe(stderr);\n        }\n      });\n    })\n    .catch(error => process.stderr.write(`${error.message}\\n`));\n}\n\nexport function runArgsInProcess(moduleRootPath: string, defaultConfigPath: string): void {\n  const argv = process.argv.slice(2);\n  runArgs(process.env.COMUNICA_CONFIG ?\n    `${process.cwd()}/${process.env.COMUNICA_CONFIG}` :\n    defaultConfigPath, argv, process.stdin, process.stdout, process.stderr, process.env, undefined, {\n    mainModulePath: moduleRootPath,\n  });\n}\n\nexport function runArgsInProcessStatic(actor: any): void {\n  const argv = process.argv.slice(2);\n  actor.run({ argv, env: process.env, stdin: process.stdin })\n    .then((result: IActorOutputInit) => {\n      if (result.stdout) {\n        result.stdout.on('error', error => process.stderr.write(`${error.message}\\n`));\n        result.stdout.pipe(process.stdout);\n      }\n      if (result.stderr) {\n        result.stderr.on('error', error => process.stderr.write(`${error.message}\\n`));\n        result.stderr.pipe(process.stderr);\n      }\n    }).catch((error: Error) => process.stderr.write(`${error.message}\\n`));\n}\n"]}