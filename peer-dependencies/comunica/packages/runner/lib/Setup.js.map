{"version":3,"file":"Setup.js","sourceRoot":"","sources":["Setup.ts"],"names":[],"mappings":";;;AAEA,+CAAsC;AAGtC;;;;;GAKG;AAEH;;;;;;;GAOG;AACI,KAAK,UAAU,oBAAoB,CAAC,iBAAyB,EAAE,WAAmB,EACvF,UAA6B;IAC7B,4BAA4B;IAC5B,IAAI,CAAC,UAAU,EAAE;QACf,UAAU,GAAG,EAAE,CAAC;KACjB;IACD,UAAU,mBAAK,cAAc,EAAE,OAAO,CAAC,GAAG,EAAE,IAAK,UAAU,CAAE,CAAC;IAE9D,oCAAoC;IACpC,MAAM,MAAM,GAAG,IAAI,qBAAM,CAAC,UAAU,CAAC,CAAC;IACtC,MAAM,MAAM,CAAC,gCAAgC,EAAE,CAAC;IAChD,OAAO,MAAM,MAAM,CAAC,kBAAkB,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;AACzE,CAAC;AAZD,oDAYC;AAED;;;;;;;;;GASG;AACI,KAAK,UAAU,GAAG,CAAC,iBAAyB,EAAE,MAAmB,EAAE,SAAkB,EAC1F,UAA6B;IAC7B,IAAI,CAAC,SAAS,EAAE;QACd,SAAS,GAAG,iBAAiB,CAAC;KAC/B;IAED,MAAM,MAAM,GAAW,MAAM,oBAAoB,CAAC,iBAAiB,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IAC5F,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC;IAC1B,IAAI,MAA0B,CAAC;IAC/B,IAAI;QACF,MAAM,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KACnC;IAAC,OAAO,KAAc,EAAE;QACvB,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC;QAC5B,MAAM,KAAK,CAAC;KACb;IACD,MAAM,MAAM,CAAC,YAAY,EAAE,CAAC;IAC5B,OAAO,MAAM,CAAC;AAChB,CAAC;AAjBD,kBAiBC","sourcesContent":["import type { IActionInit, IActorOutputInit } from '@comunica/bus-init';\nimport type { LoaderProperties } from 'componentsjs';\nimport { Loader } from 'componentsjs';\nimport type { Runner } from './Runner';\n\n/**\n * Helper functions to setup instances from a given comunica config file.\n * This config file must be understandable by the Components.js framework.\n *\n * @link https://www.npmjs.com/package/lsd-components\n */\n\n/**\n * Instantiate the given component.\n *\n * @param {string} configResourceUrl    The URL or local path to a Components.js config file.\n * @param {string} instanceUri          A URI identifying the component to instantiate.\n * @param {LoaderProperties} properties Properties to pass to the Components.js loader.\n * @return {Promise<any>}               A promise that resolves to the instance.\n */\nexport async function instantiateComponent(configResourceUrl: string, instanceUri: string,\n  properties?: ISetupProperties): Promise<any> {\n  // Handle optional arguments\n  if (!properties) {\n    properties = {};\n  }\n  properties = { mainModulePath: process.cwd(), ...properties };\n\n  // Instantiate the given config file\n  const loader = new Loader(properties);\n  await loader.registerAvailableModuleResources();\n  return await loader.instantiateFromUrl(instanceUri, configResourceUrl);\n}\n\n/**\n * Run the given config file.\n * This will initialize the runner, and deinitialize it once it has finished\n *\n * @param {string} configResourceUrl    The URL or local path to a Components.js config file.\n * @param {any[]} action                The action to pass to the runner.\n * @param {string} runnerUri            An optional URI identifying the runner.\n * @param {LoaderProperties} properties Properties to pass to the Components.js loader.\n * @return {Promise<any>}               A promise that resolves when the runner has been initialized.\n */\nexport async function run(configResourceUrl: string, action: IActionInit, runnerUri?: string,\n  properties?: ISetupProperties): Promise<any> {\n  if (!runnerUri) {\n    runnerUri = 'urn:comunica:my';\n  }\n\n  const runner: Runner = await instantiateComponent(configResourceUrl, runnerUri, properties);\n  await runner.initialize();\n  let output: IActorOutputInit[];\n  try {\n    output = await runner.run(action);\n  } catch (error: unknown) {\n    await runner.deinitialize();\n    throw error;\n  }\n  await runner.deinitialize();\n  return output;\n}\n\nexport type ISetupProperties = LoaderProperties;\n"]}