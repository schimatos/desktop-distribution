{"version":3,"file":"DataSourceUtils.js","sourceRoot":"","sources":["DataSourceUtils.ts"],"names":[],"mappings":";;;AAEA,yFAIgD;AAGhD;;GAEG;AACU,QAAA,eAAe,GAAG;IAC7B;;;;OAIG;IACH,KAAK,CAAC,eAAe,CAAC,OAAuB;QAC3C,IAAI,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,iDAAkB,CAAC,EAAE;YAC9C,8BAA8B;YAC9B,OAAO,OAAO,CAAC,GAAG,CAAC,iDAAkB,CAAC,CAAC;SACxC;QACD,IAAI,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,kDAAmB,CAAC,EAAE;YAC/C,8BAA8B;YAC9B,MAAM,WAAW,GAAgB,OAAO,CAAC,GAAG,CAAC,kDAAmB,CAAC,CAAC;YAClE,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC5B,OAAO,WAAW,CAAC,CAAC,CAAC,CAAC;aACvB;SACF;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,mBAAmB,CAAC,OAAuB;QAC/C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACnD,OAAO,MAAM,CAAC,CAAC,CAAC,gDAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACxD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,mBAAmB,CAAC,OAAkC,EAAE,YAAoB;QAChF,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAC3D,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,KAAK,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC;IAC1D,CAAC;CACF,CAAC","sourcesContent":["import type { DataSources,\n  IDataSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport {\n  getDataSourceType,\n  KEY_CONTEXT_SOURCE,\n  KEY_CONTEXT_SOURCES,\n} from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { ActionContext } from '@comunica/core';\n\n/**\n * Comunica datasource utilities\n */\nexport const DataSourceUtils = {\n  /**\n   * Get the single source if the context contains just a single source.\n   * @param {ActionContext} context A context, can be null.\n   * @return {Promise<IDataSource>} A promise resolving to the single datasource or undefined.\n   */\n  async getSingleSource(context?: ActionContext): Promise<IDataSource | undefined> {\n    if (context && context.has(KEY_CONTEXT_SOURCE)) {\n      // If the single source is set\n      return context.get(KEY_CONTEXT_SOURCE);\n    }\n    if (context && context.has(KEY_CONTEXT_SOURCES)) {\n      // If multiple sources are set\n      const datasources: DataSources = context.get(KEY_CONTEXT_SOURCES);\n      if (datasources.length === 1) {\n        return datasources[0];\n      }\n    }\n  },\n\n  /**\n   * Get the type of a single source\n   * @param {ActionContext} context A context, can be undefined.\n   * @return {Promise<string>} A promise resolving to the type of the source, can be undefined if source is undefined.\n   */\n  async getSingleSourceType(context?: ActionContext): Promise<string | undefined> {\n    const source = await this.getSingleSource(context);\n    return source ? getDataSourceType(source) : undefined;\n  },\n\n  /**\n   * Check if the given context has a single source of the given type.\n   * @param {ActionContext} context An optional context.\n   * @param {string} requiredType The required source type name.\n   * @return {boolean} If the given context has a single source of the given type.\n   */\n  async singleSourceHasType(context: ActionContext | undefined, requiredType: string): Promise<boolean> {\n    const actualType = await this.getSingleSourceType(context);\n    return actualType ? actualType === requiredType : false;\n  },\n};\n"]}