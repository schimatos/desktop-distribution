{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAEA,+EAAqF;AAErF;;;GAGG;AACH,SAAgB,SAAS;IACvB,OAAO,OAAO,CAAC,qBAAqB,CAAC,CAAC;AACxC,CAAC;AAFD,8BAEC;AAED;;;;GAIG;AACH,SAAgB,gBAAgB,CAAC,OAAuB;IACtD,OAAO,oCAAqB,CAAC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EAAE,SAAS,EAAE,GAAG,SAAS,6BAA6B,CAAC,CAAC;AACpG,CAAC;AAFD,4CAEC","sourcesContent":["import type { ActorInitSparql } from '@comunica/actor-init-sparql/lib/ActorInitSparql-browser';\nimport type { IQueryOptions } from '@comunica/actor-init-sparql/lib/QueryDynamic';\nimport { newEngineDynamicArged } from '@comunica/actor-init-sparql/lib/QueryDynamic';\n\n/**\n * Create a new comunica engine from the default config.\n * @return {ActorInitSparql} A comunica engine.\n */\nexport function newEngine(): ActorInitSparql {\n  return require('./engine-default.js');\n}\n\n/**\n * Create a new dynamic comunica engine from a given config file.\n * @param {IQueryOptions} options Optional options on how to instantiate the query evaluator.\n * @return {Promise<QueryEngine>} A promise that resolves to a fully wired comunica engine.\n */\nexport function newEngineDynamic(options?: IQueryOptions): Promise<ActorInitSparql> {\n  return newEngineDynamicArged(options ?? {}, __dirname, `${__dirname}/config/config-default.json`);\n}\n"]}