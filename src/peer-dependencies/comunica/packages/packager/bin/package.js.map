{"version":3,"file":"package.js","sourceRoot":"","sources":["package.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n/* eslint-disable no-sync */\nimport * as fs from 'fs';\nimport * as Path from 'path';\nimport type { Stream } from 'stream';\nimport { compileConfig } from 'componentsjs';\nimport type { ParsedArgs } from 'minimist';\nimport minimist from 'minimist';\n\nconst args: ParsedArgs = minimist(process.argv.slice(2));\nif (args._.length !== 1 || !args.o || args.h || args.help) {\n  process.stderr.write(`comunica-package packages a Comunica config file into a new NPM package\n\nUsage:\n  comunica-package http://example.org/myInstance -c config.jsonld -o my-engine\n  cat config.jsonld | compile-config http://example.org/myInstance -o my-engine\n\nOptions:\n  -o      [Required] The package name to generate\n  -c      Path to a Comunica config file, if not provided, the config must be provided via stdin\n  -p      The main module path, if not provided, this defaults to the directory of the packager\n  -g      If global modules should be included as well next to local modules.\n  -e      The instance by config URI that will be exported, by default this is the provided instance URI.\n  --help  print this help message\n`);\n  process.exit(1);\n}\n\nconst configResourceUri: string = args._[0];\n\n// Check if the package name is valid\nconst packageName = args.o;\nif (!/^[\\dA-Za-z-]*$/u.test(packageName)) {\n  throw new Error(`Invalid package name: ${packageName}`);\n}\n\n// Make the target package directory if it does not exist yet.\nlet packageJson: any = {};\nif (!fs.existsSync(packageName)) {\n  fs.mkdirSync(packageName);\n} else if (!fs.statSync(packageName).isDirectory()) {\n  throw new Error('The target package already exists, but it is not a directory!');\n} else if (fs.existsSync(`${packageName}/package.json`)) {\n  // Reuse contents if a package.json file already exists\n  packageJson = require(`${process.cwd()}/${packageName}/package.json`);\n}\n\nlet configStreamRaw: Stream;\nlet configPath: string;\nif (args.c) {\n  configStreamRaw = fs.createReadStream(args.c, { encoding: 'utf8' });\n  configPath = args.c;\n} else {\n  configStreamRaw = process.stdin;\n  configPath = '.';\n}\n\nlet mainModulePath: string;\nif (args.p) {\n  mainModulePath = Path.resolve(process.cwd(), args.p);\n} else {\n  mainModulePath = `${__dirname}/../`;\n}\n\nlet exportVariableName: string | undefined;\nif (args.e) {\n  exportVariableName = args.e;\n}\n\nconst scanGlobal = Boolean(args.g);\n\nconst dependencyRegex = /require\\('([^']*)'\\)/ug;\n\nconst referencePackageJson = require(`${__dirname}/../package.json`);\ncompileConfig({ mainModulePath, scanGlobal }, configPath, configStreamRaw, configResourceUri, exportVariableName)\n  .then((document: string) => {\n    // Find dependency package names\n    const dependencies: Record<string, string> = {};\n    let match;\n    // eslint-disable-next-line no-cond-assign\n    while (match = dependencyRegex.exec(document)) {\n      const dependencyName: string = match[1];\n      dependencies[dependencyName] = referencePackageJson.dependencies[dependencyName];\n    }\n\n    // Build our package.json file\n    packageJson.name = packageName;\n    packageJson.main = 'index.js';\n    packageJson.dependencies = dependencies;\n\n    // Write output files\n    fs.writeFileSync(`${packageName}/index.js`, document);\n    fs.writeFileSync(`${packageName}/package.json`, JSON.stringify(packageJson, null, '  '));\n  }).catch(error => process.stderr.write(`${error}\\n`));\n"]}